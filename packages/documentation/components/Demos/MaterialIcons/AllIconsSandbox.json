{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <title>MaterialIcons Example - All Icons</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { StatesConfig } from \"@react-md/states\";\n\nimport \"./styles.scss\";\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <StatesConfig>\n    <Demo />\n  </StatesConfig>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import '@react-md/icon/dist/mixins';\n@import '@react-md/list/dist/mixins';\n@import '@react-md/states/dist/mixins';\n@import '@react-md/transition/dist/mixins';\n@import '@react-md/utils/dist/mixins';\n@import '@react-md/theme/dist/mixins';\n@import '@react-md/typography/dist/mixins';;\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": "MaterialIcons Example - All Icons",
      "description": "Example from https://react-md.dev/packages/material-icons/demos#all-icons",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/icon": "next",
        "@react-md/list": "next",
        "@react-md/material-icons": "next",
        "@react-md/states": "next",
        "@react-md/transition": "next",
        "@react-md/utils": "next",
        "classnames": "latest",
        "react": "latest",
        "@react-md/theme": "next",
        "@react-md/typography": "next",
        "react-dom": "latest"
      },
      "devDependencies": {
        "react-scripts": "latest",
        "node-sass": "latest",
        "typescript": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "@types/jest": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  ".env": {
    "content": "SASS_PATH=node_modules:src",
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "import React, { FunctionComponent } from \"react\";\nimport { SimpleListItem } from \"@react-md/list\";\nimport scssVariables from \"@react-md/list/dist/scssVariables\";\nimport * as MaterialIcons from \"@react-md/material-icons\";\nimport { unitToNumber } from \"@react-md/utils\";\n\nimport \"./all-icons.scss\";\nimport Code from \"./Code\";\n\nconst allIcons = Object.entries(MaterialIcons).filter(([name]) =>\n  name.endsWith(\"SVGIcon\")\n);\n\nconst AllIcons = () => (\n  <div className=\"all-icons-container\">\n    {allIcons.map(([name, Icon]) => (\n      <div key={name} className=\"all-icons__info\">\n        <Icon />\n        <Code className=\"all-icons__name\">{name.replace(/SVGIcon/, \"\")}</Code>\n      </div>\n    ))}\n  </div>\n);\n\nexport default AllIcons;\n",
    "isBinary": false
  },
  "src/Code.tsx": {
    "content": "import React, { FunctionComponent, ReactNode } from \"react\";\nimport cn from \"classnames\";\n\nexport interface CodeProps {\n  className?: string;\n  children: ReactNode;\n  inline?: boolean;\n}\n\nconst Code: FunctionComponent<CodeProps> = ({\n  children,\n  inline,\n  className,\n}) => (\n  <code className={cn(\"code\", { \"code--inline\": inline }, className)}>\n    {children}\n  </code>\n);\n\nCode.defaultProps = {\n  inline: true,\n};\n\nexport default Code;\n",
    "isBinary": false
  },
  "src/code.scss": {
    "content": "@import 'variables';\n@import '@react-md/theme/dist/variables';\n@import '@react-md/typography/dist/variables';\n@import '@react-md/typography/dist/mixins';\n\n$code-background-color: darken($rmd-theme-background, 10%);\n$solarized-base-03: #002b36;\n$solarized-base-02: #073642;\n$solarized-base-01: #586e75;\n$solarized-base-00: #657b83;\n$solarized-base-0: #839496;\n$solarized-base-1: #93a1a1;\n$solarized-base-2: #eee8d5;\n$solarized-base-3: #fdf6e3;\n\n$solarized-yellow: #b58900;\n$solarized-orange: #cb4b16;\n$solarized-red: #d30102;\n$solarized-magenta: #d33682;\n$solarized-violet: #6c71c4;\n$solarized-blue: #268bd2;\n$solarized-cyan: #2aa198;\n$solarized-green: #859900;\n\n:root {\n  --code-bg: #{$code-background-color};\n  --code-bg-light: #{$rmd-grey-200};\n  --code-bg-dark: #{$code-background-color};\n}\n\n.code {\n  @include rmd-typography(body-1);\n\n  font-family: 'Source Code Pro', Consolas, Monaco, monospace;\n\n  &::selection,\n  *::selection {\n    background-color: $solarized-base-02;\n  }\n\n  &--block {\n    background-color: $solarized-base-03;\n    color: $solarized-base-1;\n\n    // always enforce ltr for blocked code\n    direction: ltr;\n    margin: 0.5em 0;\n    overflow: auto;\n    padding: 1em;\n    word-wrap: break-word;\n  }\n\n  &--inline {\n    background-color: var(--code-bg);\n    border-radius: 0.25rem;\n    font-size: 0.9em;\n    padding: 0.1em 0.4em;\n    white-space: pre-wrap;\n  }\n\n  &--counted {\n    padding-left: 3em;\n    position: relative;\n  }\n\n  &__lines {\n    border-right: 1px solid $solarized-base-01;\n    display: flex;\n    flex-direction: column;\n    left: 0;\n    padding-right: 0.25em;\n    pointer-events: none;\n    position: absolute;\n    text-align: right;\n    width: 2.5em;\n  }\n}\n",
    "isBinary": false
  },
  "src/all-icons.scss": {
    "content": "@import '@react-md/utils/dist/mixins';\n@import '@react-md/icon/dist/mixins';\n@import '@react-md/typography/dist/mixins';\n\n.all-icons-container {\n  align-items: center;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.all-icons__info {\n  @include rmd-icon-theme-update-var(size, 2.5rem);\n\n  align-items: center;\n  display: inline-flex;\n  flex-direction: column;\n  margin: 1rem;\n  width: 8rem;\n}\n\n.all-icons__name {\n  @include rmd-typography-text-overflow-ellipsis;\n\n  margin-top: 0.5rem;\n  text-align: center;\n  width: 100%;\n}\n",
    "isBinary": false
  }
}
