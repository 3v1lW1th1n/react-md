{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <title>Sizing Example - App Size Listener Example</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { StatesConfig } from \"@react-md/states\";\n\nimport \"./styles.scss\";\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <StatesConfig>\n    <Demo />\n  </StatesConfig>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import '@react-md/typography/dist/mixins';\n@import '@react-md/utils/dist/mixins';\n@import '@react-md/states/dist/mixins';\n@import '@react-md/theme/dist/mixins';;\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": "Sizing Example - App Size Listener Example",
      "description": "Example from https://react-md.dev/packages/sizing/demos#app-size-listener-example",
      "main": "src/index.tsx",
      "dependencies": {
        "/Users/mlaursen/code/react-md/package.json": "latest",
        "@react-md/sizing": "next",
        "@react-md/typography": "next",
        "@react-md/utils": "next",
        "@types/highlight.js": "latest",
        "classnames": "latest",
        "highlight.js/styles/solarized-dark.css": "latest",
        "marked": "latest",
        "package.json": "latest",
        "react": "latest",
        "@react-md/states": "next",
        "@react-md/theme": "next",
        "react-dom": "latest"
      },
      "devDependencies": {
        "react-scripts": "latest",
        "node-sass": "latest",
        "typescript": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "@types/jest": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  ".env": {
    "content": "SASS_PATH=node_modules:src",
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "import React, { FunctionComponent } from \"react\";\nimport { AppSizeListener, useAppSizeContext } from \"@react-md/sizing\";\nimport { TextContainer, Text } from \"@react-md/typography\";\nimport CodeBlock from \"./CodeBlock\";\n\nconst CurrentSize = () => {\n  const context = useAppSizeContext();\n  return (\n    <TextContainer>\n      <Text type=\"headline-6\">The current app size is:</Text>\n      <CodeBlock>{JSON.stringify(context, null, 2)}</CodeBlock>\n    </TextContainer>\n  );\n};\n\nconst AppSizeListenerExample: FunctionComponent = () => (\n  <AppSizeListener>\n    <CurrentSize />\n  </AppSizeListener>\n);\n\nexport default AppSizeListenerExample;\n",
    "isBinary": false
  },
  "src/Code.tsx": {
    "content": "import React, { FunctionComponent, ReactNode } from \"react\";\nimport cn from \"classnames\";\n\nexport interface CodeProps {\n  className?: string;\n  children: ReactNode;\n  inline?: boolean;\n}\n\nconst Code: FunctionComponent<CodeProps> = ({\n  children,\n  inline,\n  className,\n}) => (\n  <code className={cn(\"code\", { \"code--inline\": inline }, className)}>\n    {children}\n  </code>\n);\n\nCode.defaultProps = {\n  inline: true,\n};\n\nexport default Code;\n",
    "isBinary": false
  },
  "src/CodeBlock.tsx": {
    "content": "import React, {\n  forwardRef,\n  FunctionComponent,\n  ReactNode,\n  useMemo,\n} from \"react\";\nimport { WithForwardedRef } from \"@react-md/utils\";\n\nimport { highlightCode } from \"./utils\";\n\nimport Code from \"./Code\";\n\nexport interface CodeBlockProps {\n  className?: string;\n  language?: string;\n  children: ReactNode;\n  highlight?: boolean;\n}\n\ntype WithRef = WithForwardedRef<HTMLPreElement>;\ntype WithDefaultProps = CodeBlockProps & { language: string } & WithRef;\n\nconst CodeBlock: FunctionComponent<CodeBlockProps & WithRef> = props => {\n  const {\n    className,\n    language,\n    children: propChildren,\n    highlight,\n    forwardedRef,\n  } = props as WithDefaultProps;\n\n  const children = useMemo(() => {\n    if (!highlight || typeof propChildren !== \"string\") {\n      return <Code inline={false}>{propChildren}</Code>;\n    }\n\n    return (\n      <code\n        className=\"code\"\n        dangerouslySetInnerHTML={{\n          __html: highlightCode(propChildren, language),\n        }}\n      />\n    );\n  }, [propChildren, highlight, language]);\n\n  return (\n    <pre ref={forwardedRef} className=\"code code--block\">\n      {children}\n    </pre>\n  );\n};\n\nCodeBlock.defaultProps = {\n  highlight: true,\n  language: \"markdown\",\n};\n\nexport default forwardRef<HTMLPreElement, CodeBlockProps>((props, ref) => (\n  <CodeBlock {...props} forwardedRef={ref} />\n));\n",
    "isBinary": false
  },
  "src/code.scss": {
    "content": "@import 'variables';\n@import '@react-md/theme/dist/variables';\n@import '@react-md/typography/dist/variables';\n@import '@react-md/typography/dist/mixins';\n\n$code-background-color: darken($rmd-theme-background, 10%);\n$solarized-base-03: #002b36;\n$solarized-base-02: #073642;\n$solarized-base-01: #586e75;\n$solarized-base-00: #657b83;\n$solarized-base-0: #839496;\n$solarized-base-1: #93a1a1;\n$solarized-base-2: #eee8d5;\n$solarized-base-3: #fdf6e3;\n\n$solarized-yellow: #b58900;\n$solarized-orange: #cb4b16;\n$solarized-red: #d30102;\n$solarized-magenta: #d33682;\n$solarized-violet: #6c71c4;\n$solarized-blue: #268bd2;\n$solarized-cyan: #2aa198;\n$solarized-green: #859900;\n\n:root {\n  --code-bg: #{$code-background-color};\n  --code-bg-light: #{$rmd-grey-200};\n  --code-bg-dark: #{$code-background-color};\n}\n\n.code {\n  @include rmd-typography(body-1);\n\n  font-family: 'Source Code Pro', Consolas, Monaco, monospace;\n\n  &::selection,\n  *::selection {\n    background-color: $solarized-base-02;\n  }\n\n  &--block {\n    background-color: $solarized-base-03;\n    color: $solarized-base-1;\n\n    // always enforce ltr for blocked code\n    direction: ltr;\n    margin: 0.5em 0;\n    overflow: auto;\n    padding: 1em;\n    word-wrap: break-word;\n  }\n\n  &--inline {\n    background-color: var(--code-bg);\n    border-radius: 0.25rem;\n    font-size: 0.9em;\n    padding: 0.1em 0.4em;\n    white-space: pre-wrap;\n  }\n\n  &--counted {\n    padding-left: 3em;\n    position: relative;\n  }\n\n  &__lines {\n    border-right: 1px solid $solarized-base-01;\n    display: flex;\n    flex-direction: column;\n    left: 0;\n    padding-right: 0.25em;\n    pointer-events: none;\n    position: absolute;\n    text-align: right;\n    width: 2.5em;\n  }\n}\n",
    "isBinary": false
  },
  "src/utils.ts": {
    "content": "import cn from \"classnames\";\nimport * as marked from \"marked\";\nimport hljs from \"highlight.js\";\n\nimport \"highlight.js/styles/solarized-dark.css\";\n\nimport {\n  GITHUB_URL,\n  PACKAGE_NAMES,\n  PACKAGES_RECORD,\n  VERSION,\n} from \"./index\";\n\nfunction getLangauge(language: string) {\n  switch (language) {\n    case \"\":\n    case \"markup\":\n      return \"markdown\";\n    case \"tsx\":\n      return \"ts\";\n    default:\n      return language;\n  }\n}\n\nexport function highlightCode(code: string, lang: string = \"\") {\n  return hljs.highlight(getLangauge(lang), code).value;\n}\n\n/**\n * The custom markdown renderer. This just adds some additional styles to\n * existing elements, and does some fun stuff with code blocks.\n */\nconst renderer = new marked.Renderer();\n\nrenderer.code = (rawCode, language, escaped) => {\n  const code = highlightCode(rawCode, language);\n  const lines = (rawCode.match(/\\r?\\n/g) || []).length + 1;\n  let lineNumbers = \"\";\n  if (lines > 3 && !/markup/.test(language) && language) {\n    lineNumbers = Array.from(new Array(lines))\n      .map((_, i) => `<span class=\"code__line-number\">${i + 1}</span>`)\n      .join(\"\");\n    lineNumbers = `<span class=\"code__lines\">${lineNumbers}</span>`;\n  }\n\n  const className = cn(\"code code--block\", {\n    \"code--counted\": lineNumbers,\n  });\n  return `<pre class=\"${className}\">${lineNumbers}<code class=\"code\">${code}</code></pre>`;\n};\n\nrenderer.codespan = code => `<code class=\"code code--inline\">${code}</code>`;\n\nrenderer.heading = (text, level, raw, slugger) => {\n  const id = slugger.slug(text);\n  const className = cn(\n    `rmd-typography rmd-typography--headline-${level} heading`,\n    {\n      heading__toc: text.includes(\"Table of Contents\"),\n    }\n  );\n\n  return `<h${level} id=\"${id}\" class=\"${className}\">\n  <a href=\"#${id}\" class=\"heading__link\">#</a>\n  ${text}\n</h${level}>`;\n};\n\nrenderer.blockquote = quote =>\n  `<blockquote class=\"blockquote\">${quote}</blockquote>`;\n\nrenderer.link = (href, title, text) => {\n  title = title ? ` title=\"${title}\"` : \"\";\n\n  return `<a class=\"rmd-link\" href=\"${href}\"${title}>${text}</a>`;\n};\n\nrenderer.paragraph = (text: string) => `<p class=\"markdown__p\">${text}</p>`;\n\n// ///////////////////////////////////////////////////\n// MARKDOWN TRANSFORMATIONS\n\ntype Transform = (markdown: string) => string;\nconst joinedNames = PACKAGE_NAMES.join(\"|\");\nconst allNames = `${joinedNames}|react-md`;\nconst whitespace = \"(?=\\r?\\n| )\";\n\nconst getVersion = (name: string) => {\n  let version = VERSION;\n  if (name !== \"react-md\") {\n    const lookup = `@react-md/${name}`;\n    version = PACKAGES_RECORD[lookup] || VERSION;\n  }\n  return version;\n};\n\nconst transforms: Transform[] = [\n  // package-name@ -> package-name@version\n  md =>\n    md.replace(\n      new RegExp(`(${allNames})@`, \"g\"),\n      (_, lookup) => `${lookup}@${getVersion(lookup)}`\n    ),\n  // @package-name -> version\n  md =>\n    md.replace(new RegExp(`@(${allNames})${whitespace}`, \"g\"), (_, lookup) =>\n      getVersion(lookup)\n    ),\n  // #package-name -> [@react-md/package-name](/packages/package-name)\n  md =>\n    md.replace(\n      new RegExp(`#(${joinedNames})${whitespace}`, \"g\"),\n      \"[@react-md/$1](/packages/$1)\"\n    ),\n  // #package-name -> [package-name page](/packages/package-name/page)\n  md =>\n    md.replace(\n      new RegExp(`#(${joinedNames})\\/(demos|api|sassdoc)`, \"g\"),\n      \"[$1 $2](/packages/$1/$2)\"\n    ),\n  // #including-styles -> [including styles](/getting-started/installation#including-styles)\n  md =>\n    md.replace(\n      /#including-styles(?![)-])/g,\n      \"[including styles](/getting-started/installation#including-styles)\"\n    ),\n  // #defining-a-theme -> [defining a theme](/packages/theme/installation#defining-a-theme)\n  md =>\n    md.replace(\n      /#defining-a-theme/g,\n      \"[defining a theme](/packages/theme/installation#defining-a-theme)\"\n    ),\n  // create links to github issues/PRs with #ISSUE_NUMBER\n  // the regex below tries to make sure that hex codes aren't switched to links\n  md =>\n    md.replace(/(#)(\\d+)(?=\\r?\\n| (?!!))/g, `[$1$2](${GITHUB_URL}/issues/$2)`),\n  // create github commit links for git sha's of length 7 (should be first 7 of sha)\n  md => md.replace(/(\\b[0-9a-f]{7}\\b)/g, `[$1](${GITHUB_URL}/commit/$1)`),\n];\n\nconst transform = (markdown: string) =>\n  transforms.reduce((updated, fn) => fn(updated), markdown);\n\nexport function markdownToHTML(markdown: string) {\n  return marked.parse(transform(markdown), { renderer });\n}\n",
    "isBinary": false
  },
  "src/index.ts": {
    "content": "import rootPackageJson from \"../../../package.json\";\nimport packageJson from \"../package.json\";\n\nconst {\n  bugs: { url },\n  homepage,\n  version,\n} = rootPackageJson;\n\nexport const GITHUB_URL = url.replace(/\\/issues/, \"\");\nexport const GITHUB_FILE_URL = `${GITHUB_URL}/tree/next`;\nexport const GITHUB_DOC_PREFIX = `${GITHUB_FILE_URL}/packages/documentation`;\nexport const GITHUB_DEMO_URL = `${GITHUB_DOC_PREFIX}/components/Demos`;\nexport const HOMEPAGE = homepage;\nexport const VERSION = version;\n\nexport const PACKAGES = Object.entries(packageJson.dependencies)\n  .filter(([k]) => k.startsWith(\"@react-md\"))\n  .map(([name, version]) => ({\n    name,\n    version: version.replace(/([^0-9])+/, \"\"),\n  }));\n\ninterface PackagesRecord {\n  [key: string]: string;\n}\n\nexport const PACKAGES_RECORD: PackagesRecord = PACKAGES.reduce(\n  (obj, { name, version }) => ({\n    ...obj,\n    [name]: version,\n  }),\n  {}\n);\n\nexport const PACKAGE_NAMES = Object.keys(PACKAGES_RECORD).map(\n  name => `${name.substring(name.indexOf(\"/\") + 1)}`\n);\n\nexport const CODE_SANDBOX_DEFINE_API =\n  \"https://codesandbox.io/api/v1/sandboxes/define\";\n",
    "isBinary": false
  }
}
