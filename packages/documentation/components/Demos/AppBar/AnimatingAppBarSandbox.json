{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <title>AppBar Example - Animating App Bar</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { StatesConfig } from \"@react-md/states\";\n\nimport \"./styles.scss\";\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <StatesConfig>\n    <Demo />\n  </StatesConfig>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import '@react-md/app-bar/dist/mixins';\n@import '@react-md/avatar/dist/mixins';\n@import '@react-md/list/dist/mixins';\n@import '@react-md/theme/dist/mixins';\n@import '@react-md/states/dist/mixins';\n@import '@react-md/typography/dist/mixins';\n@import '@react-md/utils/dist/mixins';;\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": "AppBar Example - Animating App Bar",
      "description": "Example from https://react-md.dev/packages/app-bar/demos#animating-app-bar",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/app-bar": "next",
        "@react-md/avatar": "next",
        "@react-md/list": "next",
        "@react-md/material-icons": "next",
        "@react-md/theme": "next",
        "classnames": "latest",
        "react": "latest",
        "@react-md/states": "next",
        "@react-md/typography": "next",
        "@react-md/utils": "next",
        "react-dom": "latest"
      },
      "devDependencies": {
        "react-scripts": "latest",
        "node-sass": "latest",
        "typescript": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "@types/jest": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  ".env": {
    "content": "SASS_PATH=node_modules:src",
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "import React, {\n  FunctionComponent,\n  useState,\n  useCallback,\n  useRef,\n  useEffect,\n} from \"react\";\nimport cn from \"classnames\";\nimport {\n  AppBar,\n  AppBarTitle,\n  AppBarAction,\n  AppBarNav,\n} from \"@react-md/app-bar\";\nimport { Avatar } from \"@react-md/avatar\";\nimport avatarVariables from \"@react-md/avatar/dist/scssVariables\";\nimport { List, ListItem } from \"@react-md/list\";\nimport { MoreVertSVGIcon, MenuSVGIcon } from \"@react-md/material-icons\";\nimport { UpdateVariables } from \"@react-md/theme\";\n\nimport people from \"./people\";\nimport \"./animating-app-bar.scss\";\n\nconst COLORS = Object.keys(avatarVariables[\"rmd-avatar-colors\"]);\n\nconst transformedPeople = people.map((name, i) => ({\n  id: name.toLowerCase().replace(/ /g, \"-\"),\n  name,\n  avatar: name.substring(0, 1),\n  color: COLORS[i % COLORS.length],\n}));\n\nconst HEIGHT = 96;\n\n// this is used along with the current `scrollTop` value to make\n// the animation happen a bit slower. The number has no real significance\n// and just looked \"decent\"\nconst SCROLL_MULTIPLIER = 0.314;\n\nconst AnimatingAppBar: FunctionComponent = () => {\n  const [height, setHeight] = useState(`${HEIGHT}px`);\n  const ref = useRef(height);\n  useEffect(() => {\n    ref.current = height;\n  });\n\n  // could also throttle this for a _bit_ more performance\n  const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement>) => {\n    const height = ref.current;\n    const { scrollTop } = event.currentTarget;\n    const remaining = Math.min(\n      Math.max(HEIGHT - scrollTop * SCROLL_MULTIPLIER, 0),\n      HEIGHT\n    );\n    const nextHeight = `${remaining}px`;\n    if (height !== nextHeight) {\n      setHeight(nextHeight);\n    }\n  }, []);\n\n  return (\n    <UpdateVariables variables={[{ name: \"offset\", value: height }]}>\n      {({ style }) => (\n        <div style={style} className=\"animating-app-bar\">\n          <AppBar\n            id=\"animating-app-bar\"\n            className=\"animating-app-bar__bar\"\n            fixed\n            theme=\"clear\"\n          >\n            <AppBarNav id=\"animating-app-bar-nav\" aria-label=\"Navigation\">\n              <MenuSVGIcon />\n            </AppBarNav>\n            <AppBarTitle className=\"animating-app-bar__title\">\n              Animating App Bar\n            </AppBarTitle>\n            <AppBarAction\n              id=\"animating-app-bar-kebab\"\n              aria-label=\"Actions\"\n              first\n            >\n              <MoreVertSVGIcon />\n            </AppBarAction>\n          </AppBar>\n          <div className=\"animating-app-bar__content\" onScroll={handleScroll}>\n            <List>\n              {transformedPeople.map(({ id, name, avatar, color }, i) => (\n                <ListItem\n                  id={`person-${i}`}\n                  key={id}\n                  leftAvatar={<Avatar color={color}>{avatar}</Avatar>}\n                >\n                  {name}\n                </ListItem>\n              ))}\n            </List>\n          </div>\n        </div>\n      )}\n    </UpdateVariables>\n  );\n};\n\nexport default AnimatingAppBar;\n",
    "isBinary": false
  },
  "src/animating-app-bar.scss": {
    "content": "@import '@react-md/utils/dist/mixins';\n@import '@react-md/theme/dist/mixins';\n@import '@react-md/elevation/dist/mixins';\n@import '@react-md/button/dist/mixins';\n@import '@react-md/app-bar/dist/functions';\n@import '@react-md/app-bar/dist/mixins';\n\n.animating-app-bar {\n  @include rmd-elevation(6);\n  @include rmd-utils-block-centered;\n\n  max-width: 20rem;\n  position: relative;\n\n  &__bar {\n    @include rmd-button-theme-update-var(color, $rmd-white-base);\n    @include rmd-theme(color, $rmd-white-base);\n\n    // 20rem\n    $width: 20 * 16;\n    // app-bar-height (3.5rem) + 96 for custom offset\n    $height: (3.5 * 16) + 96;\n\n    background-image: url(https://picsum.photos/#{$width}/#{$height}?image=811);\n    height: calc(#{rmd-app-bar-theme-var(height)} + var(--offset));\n    padding-bottom: var(--offset);\n\n    // this is for the demo only since I don't want to move to\n    // a different page for this demo to have a fixed app bar.\n    // you wouldn't normally need to do this\n    position: absolute;\n  }\n\n  &__title {\n    transform: translateY(var(--offset));\n  }\n\n  &__content {\n    @include rmd-utils-scroll;\n\n    height: 35rem;\n    padding-top: calc(#{rmd-app-bar-theme-var(height)} + var(--offset));\n  }\n}\n",
    "isBinary": false
  },
  "src/people.ts": {
    "content": "const people: ReadonlyArray<string> = [\n  \"Jasmine Robinson\",\n  \"Devonte Craig\",\n  \"Dean Reid\",\n  \"Shaquille Bauer\",\n  \"Vivian Bishop\",\n  \"Braden Mullins\",\n  \"Katlyn Mcdonald\",\n  \"Isabella Marshall\",\n  \"Lee Christensen\",\n  \"Tommy Hogan\",\n  \"Timothy Harvey\",\n  \"Preston Phillips\",\n  \"Marco Sherman\",\n  \"Haley Coleman\",\n  \"Mario Swanson\",\n  \"Xavier Solis\",\n  \"Keaton Cannon\",\n  \"Cassandra Austin\",\n  \"Irene Holland\",\n  \"Gustavo Love\",\n  \"Meghan Stewart\",\n  \"Renee Townsend\",\n  \"Bobby Newman\",\n  \"Keaton Ortiz\",\n  \"Dustin Wells\",\n  \"Jerry Mcgee\",\n  \"Carl Howard\",\n  \"Sabrina Lang\",\n  \"Reed Baker\",\n  \"Kristen Fields\",\n  \"Gavin Carrillo\",\n  \"Claudia Neal\",\n  \"Leonard Schneider\",\n  \"Dominick Boyd\",\n  \"Mary Hampton\",\n  \"Mark Ayala\",\n  \"Kristina Warner\",\n  \"Antonio Walton\",\n  \"Tyson Scott\",\n  \"Harley Moss\",\n];\nexport default people;\n",
    "isBinary": false
  }
}
