{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <title>Portal Example - Simple Example</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { StatesConfig } from \"@react-md/states\";\n\nimport \"./styles.scss\";\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <StatesConfig>\n    <Demo />\n  </StatesConfig>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import '@react-md/button/dist/mixins';\n@import '@react-md/icon/dist/mixins';\n@import '@react-md/list/dist/mixins';\n@import '@react-md/overlay/dist/mixins';\n@import '@react-md/typography/dist/mixins';\n@import '@react-md/utils/dist/mixins';\n@import '@react-md/states/dist/mixins';\n@import '@react-md/theme/dist/mixins';;\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": "Portal Example - Simple Example",
      "description": "Example from https://react-md.dev/packages/portal/demos#simple-example",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/button": "next",
        "@react-md/icon": "next",
        "@react-md/list": "next",
        "@react-md/material-icons": "next",
        "@react-md/overlay": "next",
        "@react-md/typography": "next",
        "@react-md/utils": "next",
        "react": "latest",
        "@react-md/states": "next",
        "@react-md/theme": "next",
        "react-dom": "latest"
      },
      "devDependencies": {
        "react-scripts": "latest",
        "node-sass": "latest",
        "typescript": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "@types/jest": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  ".env": {
    "content": "SASS_PATH=node_modules:src",
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "import React, {\n  CSSProperties,\n  FunctionComponent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\";\nimport { Button } from \"@react-md/button\";\nimport { TextIconSpacing } from \"@react-md/icon\";\nimport { List, ListItem } from \"@react-md/list\";\nimport { ArrowDropDownSVGIcon } from \"@react-md/material-icons\";\nimport { Overlay } from \"@react-md/overlay\";\nimport { Text } from \"@react-md/typography\";\nimport { positionRelativeTo, useToggle } from \"@react-md/utils\";\n\nimport \"./simple-example.scss\";\n\nconst SimpleExample: FunctionComponent = () => {\n  const { toggled, toggle, disable } = useToggle();\n  const [style, setStyle] = useState<CSSProperties | undefined>();\n  const buttonRef = useRef<HTMLButtonElement | null>(null);\n  const listRef = useRef<HTMLUListElement | null>(null);\n  const listRefCB = useCallback((list: HTMLUListElement | null) => {\n    listRef.current = list;\n    const button = buttonRef.current;\n    if (!list || !button) {\n      return;\n    }\n\n    setStyle(positionRelativeTo(button, list));\n  }, []);\n\n  return (\n    <div className=\"portal-container\">\n      <Button\n        id=\"portal-button\"\n        theme=\"secondary\"\n        themeType=\"outline\"\n        aria-haspopup=\"true\"\n        aria-expanded={toggled}\n        onClick={toggle}\n        ref={buttonRef}\n      >\n        <TextIconSpacing icon={<ArrowDropDownSVGIcon />} iconAfter>\n          Options...\n        </TextIconSpacing>\n      </Button>\n      <Overlay\n        id=\"portal-menu-overlay\"\n        className=\"portal-menu-overlay\"\n        visible={toggled}\n        onRequestClose={disable}\n      >\n        <List\n          role=\"menu\"\n          id=\"portal-menu\"\n          aria-labelledby=\"portal-button\"\n          tabIndex={-1}\n          ref={listRefCB}\n          style={style}\n          className=\"portal-menu\"\n          onClick={event => {\n            if (event.currentTarget !== event.target) {\n              disable();\n            }\n          }}\n        >\n          {Array.from(new Array(6)).map((_, i) => (\n            <ListItem id={`menu-item-${i}`} key={i} role=\"menuitem\">\n              {`Option ${i + 1}`}\n            </ListItem>\n          ))}\n        </List>\n      </Overlay>\n      <Text>\n        In condimentum ultrices metus ut viverra. In faucibus erat eu massa\n        tincidunt finibus. Donec eget quam venenatis, venenatis arcu sed, mollis\n        tellus. Mauris massa nunc, condimentum quis nisi vel, fermentum\n        pellentesque est. Pellentesque varius rhoncus dui. Donec suscipit\n        gravida justo eu pharetra. Donec suscipit neque a orci bibendum, a\n        consectetur ipsum finibus. Aenean est ligula, aliquet ut nunc vitae,\n        volutpat pharetra tortor. Cras ipsum mi, posuere eu diam a, cursus\n        euismod mi. Ut vitae eros nibh.\n      </Text>\n    </div>\n  );\n};\n\nexport default SimpleExample;\n",
    "isBinary": false
  },
  "src/simple-example.scss": {
    "content": "@import '@react-md/elevation/dist/mixins';\n@import '@react-md/overlay/dist/variables';\n@import '@react-md/utils/dist/mixins';\n@import '@react-md/theme/dist/mixins';\n@import '@react-md/overlay/dist/mixins';\n\n.portal-container {\n  @include rmd-utils-scroll;\n\n  height: 10rem;\n  position: relative;\n}\n\n.portal-menu-overlay {\n  @include rmd-overlay-theme(background-color, transparent);\n}\n\n.portal-menu {\n  @include rmd-elevation(4);\n  @include rmd-theme(background-color, surface);\n\n  z-index: $rmd-overlay-z-index + 1;\n}\n",
    "isBinary": false
  }
}
