@import '../mixins';

@include react-md-utils;

@mixin theme-colors($light) {
  // sass-lint:disable no-duplicate-properties
  #{--code-bg}: #{if($light, $code-light-theme-bg, $code-dark-theme-bg)};
  #{--sass-bg}: #{if($light, $rmd-grey-200, rgba($rmd-black-base, 0.42))};
  #{--sass-border}: #{if($light, $rmd-grey-400, rgba($rmd-black-base, 0.87))};
}

@mixin all-theme-colors($light) {
  $type: if($light, light, dark);

  // The documentation website will default to using the prefers-color-scheme
  // media query for detecting light/dark theme but the user can still
  // manually set the light or dark theme themselves. Just using the
  // `.light-theme` or `.dark-theme` class won't work since `:root` has a
  // higher specificity than a single class so we can increase the specificity
  // by saying `.light-theme.light-theme` or `.dark-theme.dark-theme`
  $class-name: if($light, $rmd-theme-light-class, $rmd-theme-dark-class);

  #{$class-name + $class-name} {
    @include theme-colors($light);
  }

  @media (prefers-color-scheme: #{$type}) {
    :root {
      @include theme-colors($light);
    }
  }
}

@include all-theme-colors(true);
@include all-theme-colors(false);

.iframe {
  border: 0;
  border-radius: 0.25rem;
  height: 32rem;
  margin: 2rem auto;
  overflow: hidden;
  width: 100%;
}

.blockquote {
  $border-style: 0.25em solid rmd-divider-theme-var(background-color);

  @include rmd-theme(color, text-secondary-on-background);
  @include rmd-typography(subtitle-1);
  @include rmd-utils-rtl-auto(border-left, $border-style);

  font-style: italic;
  margin: 1em 0;
  padding: 0.5em 1em;
  position: relative;

  p:only-child {
    margin: 0;
  }

  p:last-child {
    margin-bottom: 0;
  }

  code {
    @include rmd-theme(color, text-primary-on-background);
  }
}

.heading {
  @include rmd-utils-phone-media {
    // decrease font size and line-height so it can fit on mobile screens. this
    // should match the size in Markdown.module.scss
    &.rmd-typography--headline-2 {
      @include rmd-typography-value(headline-4, font-size, line-height);
    }
  }

  @include rmd-utils-tablet-media {
    margin-left: -1em;
    padding-left: 1em;
  }

  position: relative;

  &:hover .heading__link {
    opacity: 1;
  }

  &--no-margin-top {
    margin-top: 0;
  }

  &__link {
    @include rmd-icon-theme(color);
    @include rmd-utils-hide-focus-outline;
    @include rmd-utils-desktop-media {
      display: block;
    }
    @include rmd-states-focus-shadow;

    &::before {
      @include rmd-states-surface-base;

      margin: -0.25rem;
    }

    display: none;
    left: 0;
    opacity: 0;
    position: absolute;
    text-decoration: none;
    transition: opacity $rmd-transition-standard-time;

    &:hover,
    &:focus {
      text-decoration: underline;
    }

    &:focus {
      opacity: 1;
    }
  }

  &__toc {
    margin-bottom: 0.25em;

    + ul {
      margin: 0;
      padding-bottom: 2em;

      p {
        margin: 0;
      }

      a,
      li {
        @include rmd-typography(headline-6);
      }
    }
  }
}

.code {
  @include rmd-typography(body-1);

  font-family: 'Source Code Pro', Consolas, Monaco, monospace;

  &::selection,
  *::selection {
    background-color: $solarized-base-02;
  }

  &--block {
    background-color: $solarized-base-03;
    color: $solarized-base-1;

    // always enforce ltr for blocked code
    direction: ltr;
    margin: 0.5em 0;
    overflow: auto;
    padding: 1em;

    // to help with the collapse transition on expandable code, update it so
    // that only the vertical overflow is hidden.
    &.rmd-collapse--no-overflow {
      overflow-y: hidden;
    }
  }

  &--inline {
    background-color: var(--code-bg);
    border-radius: 0.25rem;
    font-size: 0.9em;
    padding: 0.1em 0.4em;
    white-space: pre-wrap;
  }

  &--no-wrap {
    white-space: nowrap;
  }

  &--counted {
    padding-left: 3em;
    position: relative;
  }

  &__lines {
    border-right: 1px solid $solarized-base-01;
    display: flex;
    flex-direction: column;
    left: 0;
    padding-right: 0.25em;
    pointer-events: none;
    position: absolute;
    text-align: right;
    width: 2.5em;
  }
}

// prismjs custom theme
// this is _basically_ my current vim theme, but not aas good since
// Prism doesn't have as many tokenizers
.token {
  position: relative;
  z-index: 1;

  &.comment,
  &.doctype {
    color: $solarized-base-01;
  }

  &.keyword {
    color: $solarized-green;
  }

  &.punctuation {
    color: $solarized-base-01;
  }

  &.inserted,
  &.string,
  .language-tsx &.attr-value {
    color: $solarized-cyan;
  }

  &.tag,
  &.selector,
  &.class-name,
  // fixes mixins/functions
  .language-scss &.function,
  // fixes variables
  .language-scss &.variable {
    color: $solarized-blue;
  }

  &.attr-name,
  &.property,
  &.builtin {
    color: $solarized-yellow;
  }

  &.script,
  &.interpolation,
  // to fix interfaces
  .language-ts &.keyword + .class-name,
  .language-tsx &.keyword + .class-name {
    color: $solarized-base-1;
  }

  // fixes property colors
  .language-scss &.keyword,
  // for npm install
  .language-shell &.function {
    color: $solarized-orange;
  }

  &.deleted,
  &.boolean,
  &.number,
  &.interpolation-punctuation {
    color: $solarized-red;
  }

  &.important,
  &.bold {
    font-weight: map-get($rmd-typography-font-weights, bold);
  }

  &.italic {
    font-style: italic;
  }

  &.entity {
    cursor: help;
  }
}
