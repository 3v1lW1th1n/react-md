{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/react-md@next/dist/css/react-md.teal-pink-200-light.min.css\"\n    />\n    <title>Alert Example - Handling Duplicated Messages</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import 'variables';\n@import '~@react-md/alert/dist/mixins';\n@import '~@react-md/button/dist/mixins';\n@import '~@react-md/divider/dist/mixins';\n@import '~@react-md/form/dist/mixins';\n@import '~@react-md/layout/dist/mixins';\n@import '~@react-md/states/dist/mixins';\n@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/typography/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "src/_variables.scss": {
    "content": "@import '~@react-md/theme/dist/color-palette';\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": "Alert Example - Handling Duplicated Messages",
      "description": "Example from https://react-md.dev/packages/alert/demos#handling-duplicated-messages",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/alert": "next",
        "@react-md/button": "next",
        "@react-md/divider": "next",
        "@react-md/form": "next",
        "@react-md/layout": "next",
        "@react-md/material-icons": "next",
        "@react-md/states": "next",
        "@react-md/theme": "next",
        "@react-md/typography": "next",
        "@react-md/utils": "next",
        "classnames": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "import React, { FC, Fragment, ReactElement } from \"react\";\nimport {\n  DuplicateBehavior,\n  MessageQueue,\n  ToastMessage,\n  useAddMessage,\n} from \"@react-md/alert\";\nimport { Button } from \"@react-md/button\";\nimport { Divider } from \"@react-md/divider\";\nimport { Fieldset, Form, NativeSelect, Radio, useChoice } from \"@react-md/form\";\nimport { ArrowDropDownSVGIcon } from \"@react-md/material-icons\";\n\nimport Code from \"./Code\";\n\ninterface Props {\n  duplicates: DuplicateBehavior;\n  onDuplicateChange: React.ChangeEventHandler<HTMLInputElement>;\n}\n\nconst ONLINE = \"ONLINE\";\nconst OFFLINE = \"OFFLINE\";\nconst SOMETHING_HAPPENED = \"SOMETHING_HAPPENED\";\n\ntype MessageKeys = typeof ONLINE | typeof OFFLINE | typeof SOMETHING_HAPPENED;\n\nconst MESSAGES: Record<MessageKeys, ToastMessage> = {\n  [ONLINE]: {\n    messageId: ONLINE,\n    children: \"Internet connection restored.\",\n  },\n  [OFFLINE]: {\n    messageId: OFFLINE,\n    children: \"Internet connection lost.\",\n  },\n  [SOMETHING_HAPPENED]: {\n    messageId: SOMETHING_HAPPENED,\n    children: \"Something happened...\",\n  },\n};\n\nconst Demo: FC<Props> = ({\n  duplicates,\n  onDuplicateChange,\n}) => {\n  const addMessage = useAddMessage();\n  const [key, handleKeyChange] = useChoice<MessageKeys>(ONLINE);\n  return (\n    <Form onSubmit={() => addMessage(MESSAGES[key])}>\n      <Fieldset\n        legend={\n          <Fragment>\n            <Code>MessageQueue</Code>\n            {\" duplicate behavior\"}\n          </Fragment>\n        }\n      >\n        <Radio\n          id=\"mq-duplicates-1\"\n          name=\"duplicates\"\n          value=\"allow\"\n          label=\"Allow\"\n          checked={duplicates === \"allow\"}\n          onChange={onDuplicateChange}\n        />\n        <Radio\n          id=\"mq-duplicates-2\"\n          name=\"duplicates\"\n          value=\"prevent\"\n          label=\"Prevent\"\n          checked={duplicates === \"prevent\"}\n          onChange={onDuplicateChange}\n        />\n        <Radio\n          id=\"mq-duplicates-3\"\n          name=\"duplicates\"\n          value=\"restart\"\n          label=\"Restart\"\n          checked={duplicates === \"restart\"}\n          onChange={onDuplicateChange}\n        />\n      </Fieldset>\n      <NativeSelect\n        id=\"mq-duplicates-message\"\n        icon={<ArrowDropDownSVGIcon />}\n        label=\"Message\"\n        inline\n        style={{ margin: \"1rem 0\" }}\n        value={key}\n        onChange={handleKeyChange}\n      >\n        {Object.keys(MESSAGES).map(key => (\n          <option key={key} value={key}>\n            {MESSAGES[key as MessageKeys].children}\n          </option>\n        ))}\n      </NativeSelect>\n      <Divider />\n      <Button id=\"mq-duplicates-submit\" type=\"submit\" theme=\"primary\">\n        Add Message\n      </Button>\n    </Form>\n  );\n};\n\nexport default (): ReactElement => {\n  const [duplicates, onDuplicateChange] = useChoice<DuplicateBehavior>(\"allow\");\n\n  return (\n    <MessageQueue id=\"duplicate-message-queue\" duplicates={duplicates}>\n      <HandlingDuplicatedMessages\n        duplicates={duplicates}\n        onDuplicateChange={onDuplicateChange}\n      />\n    </MessageQueue>\n  );\n};\n",
    "isBinary": false
  },
  "src/Code/Code.tsx": {
    "content": "import React, { forwardRef, HTMLAttributes, ReactNode } from \"react\";\nimport cn from \"classnames\";\n\nexport interface CodeProps extends HTMLAttributes<HTMLElement> {\n  className?: string;\n  children: ReactNode;\n  inline?: boolean;\n}\n\nexport default forwardRef<HTMLElement, CodeProps>(function Code(\n  { inline = true, className, children, ...props },\n  ref\n) {\n  return (\n    <code\n      {...props}\n      ref={ref}\n      className={cn(\"code\", { \"code--inline\": inline }, className)}\n    >\n      {children}\n    </code>\n  );\n});\n",
    "isBinary": false
  },
  "src/Code/code.scss": {
    "content": "@import '../variables';\n@import '~@react-md/theme/dist/variables';\n@import '~@react-md/typography/dist/mixins';\n\n$code-light-theme-bg: $rmd-grey-200;\n$code-dark-theme-bg: #171717;\n$solarized-base-03: #002b36;\n$solarized-base-02: #073642;\n$solarized-base-01: #586e75;\n$solarized-base-00: #657b83;\n$solarized-base-0: #839496;\n$solarized-base-1: #93a1a1;\n$solarized-base-2: #eee8d5;\n$solarized-base-3: #fdf6e3;\n\n$solarized-yellow: #b58900;\n$solarized-orange: #cb4b16;\n$solarized-red: #d30102;\n$solarized-magenta: #d33682;\n$solarized-violet: #6c71c4;\n$solarized-blue: #268bd2;\n$solarized-cyan: #2aa198;\n$solarized-green: #859900;\n\n:root {\n  #{--code-bg}: #{$code-light-theme-bg};\n}\n\n.code {\n  @include rmd-typography(body-1);\n\n  font-family: 'Source Code Pro', Consolas, Monaco, monospace;\n\n  &::selection,\n  *::selection {\n    background-color: $solarized-base-02;\n  }\n\n  &--block {\n    background-color: $solarized-base-03;\n    color: $solarized-base-1;\n\n    // always enforce ltr for blocked code\n    direction: ltr;\n    margin: 0.5em 0;\n    overflow: auto;\n    padding: 1em;\n  }\n\n  &--inline {\n    background-color: var(--code-bg);\n    border-radius: 0.25rem;\n    font-size: 0.9em;\n    padding: 0.1em 0.4em;\n    white-space: pre-wrap;\n  }\n\n  &--counted {\n    padding-left: 3em;\n    position: relative;\n  }\n\n  &__lines {\n    border-right: 1px solid $solarized-base-01;\n    display: flex;\n    flex-direction: column;\n    left: 0;\n    padding-right: 0.25em;\n    pointer-events: none;\n    position: absolute;\n    text-align: right;\n    width: 2.5em;\n  }\n}\n\n// prismjs custom theme\n// this is _basically_ my current vim theme, but not aas good since\n// Prism doesn't have as many tokenizers\n.token {\n  position: relative;\n  z-index: 1;\n\n  &.comment,\n  &.doctype {\n    color: $solarized-base-01;\n  }\n\n  &.keyword {\n    color: $solarized-green;\n  }\n\n  &.punctuation {\n    color: $solarized-base-01;\n  }\n\n  &.inserted,\n  &.string,\n  .language-tsx &.attr-value {\n    color: $solarized-cyan;\n  }\n\n  &.tag,\n  &.selector,\n  &.class-name,\n  // fixes mixins/functions\n  .language-scss &.function,\n  // fixes variables\n  .language-scss &.variable {\n    color: $solarized-blue;\n  }\n\n  &.attr-name,\n  &.property,\n  &.builtin {\n    color: $solarized-yellow;\n  }\n\n  &.script,\n  &.interpolation,\n  // to fix interfaces\n  .language-ts &.keyword + .class-name,\n  .language-tsx &.keyword + .class-name {\n    color: $solarized-base-1;\n  }\n\n  // fixes property colors\n  .language-scss &.keyword,\n  // for npm install\n  .language-shell &.function {\n    color: $solarized-orange;\n  }\n\n  &.deleted,\n  &.boolean,\n  &.number,\n  &.interpolation-punctuation {\n    color: $solarized-red;\n  }\n\n  &.important,\n  &.bold {\n    font-weight: map-get($rmd-typography-font-weights, bold);\n  }\n\n  &.italic {\n    font-style: italic;\n  }\n\n  &.entity {\n    cursor: help;\n  }\n}\n",
    "isBinary": false
  },
  "src/Code/index.ts": {
    "content": "import \"./code.scss\";\nexport { default } from \"./Code\";\n",
    "isBinary": false
  }
}
