{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <title>Form Example - Select Example</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { StatesConfig, InteractionModeListener } from \"@react-md/states\";\n\nimport \"./styles.scss\";\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <InteractionModeListener>\n    <StatesConfig>\n      <Demo />\n    </StatesConfig>\n  </InteractionModeListener>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import 'variables';\n@import '~@react-md/form/dist/mixins';\n@import '~@react-md/states/dist/mixins';\n@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/typography/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "src/_variables.scss": {
    "content": "@import '~@react-md/theme/dist/color-palette';\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": "Form Example - Select Example",
      "description": "Example from https://react-md.dev/packages/form/demos#select-example",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/form": "next",
        "@react-md/material-icons": "next",
        "@react-md/states": "next",
        "@react-md/theme": "next",
        "@react-md/typography": "next",
        "@react-md/utils": "next",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  ".env": {
    "content": "SASS_PATH=node_modules:src\n",
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "import React, { FC, useState, useCallback } from \"react\";\nimport {\n  Select,\n  ListboxOption,\n  Checkbox,\n  Fieldset,\n  useCheckboxState,\n} from \"@react-md/form\";\n\nimport TextFieldThemeConfig from \"./TextFieldThemeConfig\";\n\nconst options = Array.from(new Array(8), (_, i) => `Option ${i + 1}`);\n\nconst Demo: FC = () => {\n  const [value, setValue] = useState(\"\");\n  const handleChange = useCallback(\n    (nextValue: string, _option: ListboxOption) => {\n      setValue(nextValue);\n    },\n    []\n  );\n  const [disableMovementChange, handleMovementChange] = useCheckboxState(false);\n\n  return (\n    <TextFieldThemeConfig\n      idPrefix=\"custom-select\"\n      disableRightIcon\n      renderField={({ rightChildren: _rightChildren, ...props }) => (\n        <Select\n          {...props}\n          id=\"custom-select-1\"\n          options={options}\n          value={value}\n          onChange={handleChange}\n          disableMovementChange={disableMovementChange}\n        />\n      )}\n    >\n      <Fieldset legend=\"Select options\" disableLegendSROnly>\n        <Checkbox\n          id=\"custom-select-disable-movement\"\n          label=\"Disable keyboard movement change\"\n          checked={disableMovementChange}\n          onChange={handleMovementChange}\n        />\n      </Fieldset>\n    </TextFieldThemeConfig>\n  );\n};\n\nexport default Demo;\n",
    "isBinary": false
  },
  "src/Checkbox.tsx": {
    "content": "import React, { FC, forwardRef } from \"react\";\nimport { Checkbox as CheckboxMD, CheckboxProps } from \"@react-md/form\";\nimport { CheckBoxSVGIcon } from \"@react-md/material-icons\";\nimport { WithForwardedRef } from \"@react-md/utils\";\n\nconst Checkbox: FC<CheckboxProps & WithForwardedRef<HTMLInputElement>> = ({\n  forwardedRef,\n  ...props\n}) => <CheckboxMD {...props} ref={forwardedRef} />;\n\nCheckbox.defaultProps = {\n  icon: <CheckBoxSVGIcon />,\n};\n\nexport default forwardRef<HTMLInputElement, CheckboxProps>((props, ref) => (\n  <Checkbox {...props} forwardedRef={ref} />\n));\n",
    "isBinary": false
  },
  "src/TextFieldThemeConfig.scss": {
    "content": ".text-field-theme-config {\n  display: flex;\n  flex-wrap: wrap;\n\n  fieldset {\n    margin: 1rem;\n  }\n\n  &__select {\n    margin: 1rem 0;\n  }\n\n  &__demo {\n    margin-top: 4rem;\n    width: 100%;\n  }\n}\n",
    "isBinary": false
  },
  "src/TextFieldThemeConfig.tsx": {
    "content": "import React, { FC, ReactNode } from \"react\";\nimport {\n  Fieldset,\n  Form,\n  TextFieldProps,\n  TextFieldTheme,\n  useCheckboxState,\n  useChoice,\n} from \"@react-md/form\";\nimport { FavoriteSVGIcon, LocationOnSVGIcon } from \"@react-md/material-icons\";\n\nimport Radio from \"components/Radio\";\nimport Checkbox from \"components/Checkbox\";\n\nimport \"./TextFieldThemeConfig.scss\";\n\nconst themes: TextFieldTheme[] = [\"none\", \"underline\", \"filled\", \"outline\"];\n\ntype Config = Pick<\n  TextFieldProps,\n  | \"leftChildren\"\n  | \"rightChildren\"\n  | \"dense\"\n  | \"label\"\n  | \"theme\"\n  | \"error\"\n  | \"inline\"\n  | \"placeholder\"\n  | \"readOnly\"\n  | \"disabled\"\n>;\n\nexport interface TextFieldThemeProps {\n  idPrefix: string;\n  renderField: (config: Config) => ReactNode;\n  children?: ReactNode;\n  disableDense?: boolean;\n  disableRightIcon?: boolean;\n}\n\n/**\n * This is a small higher-order-component that will provide the themeable props\n * to either a `TextField` or `TextArea` for the two configurable examples.\n */\nconst TextFieldThemeConfig: FC<TextFieldThemeProps> = ({\n  idPrefix,\n  children,\n  renderField,\n  disableDense,\n  disableRightIcon,\n}) => {\n  const [useLeft, handleLeftChange, setLeftIcon] = useCheckboxState(false);\n  const [useRight, handleRightChange, setRightIcon] = useCheckboxState(false);\n  const [dense, handleDenseChange, setDense] = useCheckboxState(false);\n  const [label, handleLabelChange, setLabel] = useCheckboxState(true);\n  const [inline, handleInlineChange] = useCheckboxState(false);\n  const [readOnly, handleReadOnlyChange, setReadOnly] = useCheckboxState(false);\n  const [error, handleErrorChange, setError] = useCheckboxState(false);\n  const [disabled, handleDisabledChange] = useCheckboxState(false);\n  const [currentTheme, handleThemeChange] = useChoice<TextFieldTheme>(\n    \"outline\",\n    event => {\n      // the \"unstyled\" state does not support icons and a label out of the box\n      // and requires additional styling instead\n      if (event.currentTarget.value === \"none\") {\n        setLeftIcon(false);\n        setRightIcon(false);\n        setLabel(false);\n      } else if (!label) {\n        setLabel(true);\n      }\n    }\n  );\n  const isUnstyled = currentTheme === \"none\";\n  if (disabled && error) {\n    setError(false);\n  }\n\n  if (disabled && readOnly) {\n    setReadOnly(false);\n  }\n\n  if (disableDense && dense) {\n    setDense(false);\n  }\n\n  if (disableRightIcon && useRight) {\n    setRightIcon(false);\n  }\n\n  return (\n    <Form className=\"text-field-theme-config\">\n      <Fieldset legend=\"Text field theme\" disableLegendSROnly>\n        {themes.map((theme, i) => (\n          <Radio\n            id={`${idPrefix}-theme-${i}`}\n            key={theme}\n            name=\"theme\"\n            onChange={handleThemeChange}\n            value={theme}\n            checked={currentTheme === theme}\n            label={theme}\n          />\n        ))}\n      </Fieldset>\n      <Fieldset legend=\"Text field options\" disableLegendSROnly>\n        <Checkbox\n          id={`${idPrefix}-left-icon`}\n          name=\"leftIcon\"\n          label=\"Use left icon\"\n          disabled={isUnstyled}\n          checked={useLeft}\n          onChange={handleLeftChange}\n        />\n        <Checkbox\n          id={`${idPrefix}-right-icon`}\n          name=\"rightIcon\"\n          label=\"Use right icon\"\n          disabled={isUnstyled || disableRightIcon}\n          checked={useRight}\n          onChange={handleRightChange}\n        />\n        <Checkbox\n          id={`${idPrefix}-dense`}\n          name=\"dense\"\n          label=\"Use dense spec\"\n          checked={dense}\n          disabled={disableDense}\n          onChange={handleDenseChange}\n        />\n        <Checkbox\n          id={`${idPrefix}-inline`}\n          name=\"inline\"\n          label=\"Display inline\"\n          checked={inline}\n          onChange={handleInlineChange}\n        />\n        <Checkbox\n          id={`${idPrefix}-label`}\n          name=\"label\"\n          label=\"Use label\"\n          disabled={isUnstyled}\n          checked={label}\n          onChange={handleLabelChange}\n        />\n        <Checkbox\n          id={`${idPrefix}-read-only`}\n          name=\"readOnly\"\n          label=\"Read Only\"\n          checked={readOnly}\n          disabled={disabled}\n          onChange={handleReadOnlyChange}\n        />\n        <Checkbox\n          id={`${idPrefix}-disabled`}\n          name=\"disabled\"\n          label=\"Disabled\"\n          checked={disabled}\n          onChange={handleDisabledChange}\n        />\n        <Checkbox\n          id={`${idPrefix}-error`}\n          name=\"error\"\n          label=\"Error\"\n          disabled={disabled}\n          checked={error}\n          onChange={handleErrorChange}\n        />\n      </Fieldset>\n      {children}\n      <div className=\"text-field-theme-config__demo\">\n        {renderField({\n          label: label && \"Label\",\n          placeholder: \"Placeholder\",\n          dense,\n          inline,\n          theme: currentTheme,\n          readOnly,\n          disabled,\n          error,\n          leftChildren: useLeft && <FavoriteSVGIcon />,\n          rightChildren: useRight && <LocationOnSVGIcon />,\n        })}\n      </div>\n    </Form>\n  );\n};\n\nexport default TextFieldThemeConfig;\n",
    "isBinary": false
  },
  "src/Radio.tsx": {
    "content": "import React, { FC, forwardRef } from \"react\";\nimport { Radio as RadioMD, RadioProps } from \"@react-md/form\";\nimport { RadioButtonCheckedSVGIcon } from \"@react-md/material-icons\";\nimport { WithForwardedRef } from \"@react-md/utils\";\n\nconst Radio: FC<RadioProps & WithForwardedRef<HTMLInputElement>> = ({\n  forwardedRef,\n  ...props\n}) => <RadioMD {...props} ref={forwardedRef} />;\n\nRadio.defaultProps = {\n  icon: <RadioButtonCheckedSVGIcon />,\n};\n\nexport default forwardRef<HTMLInputElement, RadioProps>((props, ref) => (\n  <Radio {...props} forwardedRef={ref} />\n));\n",
    "isBinary": false
  }
}
