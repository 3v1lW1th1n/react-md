{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/react-md@next/dist/css/react-md.teal-pink-200-light.min.css\"\n    />\n    <title>Transition Example - Collapse Examples</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import 'variables';\n@import '~@react-md/button/dist/mixins';\n@import '~@react-md/divider/dist/mixins';\n@import '~@react-md/layout/dist/mixins';\n@import '~@react-md/states/dist/mixins';\n@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/transition/dist/mixins';\n@import '~@react-md/typography/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "src/_variables.scss": {
    "content": "@import '~@react-md/theme/dist/color-palette';\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": "Transition Example - Collapse Examples",
      "description": "Example from https://react-md.dev/packages/transition/demos#collapse-examples",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/button": "next",
        "@react-md/divider": "next",
        "@react-md/layout": "next",
        "@react-md/states": "next",
        "@react-md/theme": "next",
        "@react-md/transition": "next",
        "@react-md/typography": "next",
        "@react-md/utils": "next",
        "classnames": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "/* eslint-disable react/sort-comp, react/no-multi-comp, react/destructuring-assignment, @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-function-return-type */\nimport React, { Component, forwardRef, Fragment } from \"react\";\nimport { Button } from \"@react-md/button\";\nimport { Divider } from \"@react-md/divider\";\nimport { Collapse } from \"@react-md/transition\";\nimport { Text, TextElement, TextProps } from \"@react-md/typography\";\n\n\n\n/**\n * Need to forward the ref on since function components can't have refs\n */\nconst Lorem = forwardRef<TextElement, TextProps>((props, ref) => (\n  <Text {...props} ref={ref}>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus a augue\n    venenatis, vulputate elit in, imperdiet metus. Sed egestas, ex vitae\n    sagittis rhoncus, lorem velit ornare neque, vitae imperdiet ligula magna\n    quis leo. Cras non auctor mauris. Duis consectetur rhoncus mi, sed cursus\n    lacus vestibulum ut. Ut in ligula magna. Sed auctor odio vitae leo euismod,\n    ut feugiat tortor cursus. Morbi quis dui faucibus, vestibulum lorem nec,\n    vulputate lacus. Quisque quis imperdiet nisl. Nullam ornare pharetra tempor.\n  </Text>\n));\n\nclass Broken extends Component<any> {\n  public render() {\n    return <Lorem ref={this.props.forwardedRef} />;\n  }\n}\n\nconst SomewhatBroken = forwardRef<any, any>((props, ref) => (\n  <Broken {...props} forwardedRef={ref} />\n));\n\ninterface State {\n  collapsed1: boolean;\n  collapsed2: boolean;\n  collapsed3: boolean;\n  collapsed4: boolean;\n  error: boolean;\n}\n\nexport default class CollapseExamples extends Component<any, State> {\n  public constructor(props: any) {\n    super(props);\n\n    this.state = {\n      collapsed1: true,\n      collapsed2: true,\n      collapsed3: true,\n      collapsed4: true,\n      error: false,\n    };\n  }\n\n  public componentDidCatch() {\n    this.setState({ error: true });\n  }\n\n  public render() {\n    const {\n      collapsed1,\n      collapsed2,\n      collapsed3,\n      collapsed4,\n      error,\n    } = this.state;\n\n    return (\n      <Fragment>\n        <Button id=\"collapse-toggle-1\" onClick={this.toggle1}>\n          Toggle\n        </Button>\n        <Collapse collapsed={collapsed1}>\n          <Lorem />\n        </Collapse>\n        <Divider />\n        <Button id=\"collapse-toggle-2\" onClick={this.toggle2}>\n          Toggle\n        </Button>\n        <Collapse collapsed={collapsed2}>\n          {transitionProps => <Lorem {...transitionProps} />}\n        </Collapse>\n        <Divider />\n        <Button\n          id=\"collapse-toggle-3\"\n          onClick={error ? this.fix : this.toggle3}\n          theme={error ? \"error\" : \"clear\"}\n        >\n          {error ? \"Fix\" : \"Toggle\"}\n        </Button>\n        <Text>\n          This example will crash since the <code>ref<code> isn&apos;t passed\n          on.\n        </Text>\n        {error ? (\n          \"Broken :(\"\n        ) : (\n          <Collapse collapsed={collapsed3}>\n            <Broken />\n          </Collapse>\n        )}\n        <Divider />\n        <Button id=\"collapse-toggle-4\" onClick={this.toggle4}>\n          Toggle\n        </Button>\n        <Text>\n          This example will not animate since the <code>style<code> and{\" \"}\n          <code>className<code> props aren&apos;t passed on.\n        </Text>\n        <Collapse collapsed={collapsed4}>\n          <SomewhatBroken />\n        </Collapse>\n      </Fragment>\n    );\n  }\n\n  private toggle1 = () => {\n    this.setState(({ collapsed1 }) => ({ collapsed1: !collapsed1 }));\n  };\n\n  private toggle2 = () => {\n    this.setState(({ collapsed2 }) => ({ collapsed2: !collapsed2 }));\n  };\n\n  private toggle3 = () => {\n    this.setState(({ collapsed3 }) => ({ collapsed3: !collapsed3 }));\n  };\n\n  private fix = () => {\n    this.setState({ collapsed3: true, error: false });\n  };\n\n  private toggle4 = () => {\n    this.setState(({ collapsed4 }) => ({ collapsed4: !collapsed4 }));\n  };\n}\n",
    "isBinary": false
  }
}
