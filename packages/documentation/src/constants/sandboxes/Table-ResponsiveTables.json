{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <title>Table Example - Responsive Tables</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { StatesConfig, InteractionModeListener } from \"@react-md/states\";\n\nimport \"./styles.scss\";\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <InteractionModeListener>\n    <StatesConfig>\n      <Demo />\n    </StatesConfig>\n  </InteractionModeListener>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import 'variables';\n@import '~@react-md/states/dist/mixins';\n@import '~@react-md/table/dist/mixins';\n@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/typography/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "src/_variables.scss": {
    "content": "@import '~@react-md/theme/dist/color-palette';\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": "Table Example - Responsive Tables",
      "description": "Example from https://react-md.dev/packages/table/demos#responsive-tables",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/states": "next",
        "@react-md/table": "next",
        "@react-md/theme": "next",
        "@react-md/typography": "next",
        "@react-md/utils": "next",
        "classnames": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  ".env": {
    "content": "SASS_PATH=node_modules:src\n",
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "import React, { FC, Fragment } from \"react\";\nimport {\n  TableContainer,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n} from \"@react-md/table\";\nimport { Text } from \"@react-md/typography\";\n\nimport desserts from \"./desserts\";\nimport Code from \"./Code\";\n\nconst list = desserts.slice(0, 4);\n\nconst Demo: FC = () => {\n  return (\n    <Fragment>\n      <Text type=\"headline-6\" margin=\"bottom\">\n        Default Table Container\n      </Text>\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableCell>Dessert (100g serving)</TableCell>\n              <TableCell align=\"right\">Calories</TableCell>\n              <TableCell align=\"right\">Fat (g)</TableCell>\n              <TableCell align=\"right\">Carbs (g)</TableCell>\n              <TableCell align=\"right\">Protein (g)</TableCell>\n              <TableCell align=\"right\">Sodium (mgg)</TableCell>\n              <TableCell align=\"right\">Calcium (mgg)</TableCell>\n              <TableCell align=\"right\">Iron (mgg)</TableCell>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {list.map(\n              ({\n                name,\n                calories,\n                fat,\n                carbs,\n                protein,\n                sodium,\n                calcium,\n                iron,\n              }) => (\n                <TableRow key={name} colSpan={2}>\n                  <TableCell>{name}</TableCell>\n                  <TableCell align=\"right\">{calories}</TableCell>\n                  <TableCell align=\"right\">{fat}</TableCell>\n                  <TableCell align=\"right\">{carbs}</TableCell>\n                  <TableCell align=\"right\">{protein}</TableCell>\n                  <TableCell align=\"right\">{sodium}</TableCell>\n                  <TableCell align=\"right\">{calcium}</TableCell>\n                  <TableCell align=\"right\">{iron}</TableCell>\n                </TableRow>\n              )\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Text type=\"headline-6\">\n        Applying <Code>fullWidth</Code>\n      </Text>\n      <TableContainer>\n        <Table fullWidth>\n          <TableHeader>\n            <TableRow>\n              <TableCell>Dessert (100g serving)</TableCell>\n              <TableCell align=\"right\">Calories</TableCell>\n              <TableCell align=\"right\">Fat (g)</TableCell>\n              <TableCell align=\"right\">Carbs (g)</TableCell>\n              <TableCell align=\"right\">Protein (g)</TableCell>\n              <TableCell align=\"right\">Sodium (mg)</TableCell>\n              <TableCell align=\"right\">Calcium (mg)</TableCell>\n              <TableCell align=\"right\">Iron (mg)</TableCell>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {list.map(\n              ({\n                name,\n                calories,\n                fat,\n                carbs,\n                protein,\n                sodium,\n                calcium,\n                iron,\n              }) => (\n                <TableRow key={name} colSpan={2}>\n                  <TableCell>{name}</TableCell>\n                  <TableCell align=\"right\">{protein}</TableCell>\n                  <TableCell align=\"right\">{calories}</TableCell>\n                  <TableCell align=\"right\">{fat}</TableCell>\n                  <TableCell align=\"right\">{carbs}</TableCell>\n                  <TableCell align=\"right\">{sodium}</TableCell>\n                  <TableCell align=\"right\">{calcium}</TableCell>\n                  <TableCell align=\"right\">{iron}</TableCell>\n                </TableRow>\n              )\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Text type=\"headline-6\">\n        Applying <Code>grow</Code>\n      </Text>\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableCell grow>Dessert (100g serving)</TableCell>\n              <TableCell align=\"right\">Calories</TableCell>\n              <TableCell align=\"right\">Fat (g)</TableCell>\n              <TableCell align=\"right\">Carbs (g)</TableCell>\n              <TableCell align=\"right\">Protein (g)</TableCell>\n              <TableCell align=\"right\">Sodium (mg)</TableCell>\n              <TableCell align=\"right\">Calcium (mg)</TableCell>\n              <TableCell align=\"right\">Iron (mg)</TableCell>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {list.map(\n              ({\n                name,\n                calories,\n                fat,\n                carbs,\n                protein,\n                sodium,\n                calcium,\n                iron,\n              }) => (\n                <TableRow key={name} colSpan={2}>\n                  <TableCell>{name}</TableCell>\n                  <TableCell align=\"right\">{calories}</TableCell>\n                  <TableCell align=\"right\">{fat}</TableCell>\n                  <TableCell align=\"right\">{carbs}</TableCell>\n                  <TableCell align=\"right\">{protein}</TableCell>\n                  <TableCell align=\"right\">{sodium}</TableCell>\n                  <TableCell align=\"right\">{calcium}</TableCell>\n                  <TableCell align=\"right\">{iron}</TableCell>\n                </TableRow>\n              )\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Fragment>\n  );\n};\n\nexport default Demo;\n",
    "isBinary": false
  },
  "src/Code/Code.tsx": {
    "content": "import React, { FC, forwardRef, HTMLAttributes, ReactNode } from \"react\";\nimport cn from \"classnames\";\nimport { WithForwardedRef } from \"@react-md/utils\";\n\nexport interface CodeProps extends HTMLAttributes<HTMLElement> {\n  className?: string;\n  children: ReactNode;\n  inline?: boolean;\n}\n\nconst Code: FC<CodeProps & WithForwardedRef<HTMLElement>> = ({\n  children,\n  inline,\n  className,\n  forwardedRef,\n  ...props\n}) => (\n  <code\n    {...props}\n    ref={forwardedRef}\n    className={cn(\"code\", { \"code--inline\": inline }, className)}\n  >\n    {children}\n  </code>\n);\n\nCode.defaultProps = {\n  inline: true,\n};\n\nexport default forwardRef<HTMLElement, CodeProps>((props, ref) => (\n  <Code {...props} forwardedRef={ref} />\n));\n",
    "isBinary": false
  },
  "src/Code/code.scss": {
    "content": "@import '../variables';\n@import '~@react-md/theme/dist/variables';\n@import '~@react-md/typography/dist/mixins';\n\n$code-light-theme-bg: $rmd-grey-200;\n$code-dark-theme-bg: #171717;\n$solarized-base-03: #002b36;\n$solarized-base-02: #073642;\n$solarized-base-01: #586e75;\n$solarized-base-00: #657b83;\n$solarized-base-0: #839496;\n$solarized-base-1: #93a1a1;\n$solarized-base-2: #eee8d5;\n$solarized-base-3: #fdf6e3;\n\n$solarized-yellow: #b58900;\n$solarized-orange: #cb4b16;\n$solarized-red: #d30102;\n$solarized-magenta: #d33682;\n$solarized-violet: #6c71c4;\n$solarized-blue: #268bd2;\n$solarized-cyan: #2aa198;\n$solarized-green: #859900;\n\n:root {\n  #{--code-bg}: #{$code-light-theme-bg};\n}\n\n.code {\n  @include rmd-typography(body-1);\n\n  font-family: 'Source Code Pro', Consolas, Monaco, monospace;\n\n  &::selection,\n  *::selection {\n    background-color: $solarized-base-02;\n  }\n\n  &--block {\n    background-color: $solarized-base-03;\n    color: $solarized-base-1;\n\n    // always enforce ltr for blocked code\n    direction: ltr;\n    margin: 0.5em 0;\n    overflow: auto;\n    padding: 1em;\n  }\n\n  &--inline {\n    background-color: var(--code-bg);\n    border-radius: 0.25rem;\n    font-size: 0.9em;\n    padding: 0.1em 0.4em;\n    white-space: pre-wrap;\n  }\n\n  &--counted {\n    padding-left: 3em;\n    position: relative;\n  }\n\n  &__lines {\n    border-right: 1px solid $solarized-base-01;\n    display: flex;\n    flex-direction: column;\n    left: 0;\n    padding-right: 0.25em;\n    pointer-events: none;\n    position: absolute;\n    text-align: right;\n    width: 2.5em;\n  }\n}\n\n// prismjs custom theme\n// this is _basically_ my current vim theme, but not aas good since\n// Prism doesn't have as many tokenizers\n.token {\n  position: relative;\n  z-index: 1;\n\n  &.comment,\n  &.doctype {\n    color: $solarized-base-01;\n  }\n\n  &.keyword {\n    color: $solarized-green;\n  }\n\n  &.punctuation {\n    color: $solarized-base-01;\n  }\n\n  &.inserted,\n  &.string,\n  .language-tsx &.attr-value {\n    color: $solarized-cyan;\n  }\n\n  &.tag,\n  &.selector,\n  &.class-name,\n  // fixes mixins/functions\n  .language-scss &.function,\n  // fixes variables\n  .language-scss &.variable {\n    color: $solarized-blue;\n  }\n\n  &.attr-name,\n  &.property,\n  &.builtin {\n    color: $solarized-yellow;\n  }\n\n  &.script,\n  &.interpolation,\n  // to fix interfaces\n  .language-ts &.keyword + .class-name,\n  .language-tsx &.keyword + .class-name {\n    color: $solarized-base-1;\n  }\n\n  // fixes property colors\n  .language-scss &.keyword,\n  // for npm install\n  .language-shell &.function {\n    color: $solarized-orange;\n  }\n\n  &.deleted,\n  &.boolean,\n  &.number,\n  &.interpolation-punctuation {\n    color: $solarized-red;\n  }\n\n  &.important,\n  &.bold {\n    font-weight: map-get($rmd-typography-font-weights, bold);\n  }\n\n  &.italic {\n    font-style: italic;\n  }\n\n  &.entity {\n    cursor: help;\n  }\n}\n",
    "isBinary": false
  },
  "src/Code/index.ts": {
    "content": "import \"./code.scss\";\nexport { default } from \"./Code\";\n",
    "isBinary": false
  },
  "src/desserts.ts": {
    "content": "export interface Dessert {\n  name: string;\n  calories: number;\n  fat: number;\n  carbs: number;\n  protein: number;\n  sodium: number;\n  calcium: number;\n  iron: number;\n  type: \"Ice cream\" | \"Pastry\" | \"Other\";\n}\n\nconst desserts: readonly Dessert[] = [\n  {\n    name: \"Frozen yogurt\",\n    type: \"Ice cream\",\n    calories: 159,\n    fat: 6.0,\n    carbs: 24,\n    protein: 4.0,\n    sodium: 87,\n    calcium: 14,\n    iron: 1,\n  },\n  {\n    name: \"Ice cream sandwhich\",\n    type: \"Ice cream\",\n    calories: 237,\n    fat: 9.0,\n    carbs: 37,\n    protein: 4.3,\n    sodium: 129,\n    calcium: 8,\n    iron: 1,\n  },\n  {\n    name: \"Eclair\",\n    type: \"Pastry\",\n    calories: 262,\n    fat: 16.0,\n    carbs: 37,\n    protein: 6.0,\n    sodium: 337,\n    calcium: 6,\n    iron: 7,\n  },\n  {\n    name: \"Cupcake\",\n    type: \"Pastry\",\n    calories: 305,\n    fat: 3.7,\n    carbs: 67,\n    protein: 4.3,\n    sodium: 413,\n    calcium: 3,\n    iron: 8,\n  },\n  {\n    name: \"Gingerbread\",\n    type: \"Pastry\",\n    calories: 356,\n    fat: 16.0,\n    carbs: 49,\n    protein: 3.9,\n    sodium: 327,\n    calcium: 7,\n    iron: 16,\n  },\n  {\n    name: \"Jelly bean\",\n    type: \"Other\",\n    calories: 375,\n    fat: 0.0,\n    carbs: 94,\n    protein: 0.0,\n    sodium: 50,\n    calcium: 0,\n    iron: 0,\n  },\n  {\n    name: \"Lollipop\",\n    type: \"Other\",\n    calories: 392,\n    fat: 0.2,\n    carbs: 98,\n    protein: 0.0,\n    sodium: 38,\n    calcium: 0,\n    iron: 2,\n  },\n  {\n    name: \"Honeycomb\",\n    type: \"Other\",\n    calories: 408,\n    fat: 3.2,\n    carbs: 87,\n    protein: 6.5,\n    sodium: 562,\n    calcium: 0,\n    iron: 45,\n  },\n  {\n    name: \"Donut\",\n    type: \"Pastry\",\n    calories: 52,\n    fat: 25.0,\n    carbs: 51,\n    protein: 4.9,\n    sodium: 326,\n    calcium: 2,\n    iron: 22,\n  },\n  {\n    name: \"KitKat\",\n    type: \"Other\",\n    calories: 16,\n    fat: 6.0,\n    carbs: 65,\n    protein: 7.0,\n    sodium: 54,\n    calcium: 12,\n    iron: 6,\n  },\n];\n\nexport default desserts;\n",
    "isBinary": false
  }
}
