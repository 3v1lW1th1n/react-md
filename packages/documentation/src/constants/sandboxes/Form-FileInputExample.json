{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/react-md@next/dist/css/react-md.teal-pink-200-light.min.css\"\n    />\n    <title>Form Example - File Input Example</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import 'variables';\n@import '~@react-md/button/dist/mixins';\n@import '~@react-md/divider/dist/mixins';\n@import '~@react-md/form/dist/mixins';\n@import '~@react-md/icon/dist/mixins';\n@import '~@react-md/layout/dist/mixins';\n@import '~@react-md/states/dist/mixins';\n@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/typography/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "src/_variables.scss": {
    "content": "@import '~@react-md/theme/dist/color-palette';\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": "Form Example - File Input Example",
      "description": "Example from https://react-md.dev/packages/form/demos#file-input-example",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/button": "next",
        "@react-md/divider": "next",
        "@react-md/form": "next",
        "@react-md/icon": "next",
        "@react-md/layout": "next",
        "@react-md/material-icons": "next",
        "@react-md/states": "next",
        "@react-md/theme": "next",
        "@react-md/typography": "next",
        "@react-md/utils": "next",
        "classnames": "latest",
        "marked": "latest",
        "package.json": "latest",
        "prismjs": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "import React, { FC, Fragment, useCallback, useState } from \"react\";\nimport { ButtonTheme, ButtonThemeType } from \"@react-md/button\";\nimport { Divider } from \"@react-md/divider\";\nimport {\n  Checkbox,\n  Fieldset,\n  FileInput,\n  Form,\n  Radio,\n  useCheckboxState,\n  useChoice,\n} from \"@react-md/form\";\nimport { SrOnly, Text } from \"@react-md/typography\";\n\nimport CodeBlock from \"./CodeBlock\";\n\nimport \"./FileInputExample.scss\";\n\nconst themes: ButtonTheme[] = [\n  \"primary\",\n  \"secondary\",\n  \"warning\",\n  \"error\",\n  \"clear\",\n];\nconst themeTypes: ButtonThemeType[] = [\"flat\", \"outline\", \"contained\"];\n\nconst SimpleFileInputs: FC = () => {\n  const [file, setFile] = useState(\"\");\n  const onChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>(\n    event => {\n      const [file] = Array.from(event.currentTarget.files || [null]);\n      if (file) {\n        setFile(file.name);\n      }\n    },\n    []\n  );\n\n  const [theme, handleThemeChange] = useChoice<ButtonTheme>(\"clear\");\n  const [themeType, handleTypeChange] = useChoice<ButtonThemeType>(\"flat\");\n  const [isIcon, handleIconChange] = useCheckboxState(false);\n\n  return (\n    <Fragment>\n      <Text type=\"subtitle-1\" margin=\"none\">\n        Last selected file:\n      </Text>\n      <CodeBlock aria-live=\"polite\">{file || \"None\"}</CodeBlock>\n      <Form className=\"file-input-example\">\n        <Fieldset legend=\"Theme\">\n          {themes.map(t => (\n            <Radio\n              id={`text-theme-${t}`}\n              key={t}\n              name=\"theme\"\n              onChange={handleThemeChange}\n              value={t}\n              checked={theme === t}\n              label={t}\n            />\n          ))}\n        </Fieldset>\n        <Fieldset legend=\"Theme type\">\n          {themeTypes.map(type => (\n            <Radio\n              id={`text-theme-${type}`}\n              key={type}\n              name=\"type\"\n              onChange={handleTypeChange}\n              value={type}\n              checked={themeType === type}\n              label={type}\n            />\n          ))}\n        </Fieldset>\n        <Checkbox\n          id=\"file-input-icon\"\n          label=\"Icon Button\"\n          name=\"iconButton\"\n          checked={isIcon}\n          onChange={handleIconChange}\n        />\n        <Divider />\n        <FileInput\n          id=\"configurable-file-input\"\n          onChange={onChange}\n          theme={theme}\n          themeType={themeType}\n          buttonType={isIcon ? \"icon\" : \"text\"}\n          disableIconSpacing={isIcon}\n        >\n          {/* the SrOnly for icon buttons is actually the defaultProp value for children */}\n          {isIcon ? <SrOnly>Upload</SrOnly> : \"Upload\"}\n        </FileInput>\n      </Form>\n    </Fragment>\n  );\n};\n\nexport default SimpleFileInputs;\n",
    "isBinary": false
  },
  "src/Code/Code.tsx": {
    "content": "import React, { FC, forwardRef, HTMLAttributes, ReactNode } from \"react\";\nimport cn from \"classnames\";\nimport { WithForwardedRef } from \"@react-md/utils\";\n\nexport interface CodeProps extends HTMLAttributes<HTMLElement> {\n  className?: string;\n  children: ReactNode;\n  inline?: boolean;\n}\n\nconst Code: FC<CodeProps & WithForwardedRef<HTMLElement>> = ({\n  children,\n  inline,\n  className,\n  forwardedRef,\n  ...props\n}) => (\n  <code\n    {...props}\n    ref={forwardedRef}\n    className={cn(\"code\", { \"code--inline\": inline }, className)}\n  >\n    {children}\n  </code>\n);\n\nCode.defaultProps = {\n  inline: true,\n};\n\nexport default forwardRef<HTMLElement, CodeProps>((props, ref) => (\n  <Code {...props} forwardedRef={ref} />\n));\n",
    "isBinary": false
  },
  "src/Code/CodeBlock.tsx": {
    "content": "/* eslint-disable react/no-danger */\nimport React, { forwardRef, FC, ReactNode, useMemo } from \"react\";\nimport cn from \"classnames\";\nimport { bem, WithForwardedRef } from \"@react-md/utils\";\n\nimport { highlightCode } from \"./utils\";\n\nimport Code from \"./Code\";\nimport LineNumbers from \"./LineNumbers\";\n\nexport interface CodeBlockProps {\n  className?: string;\n  language?: string;\n  children: ReactNode;\n  highlight?: boolean;\n  lineNumbers?: boolean;\n}\n\ntype WithRef = WithForwardedRef<HTMLPreElement>;\ntype DefaultProps = Required<\n  Pick<CodeBlockProps, \"language\" | \"highlight\" | \"lineNumbers\">\n>;\ntype WithDefaultProps = CodeBlockProps & DefaultProps & WithRef;\n\nconst block = bem(\"code\");\n\nconst CodeBlock: FC<CodeBlockProps & WithRef> = props => {\n  const {\n    className,\n    language,\n    children: propChildren,\n    highlight,\n    forwardedRef,\n    lineNumbers,\n  } = props as WithDefaultProps;\n\n  const children = useMemo(() => {\n    if (!highlight || typeof propChildren !== \"string\") {\n      return <Code inline={false}>{propChildren}</Code>;\n    }\n\n    return (\n      <code\n        className={block()}\n        dangerouslySetInnerHTML={{\n          __html: highlightCode(propChildren, language),\n        }}\n      />\n    );\n  }, [propChildren, highlight, language]);\n\n  return (\n    <pre\n      ref={forwardedRef}\n      className={cn(\n        block({ block: true, counted: lineNumbers }),\n        `language-${language}`,\n        className\n      )}\n    >\n      {typeof propChildren === \"string\" && (\n        <LineNumbers enabled={lineNumbers} code={propChildren} />\n      )}\n      {children}\n    </pre>\n  );\n};\n\nconst defaultProps: DefaultProps = {\n  highlight: true,\n  lineNumbers: false,\n  language: \"markdown\",\n};\n\nCodeBlock.defaultProps = defaultProps;\n\nexport default forwardRef<HTMLPreElement, CodeBlockProps>((props, ref) => (\n  <CodeBlock {...props} forwardedRef={ref} />\n));\n",
    "isBinary": false
  },
  "src/Code/LineNumbers.tsx": {
    "content": "/* eslint-disable react/no-array-index-key */\nimport React, { FC } from \"react\";\nimport { bem } from \"@react-md/utils\";\n\nexport interface LineNumbersProps {\n  code: string;\n  enabled: boolean;\n}\n\nconst block = bem(\"code\");\n\nconst LineNumbers: FC<LineNumbersProps> = ({ code, enabled }) => {\n  if (!enabled) {\n    return null;\n  }\n\n  const lines = (code.match(/\\r?\\n/g) || []).length;\n\n  return (\n    <span className={block(\"lines\")}>\n      {Array.from(new Array(lines)).map((_, i) => (\n        <span key={i} className={block(\"line-number\")}>\n          {i + 1}\n        </span>\n      ))}\n    </span>\n  );\n};\n\nexport default LineNumbers;\n",
    "isBinary": false
  },
  "src/Code/code.scss": {
    "content": "@import '../variables';\n@import '~@react-md/theme/dist/variables';\n@import '~@react-md/typography/dist/mixins';\n\n$code-light-theme-bg: $rmd-grey-200;\n$code-dark-theme-bg: #171717;\n$solarized-base-03: #002b36;\n$solarized-base-02: #073642;\n$solarized-base-01: #586e75;\n$solarized-base-00: #657b83;\n$solarized-base-0: #839496;\n$solarized-base-1: #93a1a1;\n$solarized-base-2: #eee8d5;\n$solarized-base-3: #fdf6e3;\n\n$solarized-yellow: #b58900;\n$solarized-orange: #cb4b16;\n$solarized-red: #d30102;\n$solarized-magenta: #d33682;\n$solarized-violet: #6c71c4;\n$solarized-blue: #268bd2;\n$solarized-cyan: #2aa198;\n$solarized-green: #859900;\n\n:root {\n  #{--code-bg}: #{$code-light-theme-bg};\n}\n\n.code {\n  @include rmd-typography(body-1);\n\n  font-family: 'Source Code Pro', Consolas, Monaco, monospace;\n\n  &::selection,\n  *::selection {\n    background-color: $solarized-base-02;\n  }\n\n  &--block {\n    background-color: $solarized-base-03;\n    color: $solarized-base-1;\n\n    // always enforce ltr for blocked code\n    direction: ltr;\n    margin: 0.5em 0;\n    overflow: auto;\n    padding: 1em;\n  }\n\n  &--inline {\n    background-color: var(--code-bg);\n    border-radius: 0.25rem;\n    font-size: 0.9em;\n    padding: 0.1em 0.4em;\n    white-space: pre-wrap;\n  }\n\n  &--counted {\n    padding-left: 3em;\n    position: relative;\n  }\n\n  &__lines {\n    border-right: 1px solid $solarized-base-01;\n    display: flex;\n    flex-direction: column;\n    left: 0;\n    padding-right: 0.25em;\n    pointer-events: none;\n    position: absolute;\n    text-align: right;\n    width: 2.5em;\n  }\n}\n\n// prismjs custom theme\n// this is _basically_ my current vim theme, but not aas good since\n// Prism doesn't have as many tokenizers\n.token {\n  position: relative;\n  z-index: 1;\n\n  &.comment,\n  &.doctype {\n    color: $solarized-base-01;\n  }\n\n  &.keyword {\n    color: $solarized-green;\n  }\n\n  &.punctuation {\n    color: $solarized-base-01;\n  }\n\n  &.inserted,\n  &.string,\n  .language-tsx &.attr-value {\n    color: $solarized-cyan;\n  }\n\n  &.tag,\n  &.selector,\n  &.class-name,\n  // fixes mixins/functions\n  .language-scss &.function,\n  // fixes variables\n  .language-scss &.variable {\n    color: $solarized-blue;\n  }\n\n  &.attr-name,\n  &.property,\n  &.builtin {\n    color: $solarized-yellow;\n  }\n\n  &.script,\n  &.interpolation,\n  // to fix interfaces\n  .language-ts &.keyword + .class-name,\n  .language-tsx &.keyword + .class-name {\n    color: $solarized-base-1;\n  }\n\n  // fixes property colors\n  .language-scss &.keyword,\n  // for npm install\n  .language-shell &.function {\n    color: $solarized-orange;\n  }\n\n  &.deleted,\n  &.boolean,\n  &.number,\n  &.interpolation-punctuation {\n    color: $solarized-red;\n  }\n\n  &.important,\n  &.bold {\n    font-weight: map-get($rmd-typography-font-weights, bold);\n  }\n\n  &.italic {\n    font-style: italic;\n  }\n\n  &.entity {\n    cursor: help;\n  }\n}\n",
    "isBinary": false
  },
  "src/Code/index.ts": {
    "content": "import \"./code.scss\";\nexport { default } from \"./Code\";\n",
    "isBinary": false
  },
  "src/FileInputExample.scss": {
    "content": ".file-input-example {\n  align-items: flex-start;\n  display: flex;\n  flex-wrap: wrap;\n\n  fieldset {\n    margin: 1rem;\n  }\n}\n",
    "isBinary": false
  },
  "src/Markdown/utils.ts": {
    "content": "import Prism from \"prismjs\";\nimport * as marked from \"marked\";\nimport cn from \"classnames\";\n\nimport { GITHUB_URL, PACKAGE_NAMES } from \"./index\";\nimport { DEMOABLE_PACKAGES } from \"./navItems\";\n\nexport function getLanguage(language: string): string {\n  switch (language) {\n    case \"\":\n    case \"markdown\":\n      return \"markup\";\n    case \"sh\":\n      return \"shell\";\n    default:\n      return language;\n  }\n}\n\nexport function highlightCode(code: string, lang: string = \"\"): string {\n  const language = getLanguage(lang);\n  try {\n    return Prism.highlight(code, Prism.languages[language], language);\n  } catch (e) {\n    if (process.env.NODE_ENV === \"development\") {\n      /* eslint-disable no-console */\n      console.error(\n        `Error trying to parse code with the following language: '${lang}' as '${language}'`\n      );\n      console.error(e);\n    }\n\n    return \"\";\n  }\n}\n\n/**\n * The custom markdown renderer. This just adds some additional styles to\n * existing elements, and does some fun stuff with code blocks.\n */\nconst renderer = new marked.Renderer();\n\nrenderer.code = (rawCode, language) => {\n  language = getLanguage(language || \"\");\n  const code = highlightCode(rawCode, language);\n  const lines = (rawCode.match(/\\r?\\n/g) || []).length + 1;\n  let lineNumbers = \"\";\n  if (lines > 3 && !/markup|shell/.test(language) && language) {\n    lineNumbers = Array.from(new Array(lines))\n      .map((_, i) => `<span class=\"code__line-number\">${i + 1}</span>`)\n      .join(\"\");\n    lineNumbers = `<span class=\"code__lines\">${lineNumbers}</span>`;\n  }\n\n  const className = cn(\n    \"code code--block\",\n    {\n      \"code--counted\": lineNumbers,\n    },\n    `language-${language}`\n  );\n  return `<pre class=\"${className}\">${lineNumbers}<code class=\"code\">${code}</code></pre>`;\n};\n\nrenderer.codespan = code => `<code class=\"code code--inline\">${code}</code>`;\n\nrenderer.heading = (text, level, _raw, slugger) => {\n  // if it is over 60 characters, it is probably not really a title\n  const isNoMargin = text.includes(\"<!-- no-margin -->\");\n  const isNoMarginBottom = text.includes(\"<!-- no-margin-bottom -->\");\n  const isForcedHeading = text.includes(\"<!-- force-heading -->\");\n  // replace comments since they will be slugged :/\n  text = text.replace(/<!-- ([A-z]+(-[A-z]+)*) -->/g, \"\");\n\n  const isValidHeading = isForcedHeading || (text.length <= 60 && !isNoMargin);\n  // `'t` gets slugged as 39t\n  const id = slugger.slug(text).replace(/39t/g, \"t\");\n  const className = cn(`rmd-typography rmd-typography--headline-${level}`, {\n    heading: isValidHeading,\n    // eslint-disable-next-line @typescript-eslint/camelcase\n    heading__toc: text.includes(\"Table of Contents\"),\n    \"rmd-typography--no-margin\": isNoMargin,\n    \"rmd-typography--no-margin-bottom\": isNoMarginBottom,\n  });\n\n  return `<h${level} id=\"${id}\" class=\"${className}\">\n  ${isValidHeading ? `<a href=\"#${id}\" class=\"heading__link\">#</a>` : \"\"}\n  ${text}\n</h${level}>`;\n};\n\nrenderer.blockquote = quote =>\n  `<blockquote class=\"blockquote\">${quote}</blockquote>`;\n\nrenderer.link = (href, title, text) => {\n  title = title ? ` title=\"${title}\"` : \"\";\n\n  return `<a class=\"rmd-link\" href=\"${href}\"${title}>${text}</a>`;\n};\n\nrenderer.paragraph = (text: string) => `<p class=\"markdown__p\">${text}</p>`;\n\n// ///////////////////////////////////////////////////\n// MARKDOWN TRANSFORMATIONS\n\ntype Transform = (markdown: string) => string;\nconst joinedNames = PACKAGE_NAMES.join(\"|\");\nconst packagesList = `\n${PACKAGE_NAMES.map(\n  name => `- [@react-md/${name}](/packages/${name}/installation)`\n).join(\"\\n\")}\n`;\nconst whitespace = \"(?=\\r?\\n| |[^/])\";\n\nconst transforms: Transform[] = [\n  // #package-name -> [@react-md/package-name](/packages/package-name/demos|installation)\n  md =>\n    md.replace(\n      new RegExp(`#(${joinedNames})${whitespace}`, \"g\"),\n      (_, pkg) =>\n        `[@react-md/${pkg}](/packages/${pkg}/${\n          DEMOABLE_PACKAGES.includes(pkg) ? \"demos\" : \"installation\"\n        })`\n    ),\n  // #package-name -> [package-name page](/packages/package-name/page)\n  md =>\n    md.replace(\n      new RegExp(`#(${joinedNames})/(demos|api|sassdoc)`, \"g\"),\n      \"[$1 $2](/packages/$1/$2)\"\n    ),\n  // #packages -> markdown list for all react-md packages\n  md =>\n    md.replace(/#packages(\\/demos)?/g, (_, demos) => {\n      if (demos) {\n        return packagesList.replace(\n          /^(?!layout)(.+)\\/installation/g,\n          \"$1/demos\"\n        );\n      }\n\n      return packagesList;\n    }),\n  // create links to github issues/PRs with #ISSUE_NUMBER\n  // the regex below tries to make sure that hex codes aren't switched to links\n  md =>\n    md.replace(\n      /(: )?(#)(\\d+)(?=\\r?\\n| (?!!))/g,\n      (match, invalid, _hash, ticket) => {\n        if (invalid) {\n          return match;\n        }\n\n        return `[#${ticket}](${GITHUB_URL}/issues/${ticket})`;\n      }\n    ),\n  // create github commit links for git sha's of length 7 (should be first 7 of sha)\n  md => md.replace(/(\\b[0-9a-f]{7}\\b)/g, `[$1](${GITHUB_URL}/commit/$1)`),\n  md => md.replace(/(:tada:)/g, \"🎉\"),\n  md =>\n    md.replace(\n      /#customizing-your-theme/g,\n      \"[customizing your theme](/guides/customizing-your-theme)\"\n    ),\n];\n\nrenderer.image = (href, title, alt) => {\n  return (\n    `<a href=\"${href}\">` +\n    '<div class=\"rmd-media-container rmd-media-container--auto\">' +\n    `<img src=\"${href}\" alt=\"${alt}\" title=\"${title || alt}\" />` +\n    \"</div>\" +\n    \"</a>\"\n  );\n};\n\nrenderer.list = (body, ordered) => {\n  const tag = ordered ? \"ol\" : \"ul\";\n  return `<${tag} class=\"markdown__list\">${body}</${tag}>`;\n};\n\nconst transform = (markdown: string): string =>\n  transforms.reduce((updated, fn) => fn(updated), markdown);\n\nexport function markdownToHTML(markdown: string): string {\n  return marked.parse(transform(markdown), { renderer });\n}\n",
    "isBinary": false
  },
  "src/index.ts": {
    "content": "import rootPackageJson from \"../../../../package.json\";\nimport packageJson from \"../../package.json\";\n\nconst {\n  bugs: { url },\n  homepage,\n  version,\n} = rootPackageJson;\n\nexport const GITHUB_URL = url.replace(/\\/issues/, \"\");\nexport const GITHUB_FILE_URL = `${GITHUB_URL}/tree/next`;\nexport const GITHUB_DOC_PREFIX = `${GITHUB_FILE_URL}/packages/documentation`;\nexport const GITHUB_DEMO_URL = `${GITHUB_DOC_PREFIX}/src/components/Demos`;\nexport const HOMEPAGE = homepage;\nexport const VERSION = version;\n\nexport const PACKAGES = Object.entries(packageJson.dependencies)\n  .filter(([k]) => k.startsWith(\"@react-md\"))\n  .map(([name, version]) => ({\n    name,\n    version: version.replace(/([^0-9])+/, \"\"),\n  }));\n\ninterface PackagesRecord {\n  [key: string]: string;\n}\n\nexport const PACKAGES_RECORD: PackagesRecord = PACKAGES.reduce(\n  (obj, { name, version }) => ({\n    ...obj,\n    [name]: version,\n  }),\n  {}\n);\n\nexport const PACKAGE_NAMES = Object.keys(PACKAGES_RECORD).map(\n  name => `${name.substring(name.indexOf(\"/\") + 1)}`\n);\n\nexport const CODE_SANDBOX_DEFINE_API =\n  \"https://codesandbox.io/api/v1/sandboxes/define\";\n\nexport const GA_CODE = process.env.GA_CODE || \"UA-76079335-2\";\nexport const GA_SRC = `https://www.googletagmanager.com/gtag/js?id=${GA_CODE}`;\n",
    "isBinary": false
  },
  "src/navItems.tsx": {
    "content": "import React, { ReactNode } from \"react\";\nimport {\n  HomeSVGIcon,\n  InfoOutlineSVGIcon,\n  DescriptionSVGIcon,\n  ColorLensSVGIcon,\n  BuildSVGIcon,\n} from \"@react-md/material-icons\";\nimport { LayoutNavigationTree } from \"@react-md/layout\";\n\nimport ReactSVGIcon from \"./ReactSVGIcon\";\nimport MaterialDesignSVGIcon from \"./MaterialDesignSVGIcon\";\nimport createIdGenerator from \"./createIdGenerator\";\nimport { toTitle } from \"./toTitle\";\n\nimport { PACKAGE_NAMES } from \".\";\n\ninterface Route {\n  href: string;\n  children: string;\n  leftIcon?: ReactNode;\n  routes?: NavItem[];\n}\n\ninterface Divider {\n  divider: true;\n  parentId?: string;\n}\n\ninterface Subheader {\n  subheader: true;\n  parentId?: string;\n  children: string;\n}\n\ntype NavItem = Route | Divider | Subheader;\n\nconst uuid = createIdGenerator(\"nav\");\n\nexport const APIABLE_PACKAGES = PACKAGE_NAMES.filter(\n  name => !/elevation/.test(name)\n);\nexport const DEMOABLE_PACKAGES = PACKAGE_NAMES.filter(\n  name => !/layout/.test(name)\n);\nexport const SASSDOCABLE_PACKAGES = PACKAGE_NAMES.filter(\n  name => !/material-icons/.test(name)\n);\n\nconst getPackageRoutes = (name: string): Route[] => {\n  const routes: Route[] = [];\n\n  if (DEMOABLE_PACKAGES.includes(name)) {\n    routes.push({\n      href: \"/demos\",\n      children: \"Demos\",\n    });\n  }\n\n  routes.push({\n    href: \"/installation\",\n    children: \"Installation\",\n  });\n\n  if (APIABLE_PACKAGES.includes(name)) {\n    routes.push({\n      href: \"/api\",\n      children: \"API\",\n    });\n  }\n\n  if (SASSDOCABLE_PACKAGES.includes(name)) {\n    routes.push({\n      href: \"/sassdoc\",\n      children: \"SassDoc\",\n    });\n  }\n\n  return routes;\n};\n\nconst routes: NavItem[] = [\n  {\n    href: \"/\",\n    children: \"Home\",\n    leftIcon: <HomeSVGIcon />,\n  },\n  {\n    href: \"/guides\",\n    children: \"Guides\",\n    leftIcon: <DescriptionSVGIcon />,\n    routes: [\n      {\n        href: \"/installation\",\n        children: \"Installation\",\n      },\n      {\n        href: \"/scoped-packages\",\n        children: \"Scoped Packages\",\n      },\n      {\n        href: \"/creating-a-new-app\",\n        children: \"Creating a New App\",\n      },\n      {\n        href: \"/configuring-your-layout\",\n        children: \"Configuring Your Layout\",\n      },\n      {\n        href: \"/customizing-your-theme\",\n        children: \"Customizing Your Theme\",\n      },\n      {\n        href: \"/including-styles-without-webpack\",\n        children: \"Including Styles without Webpack\",\n      },\n      {\n        href: \"/using-the-sass-exports\",\n        children: \"Using the Sass Exports\",\n      },\n      {\n        href: \"/advanced-installation\",\n        children: \"Advanced Installation\",\n      },\n      {\n        href: \"/working-with-v1\",\n        children: \"Working with v1\",\n      },\n      {\n        href: \"/contributing\",\n        children: \"Contributing\",\n      },\n    ],\n  },\n  {\n    href: \"/colors-and-theming\",\n    children: \"Colors and Theming\",\n    leftIcon: <ColorLensSVGIcon />,\n    routes: [\n      {\n        href: \"/color-palette\",\n        children: \"Color Palette\",\n      },\n      {\n        href: \"/theme-builder\",\n        children: \"Theme Builder\",\n      },\n      {\n        href: \"/overriding-defaults\",\n        children: \"Overriding Defaults\",\n      },\n      {\n        href: \"/creating-dynamic-themes\",\n        children: \"Creating Dynamic Themes\",\n      },\n    ],\n  },\n  {\n    href: \"/packages\",\n    children: \"Packages\",\n    leftIcon: <BuildSVGIcon />,\n    routes: PACKAGE_NAMES.map(name => ({\n      href: `/${name}`,\n      children: toTitle(name),\n      routes: getPackageRoutes(name),\n    })),\n  },\n  {\n    href: \"/about\",\n    children: \"About\",\n    leftIcon: <InfoOutlineSVGIcon />,\n  },\n  { divider: true },\n  { subheader: true, children: \"References\" },\n  {\n    href: \"https://reactjs.org\",\n    children: \"React\",\n    leftIcon: <ReactSVGIcon />,\n  },\n  {\n    href: \"https://material.io/design\",\n    children: \"Material Design\",\n    leftIcon: <MaterialDesignSVGIcon />,\n  },\n];\n\nconst isDivider = (navItem: NavItem): navItem is Divider =>\n  (navItem as Divider).divider === true;\n\nconst isSubheader = (navItem: NavItem): navItem is Subheader =>\n  (navItem as Subheader).subheader === true;\n\nfunction createNavItem(\n  tree: LayoutNavigationTree,\n  navItem: NavItem,\n  parentHref?: string\n): LayoutNavigationTree {\n  if (isDivider(navItem)) {\n    const itemId = uuid();\n    tree[itemId] = {\n      itemId,\n      parentId: navItem.parentId || parentHref || null,\n      divider: true,\n      isCustom: true,\n    };\n\n    return tree;\n  }\n\n  if (isSubheader(navItem)) {\n    const itemId = uuid();\n    tree[itemId] = {\n      itemId,\n      parentId: navItem.parentId || parentHref || null,\n      children: navItem.children,\n      subheader: true,\n      isCustom: true,\n    };\n\n    return tree;\n  }\n\n  if (!navItem.href.startsWith(\"/\")) {\n    const itemId = navItem.href;\n    tree[itemId] = {\n      ...navItem,\n      itemId,\n      parentId: parentHref || null,\n    };\n\n    return tree;\n  }\n\n  const { href: currentItemId, routes = [], ...item } = navItem;\n  const itemId = `${parentHref || \"\"}${currentItemId}`;\n  const lastSlashIndex = itemId.lastIndexOf(\"/\");\n\n  let as: string | undefined;\n  let href: string | undefined = itemId;\n  let parentId: string | null = null;\n  if (lastSlashIndex > 0) {\n    parentId = itemId.slice(0, lastSlashIndex);\n  }\n\n  // don't want to render as a link when there are child routes\n  if (routes.length) {\n    as = undefined;\n    href = undefined;\n  } else if (parentId && parentId.startsWith(\"/guides\")) {\n    as = itemId;\n    href = `${parentId}/[id]`;\n  } else if (\n    parentHref &&\n    itemId.startsWith(\"/packages\") &&\n    !itemId.endsWith(\"/demos\")\n  ) {\n    // section _should_ be api|demo|sassdoc|installation\n    const [, , section] = itemId.substring(1).split(\"/\");\n    as = href;\n    href = `/packages/[id]${section ? `/${section}` : \"\"}`;\n  }\n\n  tree[itemId] = {\n    ...item,\n    as,\n    href,\n    itemId,\n    parentId,\n  };\n\n  routes.forEach(childRoute => {\n    createNavItem(tree, childRoute, itemId);\n  });\n\n  return tree;\n}\n\nexport default routes.reduce<LayoutNavigationTree>(\n  (tree, route) => createNavItem(tree, route),\n  {}\n);\n",
    "isBinary": false
  },
  "src/MaterialDesignSVGIcon.tsx": {
    "content": "import React, { FC } from \"react\";\nimport cn from \"classnames\";\nimport { SVGIconProps } from \"@react-md/icon\";\nimport { Component as MaterialDesignLogo } from \"./materialDesignLogo.svg\";\n\nconst MaterialDesignSVGIcon: FC<SVGIconProps> = ({ className, ...props }) => (\n  <MaterialDesignLogo\n    {...props}\n    className={cn(\"rmd-icon rmd-icon--svg\", className)}\n  />\n);\n\nMaterialDesignSVGIcon.defaultProps = {\n  role: \"img\",\n  focusable: \"false\",\n};\n\nexport default MaterialDesignSVGIcon;\n",
    "isBinary": false
  },
  "src/ReactSVGIcon.scss": {
    "content": "@import '~@react-md/icon/dist/mixins';\n@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n// have to do some hacks since the logo is badly formatted with a lot of extra whitespace\n// around the icon\n.react-logo.react-logo {\n  $offset: 0.5rem;\n  $margin-right: calc(#{rmd-icon-theme-var(text-spacing)} + #{$offset});\n  $margin-left: -$offset;\n\n  @include rmd-icon-theme-update-var(size, 2.5rem);\n  @include rmd-utils-rtl-auto-group(\n    (\n      margin-left: $margin-left,\n      margin-right: $margin-right,\n    )\n  );\n\n  @include rmd-utils-desktop-media {\n    // no idea why margins don't need to be updated as well\n    @include rmd-icon-theme-update-var(size, 2.25rem);\n  }\n}\n",
    "isBinary": false
  },
  "src/ReactSVGIcon.tsx": {
    "content": "import React, { FC } from \"react\";\nimport cn from \"classnames\";\nimport { SVGIconProps } from \"@react-md/icon\";\nimport { Component as ReactLogo } from \"./reactLogo.svg\";\n\nimport \"./ReactSVGIcon.scss\";\n\nconst ReactSVGIcon: FC<SVGIconProps> = ({ className, ...props }) => (\n  <ReactLogo\n    {...props}\n    className={cn(\"rmd-icon rmd-icon--svg react-logo\", className)}\n  />\n);\n\nReactSVGIcon.defaultProps = {\n  role: \"img\",\n  focusable: \"false\",\n};\n\nexport default ReactSVGIcon;\n",
    "isBinary": false
  },
  "src/materialDesignLogo.svg": {
    "content": "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"12\" cy=\"12\" fill=\"#757575\" r=\"12\"/><path d=\"m3.6 3.6h16.8v16.8h-16.8z\" fill=\"#bdbdbd\"/><path d=\"m20.4 3.6-8.4 16.8-8.4-16.8z\" fill=\"#fff\"/><path d=\"m0 0h24v24h-24z\" fill=\"none\"/></svg>\n",
    "isBinary": false
  },
  "src/reactLogo.svg": {
    "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 841.9 595.3\">\n    <g fill=\"#61DAFB\">\n        <path d=\"M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z\"/>\n        <circle cx=\"420.9\" cy=\"296.5\" r=\"45.7\"/>\n        <path d=\"M520.5 78.1z\"/>\n    </g>\n</svg>\n",
    "isBinary": false
  },
  "src/createIdGenerator.ts": {
    "content": "/**\n * An extremely simplified uuid function that is scoped with a speciifc prefix. This\n * will just always increment the total count at the end of the prefix.\n *\n * ```ts\n * const uuid = createIdGenerator(\"my-custom-prefix\");\n *\n * uuid(); // my-custom-prefix-0\n * uuid(); // my-custom-prefix-1\n * uuid(); // my-custom-prefix-2\n * ```\n *\n * @param prefix The string prefix to use\n * @return a function to call to generate a \"uuid\"\n */\nexport default function createIdGenerator(prefix: string): () => string {\n  const generator = (function* idGenerator() {\n    let index = 0;\n    while (true) {\n      yield `${prefix}-${index}`;\n      index += 1;\n    }\n  })();\n\n  return () => generator.next().value;\n}\n",
    "isBinary": false
  },
  "src/toTitle.ts": {
    "content": "export function upperFirst(s: string): string {\n  return s.substring(0, 1).toUpperCase() + s.substring(1);\n}\n\nexport function toTitle(\n  s: string,\n  joinWith: string = \" \",\n  capitals: boolean = false\n): string {\n  if (/autocomplete/i.test(s)) {\n    return \"AutoComplete\";\n  }\n\n  if (s === \"[id]\") {\n    // TODO: Fix to use query params instead\n    return \"Layout\";\n  }\n\n  return s\n    .split(capitals ? /(?=[A-Z])/ : \"-\")\n    .map(upperFirst)\n    .join(joinWith);\n}\n\nexport function toBreadcrumbPageTitle(\n  pathname: string,\n  statusCode?: number\n): string {\n  let title = \"\";\n  if (statusCode) {\n    switch (statusCode) {\n      case 404:\n        title = \"Not Found\";\n        break;\n      default:\n        title = \"Server error\";\n    }\n  } else {\n    const parts = pathname.split(\"/\").filter(p => !!p && !/packages/.test(p));\n    title = parts.map(p => toTitle(p)).join(\" - \");\n  }\n\n  return `react-md@v2${title ? ` - ${title}` : \"\"}`;\n}\n\nexport function toGtagTitle(pathname: string, statusCode?: number): string {\n  let title = \"\";\n  if (statusCode) {\n    switch (statusCode) {\n      case 404:\n        title = \"Not Found\";\n        break;\n      default:\n        title = \"Server error\";\n    }\n  } else {\n    const parts = pathname.split(\"/\").filter(p => !!p && !/packages/.test(p));\n    const [last] = parts.reverse();\n    title = toTitle(last);\n  }\n\n  return title || \"homepage\";\n}\n\n/**\n * This is a utility function that will create a unique id for\n * a \"name\" string. The name string should be somewhere betwen\n * 5-20 characters.\n */\nexport function toId(name: string): string {\n  return name\n    .replace(/\\/|\\\\|\\[|]/g, \"\")\n    .split(/\\s|(?=[A-Z])/)\n    .join(\"-\")\n    .toLowerCase();\n}\n",
    "isBinary": false
  }
}
