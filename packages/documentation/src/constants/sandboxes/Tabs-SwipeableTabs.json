{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <title>. Example - Swipeable Tabs</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { StatesConfig, InteractionModeListener } from \"@react-md/states\";\n\nimport \"./styles.scss\";\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <InteractionModeListener>\n    <StatesConfig>\n      <Demo />\n    </StatesConfig>\n  </InteractionModeListener>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import 'variables';\n@import '~@react-md/states/dist/mixins';\n@import '~@react-md/tabs/dist/mixins';\n@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/typography/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "src/_variables.scss": {
    "content": "@import '~@react-md/theme/dist/color-palette';\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": ". Example - Swipeable Tabs",
      "description": "Example from https://react-md.dev/packages/./demos#swipeable-tabs",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/states": "next",
        "@react-md/tabs": "next",
        "@react-md/theme": "next",
        "@react-md/typography": "next",
        "@react-md/utils": "next",
        "react": "latest",
        "react-dom": "latest",
        "react-swipeable": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  ".env": {
    "content": "SASS_PATH=node_modules:src\n",
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "/* eslint-disable react/no-array-index-key */\nimport React, { FC } from \"react\";\nimport { TabPanels, Tabs, TabsManager } from \"@react-md/tabs\";\n\nimport SwipeablePanel from \"./SwipeablePanel\";\nimport useSwipeableIndexes from \"./useSwipeableIndexes\";\n\nconst tabs = [\"Tab One\", \"Tab Two\", \"Tab Three\", \"Tab Four\"];\n\nconst Demo: FC = () => {\n  const {\n    activeIndex,\n    distance,\n    handlers,\n    swiping,\n    onActiveIndexChange,\n  } = useSwipeableIndexes(tabs.length - 1);\n\n  return (\n    <TabsManager\n      tabs={tabs}\n      tabsId=\"swipeable-tabs\"\n      activeIndex={activeIndex}\n      onActiveIndexChange={onActiveIndexChange}\n    >\n      <Tabs />\n      <TabPanels persistent {...handlers} disableTransition={swiping}>\n        {tabs.map((_, i) => (\n          <SwipeablePanel\n            key={i}\n            index={i}\n            distance={distance}\n            activeIndex={activeIndex}\n            swiping={swiping}\n          />\n        ))}\n      </TabPanels>\n    </TabsManager>\n  );\n};\n\nexport default Demo;\n",
    "isBinary": false
  },
  "src/SwipeablePanel.tsx": {
    "content": "import React, { FC, CSSProperties } from \"react\";\nimport { TabPanel, TabPanelProps } from \"@react-md/tabs\";\nimport { Text } from \"@react-md/typography\";\n\ninterface SwipeablePanelProps extends TabPanelProps {\n  index: number;\n  activeIndex: number;\n  distance: string;\n  swiping: boolean;\n}\n\nfunction isStyleable(\n  index: number,\n  activeIndex: number,\n  distance: string\n): boolean {\n  if (!distance) {\n    return false;\n  }\n\n  const incrementor = distance.startsWith(\"-\") ? -1 : 1;\n\n  return index === activeIndex || index + incrementor === activeIndex;\n}\n\nconst SwipeablePanel: FC<SwipeablePanelProps> = ({\n  index,\n  activeIndex,\n  distance,\n  swiping,\n  ...props\n}) => {\n  let style: CSSProperties | undefined;\n  if (swiping && isStyleable(index, activeIndex, distance)) {\n    const transform = `translateX(${distance})`;\n    style = { transform, WebkitTransform: transform };\n  }\n\n  return (\n    <TabPanel {...props} style={style} hidden={index !== activeIndex && !style}>\n      <Text type=\"headline-4\">{`Content ${index + 1}`}</Text>\n    </TabPanel>\n  );\n};\n\nexport default SwipeablePanel;\n",
    "isBinary": false
  },
  "src/useSwipeableIndexes.ts": {
    "content": "import { EventData, useSwipeable, SwipeableHandlers } from \"react-swipeable\";\nimport { useReducer, useCallback, useEffect } from \"react\";\n\ninterface State {\n  activeIndex: number;\n  distance: string;\n  swiping: boolean;\n}\n\nconst CHANGE = \"CHANGE\";\nconst MOVE = \"MOVE\";\nconst JUMP = \"JUMP\";\nconst STOP_SWIPING = \"STOP_SWIPING\";\n\ninterface ChangeAction {\n  type: typeof CHANGE;\n  activeIndex: number;\n}\n\ninterface StopSwipingAction {\n  type: typeof STOP_SWIPING;\n}\n\ninterface MoveAction {\n  type: typeof MOVE;\n  data: EventData;\n  tabs: number;\n}\n\ninterface JumpAction {\n  type: typeof JUMP;\n  data: EventData;\n  tabs: number;\n}\n\ntype Action = ChangeAction | MoveAction | JumpAction | StopSwipingAction;\n\nconst isIncrementing = (data: EventData): boolean => data.dir === \"Left\";\n\nconst update = (state: State, nextState: State): State => {\n  if (\n    (Object.keys(state) as (keyof State)[]).some(\n      key => state[key] !== nextState[key]\n    )\n  ) {\n    return nextState;\n  }\n\n  return state;\n};\n\nfunction jump(state: State, data: EventData, tabs: number): State {\n  const { activeIndex, swiping } = state;\n  const incrementor = isIncrementing(data) ? 1 : -1;\n  const nextIndex = Math.max(0, Math.min(tabs, activeIndex + incrementor));\n\n  return update(state, {\n    swiping,\n    // swiping: false,\n    distance: \"\",\n    activeIndex: nextIndex,\n  });\n}\n\nfunction move(state: State, data: EventData, tabs: number): State {\n  let { deltaX } = data;\n  if (state.activeIndex === 0) {\n    deltaX = Math.max(-30, deltaX);\n  } else if (state.activeIndex === tabs) {\n    deltaX = Math.min(30, deltaX);\n  }\n\n  const distance = `${-deltaX}px`;\n\n  return update(state, {\n    ...state,\n    distance,\n    swiping: true,\n  });\n}\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case CHANGE:\n      return update(state, {\n        activeIndex: action.activeIndex,\n        distance: \"\",\n        swiping: false,\n      });\n    case STOP_SWIPING:\n      return update(state, {\n        ...state,\n        swiping: false,\n      });\n\n    case JUMP:\n      return jump(state, action.data, action.tabs);\n    case MOVE:\n      return move(state, action.data, action.tabs);\n    default:\n      return state;\n  }\n}\n\ninterface ReturnValue extends State {\n  onActiveIndexChange: (activeIndex: number) => void;\n  handlers: SwipeableHandlers;\n}\n\nexport default function useSwipeableIndexes(tabs: number): ReturnValue {\n  const [state, dispatch] = useReducer<typeof reducer>(reducer, {\n    activeIndex: 0,\n    distance: \"\",\n    swiping: false,\n  });\n\n  const { distance, swiping } = state;\n  useEffect(() => {\n    if (distance || !swiping) {\n      return;\n    }\n\n    const timeout = window.setTimeout(() => {\n      dispatch({ type: STOP_SWIPING });\n    }, 150);\n\n    return () => {\n      window.clearTimeout(timeout);\n    };\n  }, [distance, swiping]);\n\n  const move = useCallback(\n    (data: EventData) => {\n      const sel = window.getSelection();\n      if (sel) {\n        sel.removeAllRanges();\n      }\n      dispatch({ type: MOVE, data, tabs });\n    },\n    [tabs]\n  );\n\n  const jump = useCallback(\n    (data: EventData) => {\n      dispatch({ type: JUMP, data, tabs });\n    },\n    [tabs]\n  );\n\n  const change = useCallback((activeIndex: number) => {\n    dispatch({ type: CHANGE, activeIndex });\n  }, []);\n\n  const handlers = useSwipeable({\n    trackMouse: true,\n    onSwiping: move,\n    onSwipedLeft: jump,\n    onSwipedRight: jump,\n  });\n\n  return {\n    ...state,\n    handlers,\n    onActiveIndexChange: change,\n  };\n}\n",
    "isBinary": false
  }
}
