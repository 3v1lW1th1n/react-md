{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/react-md@next/dist/css/react-md.teal-pink-200-light.min.css\"\n    />\n    <title>Chip Example - Input Chips</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import 'variables';\n@import '~@react-md/autocomplete/dist/mixins';\n@import '~@react-md/avatar/dist/mixins';\n@import '~@react-md/chip/dist/mixins';\n@import '~@react-md/form/dist/mixins';\n@import '~@react-md/layout/dist/mixins';\n@import '~@react-md/states/dist/mixins';\n@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/typography/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "src/_variables.scss": {
    "content": "@import '~@react-md/theme/dist/color-palette';\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": "Chip Example - Input Chips",
      "description": "Example from https://react-md.dev/packages/chip/demos#input-chips",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/autocomplete": "next",
        "@react-md/avatar": "next",
        "@react-md/chip": "next",
        "@react-md/form": "next",
        "@react-md/layout": "next",
        "@react-md/material-icons": "next",
        "@react-md/states": "next",
        "@react-md/theme": "next",
        "@react-md/typography": "next",
        "@react-md/utils": "next",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "import React, { FC, useCallback, useRef, useState } from \"react\";\nimport {\n  AutoComplete,\n  AutoCompleteHandler,\n  isResultOf,\n} from \"@react-md/autocomplete\";\nimport { Avatar } from \"@react-md/avatar\";\nimport { Chip } from \"@react-md/chip\";\nimport { Label } from \"@react-md/form\";\nimport { AddCircleSVGIcon } from \"@react-md/material-icons\";\nimport { bem, PositionAnchor, useResizeObserver } from \"@react-md/utils\";\n\nimport people from \"./people\";\nimport createIdGenerator from \"./createIdGenerator\";\nimport \"./InputChips.scss\";\n\nconst styles = bem(\"input-chips\");\nconst guid = createIdGenerator(\"input-chips-contact\");\nconst anchor: PositionAnchor = {\n  x: \"inner-left\",\n  y: \"below\",\n};\n\ninterface Contact {\n  id: string;\n  name: string;\n  email: string;\n  avatar: string;\n}\n\nconst contacts = Array.from(people, (name, i) => ({\n  id: guid(),\n  name,\n  email: `${name.toLowerCase().replace(/\\s|-/g, \"\")}@email.com`,\n  avatar: `https://i.pravatar.cc/40?img=${i}`,\n})).reduce<Record<string, Contact>>((lookup, contact) => {\n  lookup[contact.id] = contact;\n  return lookup;\n}, {});\n\nconst data = Object.values(contacts).map(({ id, name, email, avatar }) => ({\n  id,\n  label: name,\n  leftAvatar: <Avatar src={avatar} />,\n  secondaryText: email,\n}));\n\nconst Demo: FC = () => {\n  const [chips, setChips] = useState<Contact[]>([]);\n\n  const onAutoComplete = useCallback<AutoCompleteHandler>(result => {\n    if (!isResultOf<typeof data[0]>(result.result)) {\n      throw new Error();\n    }\n    const { id } = result.result;\n    const contact = contacts[id];\n    if (!contact) {\n      throw new Error();\n    }\n\n    setChips(prevChips => [...prevChips, contact]);\n  }, []);\n\n  const [stacked, setStacked] = useState(false);\n  const gridRef = useRef<HTMLDivElement | null>(null);\n  useResizeObserver({\n    target: gridRef.current,\n    onResize({ height }) {\n      setStacked(height > 48);\n    },\n    disableWidth: true,\n  });\n\n  return (\n    <div className={styles()}>\n      <Label\n        htmlFor=\"input-chips-email\"\n        className={styles(\"label\", { chipped: chips.length > 0, stacked })}\n      >\n        To\n      </Label>\n      <div className={styles(\"grid\", { stacked })} ref={gridRef}>\n        {chips.map(({ id, name, avatar }) => (\n          <Chip\n            key={id}\n            leftIcon={<Avatar src={avatar} />}\n            rightIcon={<AddCircleSVGIcon className={styles(\"remove\")} />}\n            className={styles(\"chip\")}\n            onClick={() =>\n              setChips(prevChips => prevChips.filter(chip => chip.id !== id))\n            }\n          >\n            {name}\n          </Chip>\n        ))}\n        <AutoComplete\n          id=\"input-chips-email\"\n          placeholder=\"something.@email.com\"\n          theme=\"none\"\n          valueKey=\"label\"\n          data={data.filter(({ id }) => !chips.find(chip => chip.id === id))}\n          listboxWidth=\"auto\"\n          anchor={anchor}\n          className={styles(\"field\")}\n          inline\n          highlight\n          clearOnAutoComplete\n          onAutoComplete={onAutoComplete}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Demo;\n",
    "isBinary": false
  },
  "src/InputChips.scss": {
    "content": "$spacing: 0.5rem;\n\n.input-chips {\n  align-items: flex-start;\n  display: flex;\n\n  &__label {\n    margin-right: $spacing;\n    margin-top: 0.725rem;\n\n    &--chipped {\n      margin-top: 0.75rem;\n    }\n\n    &--stacked {\n      margin-top: $spacing / 2;\n    }\n  }\n\n  &__chip {\n    margin-bottom: var(--mb, 0);\n    margin-right: $spacing;\n  }\n\n  &__remove {\n    transform: rotate(45deg);\n  }\n\n  &__field {\n    flex-grow: 1;\n    min-width: 10rem;\n  }\n\n  &__grid {\n    align-items: center;\n    display: flex;\n    flex-wrap: wrap;\n\n    &--stacked {\n      #{--mb}: #{$spacing};\n    }\n  }\n}\n",
    "isBinary": false
  },
  "src/people.ts": {
    "content": "export default [\n  \"Jasmine Robinson\",\n  \"Devonte Craig\",\n  \"Dean Reid\",\n  \"Shaquille Bauer\",\n  \"Vivian Bishop\",\n  \"Braden Mullins\",\n  \"Katlyn Mcdonald\",\n  \"Isabella Marshall\",\n  \"Lee Christensen\",\n  \"Tommy Hogan\",\n  \"Timothy Harvey\",\n  \"Preston Phillips\",\n  \"Marco Sherman\",\n  \"Haley Coleman\",\n  \"Mario Swanson\",\n  \"Xavier Solis\",\n  \"Keaton Cannon\",\n  \"Cassandra Austin\",\n  \"Irene Holland\",\n  \"Gustavo Love\",\n  \"Meghan Stewart\",\n  \"Renee Townsend\",\n  \"Bobby Newman\",\n  \"Keaton Ortiz\",\n  \"Dustin Wells\",\n  \"Jerry Mcgee\",\n  \"Carl Howard\",\n  \"Sabrina Lang\",\n  \"Reed Baker\",\n  \"Kristen Fields\",\n  \"Gavin Carrillo\",\n  \"Claudia Neal\",\n  \"Leonard Schneider\",\n  \"Dominick Boyd\",\n  \"Mary Hampton\",\n  \"Mark Ayala\",\n  \"Kristina Warner\",\n  \"Antonio Walton\",\n  \"Tyson Scott\",\n  \"Harley Moss\",\n] as const;\n",
    "isBinary": false
  },
  "src/createIdGenerator.ts": {
    "content": "/**\n * An extremely simplified uuid function that is scoped with a speciifc prefix. This\n * will just always increment the total count at the end of the prefix.\n *\n * ```ts\n * const uuid = createIdGenerator(\"my-custom-prefix\");\n *\n * uuid(); // my-custom-prefix-0\n * uuid(); // my-custom-prefix-1\n * uuid(); // my-custom-prefix-2\n * ```\n *\n * @param prefix The string prefix to use\n * @return a function to call to generate a \"uuid\"\n */\nexport default function createIdGenerator(prefix: string): () => string {\n  const generator = (function* idGenerator() {\n    let index = 0;\n    while (true) {\n      yield `${prefix}-${index}`;\n      index += 1;\n    }\n  })();\n\n  return () => generator.next().value;\n}\n",
    "isBinary": false
  }
}
