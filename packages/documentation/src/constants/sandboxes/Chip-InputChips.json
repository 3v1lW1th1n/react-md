{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/react-md@next/dist/css/react-md.teal-pink-200-light.min.css\"\n    />\n    <title>Chip Example - Input Chips</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import 'variables';\n@import '~@react-md/app-bar/dist/mixins';\n@import '~@react-md/autocomplete/dist/mixins';\n@import '~@react-md/avatar/dist/mixins';\n@import '~@react-md/button/dist/mixins';\n@import '~@react-md/chip/dist/mixins';\n@import '~@react-md/dialog/dist/mixins';\n@import '~@react-md/divider/dist/mixins';\n@import '~@react-md/elevation/dist/mixins';\n@import '~@react-md/form/dist/mixins';\n@import '~@react-md/icon/dist/mixins';\n@import '~@react-md/layout/dist/mixins';\n@import '~@react-md/sheet/dist/mixins';\n@import '~@react-md/states/dist/mixins';\n@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/tooltip/dist/mixins';\n@import '~@react-md/typography/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "src/_variables.scss": {
    "content": "@import '~@react-md/theme/dist/color-palette';\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": "Chip Example - Input Chips",
      "description": "Example from https://react-md.dev/packages/chip/demos#input-chips",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/app-bar": "next",
        "@react-md/autocomplete": "next",
        "@react-md/avatar": "next",
        "@react-md/button": "next",
        "@react-md/chip": "next",
        "@react-md/dialog": "next",
        "@react-md/divider": "next",
        "@react-md/elevation": "next",
        "@react-md/form": "next",
        "@react-md/icon": "next",
        "@react-md/layout": "next",
        "@react-md/material-icons": "next",
        "@react-md/sheet": "next",
        "@react-md/states": "next",
        "@react-md/theme": "next",
        "@react-md/tooltip": "next",
        "@react-md/typography": "next",
        "@react-md/utils": "next",
        "classnames": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { Divider } from \"@react-md/divider\";\nimport { TextArea, TextField } from \"@react-md/form\";\nimport { useIsUserInteractionMode } from \"@react-md/utils\";\n\nimport Phone from \"./Phone\";\n\nimport styles from \"./styles\";\nimport To from \"./To\";\n\nconst Demo: FC = () => {\n  const isTouch = useIsUserInteractionMode(\"touch\");\n  return (\n    <Phone\n      id=\"input-chips\"\n      statusBar\n      contentClassName={styles()}\n      disableFocusOnMount={isTouch}\n    >\n      <To isTouch={isTouch} />\n      <Divider />\n      <TextField\n        id=\"input-chips-subject\"\n        name=\"subject\"\n        theme=\"none\"\n        inputClassName={styles(\"subject\")}\n        placeholder=\"Subject\"\n        defaultValue=\"Re: Vacation Request\"\n      />\n      <Divider />\n      <TextArea\n        id=\"input-chips-message\"\n        placeholder=\"Message\"\n        theme=\"none\"\n        className={styles(\"message\")}\n        areaClassName={styles(\"message-area\")}\n        resize=\"none\"\n      />\n    </Phone>\n  );\n};\n\nexport default Demo;\n",
    "isBinary": false
  },
  "src/AppBarTitle.tsx": {
    "content": "import React, { FC, useRef, useState, ReactNode, useMemo } from \"react\";\nimport {\n  AppBarTitle as RMDAppBarTitle,\n  AppBarTitleProps,\n} from \"@react-md/app-bar\";\nimport { Tooltipped } from \"@react-md/tooltip\";\nimport { useResizeObserver } from \"@react-md/utils\";\nimport createIdGenerator from \"./createIdGenerator\";\n\nconst hackyIds = createIdGenerator(\"dynamic-tooltips\");\n\n/**\n * This component is a wrapper for the AppBarTitle component from @react-md/app-bar\n * that will automatically update the title to show a tooltip if the title becomes\n * truncated.\n *\n * This is pretty hacky right so it isn't part of the main lib yet, but a better\n * sultion to \"auto tooltip\" things might be added one day.\n */\nconst AppBarTitle: FC<AppBarTitleProps> = ({\n  id: propId,\n  children,\n  ...props\n}) => {\n  const [tooltip, setTooltip] = useState<ReactNode>(null);\n  const ref = useRef<HTMLHeadingElement | null>(null);\n  useResizeObserver({\n    disableHeight: true,\n    onResize() {\n      if (!ref.current) {\n        return;\n      }\n\n      const isTruncated = ref.current.offsetWidth < ref.current.scrollWidth;\n      if (isTruncated && !tooltip) {\n        setTooltip(children);\n      } else if (!isTruncated && tooltip) {\n        setTooltip(null);\n      }\n    },\n    target: ref,\n  });\n\n  const id = useMemo(() => {\n    if (propId) {\n      return propId;\n    }\n\n    return hackyIds();\n  }, [propId]);\n\n  return (\n    <Tooltipped id={id} tooltip={tooltip}>\n      <RMDAppBarTitle {...props} ref={ref} tabIndex={tooltip ? 0 : undefined}>\n        {children}\n      </RMDAppBarTitle>\n    </Tooltipped>\n  );\n};\n\nexport default AppBarTitle;\n",
    "isBinary": false
  },
  "src/ConditionalFullPageDialog.tsx": {
    "content": "import React, { FC, ReactElement, ReactNode } from \"react\";\nimport { AppBar, AppBarAction } from \"@react-md/app-bar\";\nimport { Button } from \"@react-md/button\";\nimport { Dialog, DialogContent } from \"@react-md/dialog\";\nimport { TextIconSpacing } from \"@react-md/icon\";\nimport { CloseSVGIcon, LaunchSVGIcon } from \"@react-md/material-icons\";\nimport { Text } from \"@react-md/typography\";\n\nimport AppBarTitle from \"./AppBarTitle\";\n\nexport interface ConditionalFullPageDialogProps {\n  id: string;\n  title?: ReactNode;\n  children: ReactElement;\n  enable: () => void;\n  disable: () => void;\n  visible: boolean;\n  disabled?: boolean;\n  disableAppBar?: boolean;\n  disableContent?: boolean;\n  disableFocusOnMount?: boolean;\n}\n\ntype DefaultProps = Required<\n  Pick<\n    ConditionalFullPageDialogProps,\n    | \"title\"\n    | \"disabled\"\n    | \"disableAppBar\"\n    | \"disableContent\"\n    | \"disableFocusOnMount\"\n  >\n>;\ntype WithDefaultProps = ConditionalFullPageDialogProps & DefaultProps;\n\nconst ConditionalFullPageDialog: FC<ConditionalFullPageDialogProps> = (\n  providedProps\n) => {\n  const {\n    id,\n    title,\n    children,\n    enable,\n    disable,\n    visible,\n    disabled,\n    disableAppBar,\n    disableContent,\n    disableFocusOnMount,\n  } = providedProps as WithDefaultProps;\n  if (disabled) {\n    return children;\n  }\n\n  return (\n    <>\n      <Text type=\"headline-6\">\n        This example requires a more screen real estate than what is available\n        so you will need to open it in a full page dialog.\n      </Text>\n      <Button\n        id={`${id}-dialog-toggle`}\n        themeType=\"contained\"\n        onClick={enable}\n        theme=\"primary\"\n      >\n        <TextIconSpacing icon={<LaunchSVGIcon />}>Launch</TextIconSpacing>\n      </Button>\n      <Dialog\n        id={`${id}-dialog`}\n        aria-labelledby={`${id}-dialog-title`}\n        visible={visible}\n        onRequestClose={disable}\n        type=\"full-page\"\n        disableFocusContainer={disableFocusOnMount}\n      >\n        {!disableAppBar && (\n          <AppBar>\n            <AppBarTitle keyline id={`${id}-dialog-title`}>\n              {title}\n            </AppBarTitle>\n            <AppBarAction first aria-label=\"Close\" onClick={disable}>\n              <CloseSVGIcon />\n            </AppBarAction>\n          </AppBar>\n        )}\n        {disableContent ? (\n          children\n        ) : (\n          <DialogContent disablePadding>{children}</DialogContent>\n        )}\n      </Dialog>\n    </>\n  );\n};\n\nconst defaultProps: DefaultProps = {\n  title: \"Full Page Demo\",\n  disabled: false,\n  disableAppBar: false,\n  disableContent: false,\n  disableFocusOnMount: false,\n};\n\nConditionalFullPageDialog.defaultProps = defaultProps;\n\nexport default ConditionalFullPageDialog;\n",
    "isBinary": false
  },
  "src/InputChips.scss": {
    "content": "@import '~@react-md/divider/dist/mixins';\n@import '~@react-md/icon/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n$spacing: 0.5rem;\n$padding: 1rem;\n\n.input-chips {\n  display: flex;\n  flex-direction: column;\n\n  &__to {\n    align-items: center;\n    display: flex;\n    padding: 0 $padding;\n    width: 100%;\n  }\n\n  &__emails {\n    @include rmd-utils-scroll(x);\n\n    align-items: center;\n    display: flex;\n    flex: 1 1 auto;\n    justify-content: flex-start;\n  }\n\n  &__label {\n    margin-right: $spacing;\n  }\n\n  &__email {\n    flex-grow: 1;\n    min-width: 5rem;\n  }\n\n  // all the importans are really just required to override the useFixedPositioning styles\n  // that aren't configurable right now that have to be changed for the hacky phone \"emulation\"\n  // sass-lint:disable no-important\n  &__contacts {\n    @include rmd-utils-tablet-media {\n      bottom: auto !important;\n      max-height: 30rem;\n      position: absolute !important;\n\n      // status bar height + autocomplete height\n      top: calc(#{rmd-icon-theme-var(size)} + 3.5rem) !important;\n    }\n\n    left: 0 !important;\n    right: 0 !important;\n  }\n\n  &__chip {\n    margin-right: $spacing;\n  }\n\n  &__remove {\n    transform: rotate(45deg);\n  }\n\n  &__subject {\n    padding: $padding;\n  }\n\n  &__message {\n    flex-grow: 1;\n    flex-shrink: 1;\n    padding: 0;\n  }\n\n  &__message-area {\n    padding: $padding;\n  }\n}\n",
    "isBinary": false
  },
  "src/To.tsx": {
    "content": "import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  AutoComplete,\n  AutoCompleteHandler,\n  AutoCompleteData,\n} from \"@react-md/autocomplete\";\nimport { Avatar } from \"@react-md/avatar\";\nimport { Chip } from \"@react-md/chip\";\nimport { Label } from \"@react-md/form\";\nimport { AddCircleSVGIcon } from \"@react-md/material-icons\";\nimport { BELOW_INNER_LEFT_ANCHOR } from \"@react-md/utils\";\n\nimport contacts, { Contact } from \"./contacts\";\nimport styles from \"./styles\";\n\ninterface ToProps {\n  isTouch: boolean;\n}\n\nconst To: FC<ToProps> = ({ isTouch }) => {\n  const [chips, setChips] = useState<Contact[]>([]);\n  const data = useMemo<(AutoCompleteData & { label: string })[]>(\n    () =>\n      contacts\n        .filter(({ id }) => !chips.find((chip) => chip.id === id))\n        .map(({ name, avatar, email }) => ({\n          label: name,\n          leftAddon: (\n            <Avatar>\n              <img src={avatar} alt=\"\" />\n            </Avatar>\n          ),\n          leftAddonType: \"avatar\",\n          secondaryText: email,\n        })),\n    [chips]\n  );\n\n  const onAutoComplete = useCallback<AutoCompleteHandler>(\n    (result) => {\n      const item = result.result as typeof data[0];\n      const contact = contacts.find(({ name }) => item.label === name);\n      if (!contact) {\n        throw new Error();\n      }\n      setChips((prevChips) => [...prevChips, contact]);\n    },\n    [data]\n  );\n\n  const emailsRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    const div = emailsRef.current;\n    if (div) {\n      div.scrollLeft = div.scrollWidth;\n    }\n  }, [chips]);\n  return (\n    <div className={styles(\"to\")}>\n      <Label htmlFor=\"input-chips-email\" className={styles(\"label\")}>\n        To\n      </Label>\n      <div className={styles(\"emails\")} ref={emailsRef}>\n        {chips.map(({ id, name, avatar }) => (\n          <Chip\n            key={id}\n            leftIcon={\n              <Avatar>\n                <img src={avatar} alt=\"\" />\n              </Avatar>\n            }\n            rightIcon={<AddCircleSVGIcon className={styles(\"remove\")} />}\n            className={styles(\"chip\")}\n            onClick={() =>\n              setChips((prevChips) =>\n                prevChips.filter((chip) => chip.id !== id)\n              )\n            }\n          >\n            {name}\n          </Chip>\n        ))}\n        <AutoComplete\n          id=\"input-chips-email\"\n          placeholder=\"Email\"\n          theme=\"none\"\n          valueKey=\"label\"\n          data={data}\n          listboxWidth=\"auto\"\n          anchor={BELOW_INNER_LEFT_ANCHOR}\n          className={styles(\"email\")}\n          inline\n          highlight\n          clearOnAutoComplete\n          onAutoComplete={onAutoComplete}\n          vhMargin={0}\n          vwMargin={0}\n          disableSwapping\n          disableHideOnScroll={isTouch}\n          disableHideOnResize={isTouch}\n          listboxClassName={styles(\"contacts\")}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default To;\n",
    "isBinary": false
  },
  "src/contacts.ts": {
    "content": "import people from \"./people\";\nimport createIdGenerator from \"./createIdGenerator\";\n\nconst guid = createIdGenerator(\"input-chips-contact\");\n\nexport interface Contact {\n  id: string;\n  name: string;\n  email: string;\n  avatar: string;\n}\n\nconst contacts: Contact[] = Array.from(people, (name, i) => ({\n  id: guid(),\n  name,\n  email: `${name.toLowerCase().replace(/\\s|-/g, \"\")}@email.com`,\n  avatar: `https://i.pravatar.cc/40?img=${i}`,\n}));\n\nexport default contacts;\n",
    "isBinary": false
  },
  "src/styles.ts": {
    "content": "import { bem } from \"@react-md/utils\";\n\nimport \"./InputChips.scss\";\n\nexport default bem(\"input-chips\");\n",
    "isBinary": false
  },
  "src/Phone/ClosePhone.tsx": {
    "content": "import React, { FC, useCallback } from \"react\";\nimport { AppBarNav, AppBarNavProps } from \"@react-md/app-bar\";\nimport {\n  KeyboardArrowLeftSVGIcon,\n  CloseSVGIcon,\n} from \"@react-md/material-icons\";\nimport { bem } from \"@react-md/utils\";\n\nimport { usePhoneContext } from \"./context\";\n\nconst block = bem(\"phone\");\n\ninterface Props extends AppBarNavProps {\n  floating?: boolean;\n}\n\nconst ClosePhone: FC<Props> = ({\n  children,\n  onClick,\n  floating,\n  className,\n  ...props\n}) => {\n  const { id, closePhone } = usePhoneContext();\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (onClick) {\n        onClick(event);\n      }\n\n      closePhone();\n    },\n    [onClick, closePhone]\n  );\n\n  const button = (\n    <AppBarNav\n      {...props}\n      id={`${id}-close`}\n      onClick={handleClick}\n      theme={floating ? \"secondary\" : undefined}\n      themeType={floating ? \"contained\" : undefined}\n      className={className}\n    >\n      {floating ? <CloseSVGIcon /> : children}\n    </AppBarNav>\n  );\n  if (!floating) {\n    return button;\n  }\n\n  return <span className={block(\"close-container\")}>{button}</span>;\n};\n\nClosePhone.defaultProps = {\n  \"aria-label\": \"Go back\",\n  children: <KeyboardArrowLeftSVGIcon />,\n  floating: false,\n};\n\nexport default ClosePhone;\n",
    "isBinary": false
  },
  "src/Phone/DefaultAppBar.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { AppBar } from \"@react-md/app-bar\";\n\nimport AppBarTitle from \"./AppBarTitle\";\n\nimport ClosePhone from \"./ClosePhone\";\nimport { usePhoneContext } from \"./context\";\nimport OptionsAction from \"./OptionsAction\";\nimport PhoneAppBar from \"./PhoneAppBar\";\nimport SearchAction from \"./SearchAction\";\n\nconst DefaultPhoneAppBar: FC = () => {\n  const { title } = usePhoneContext();\n  return (\n    <PhoneAppBar>\n      <AppBar component=\"div\" theme=\"clear\">\n        <ClosePhone />\n        <AppBarTitle>{title}</AppBarTitle>\n        <SearchAction />\n        <OptionsAction />\n      </AppBar>\n    </PhoneAppBar>\n  );\n};\n\nexport default DefaultPhoneAppBar;\n",
    "isBinary": false
  },
  "src/Phone/OptionsAction.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { AppBarAction, AppBarActionProps } from \"@react-md/app-bar\";\nimport { MoreVertSVGIcon } from \"@react-md/material-icons\";\n\nimport { usePhoneContext } from \"./context\";\n\nconst OptionsAction: FC<AppBarActionProps> = ({ children, ...props }) => {\n  const { id } = usePhoneContext();\n  return (\n    <AppBarAction {...props} id={`${id}-options`}>\n      {children}\n    </AppBarAction>\n  );\n};\n\nOptionsAction.defaultProps = {\n  \"aria-label\": \"Options\",\n  children: <MoreVertSVGIcon />,\n  last: true,\n};\n\nexport default OptionsAction;\n",
    "isBinary": false
  },
  "src/Phone/Phone.scss": {
    "content": "@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n@import '~@react-md/elevation/dist/mixins';\n@import '~@react-md/app-bar/dist/mixins';\n@import '~@react-md/icon/dist/mixins';\n@import '~@react-md/typography/dist/mixins';\n@import '~@react-md/sheet/dist/mixins';\n\n$phone-height: 35.5rem;\n$phone-width: 20rem;\n\n$fixed-classes: (\n  rmd-app-bar--fixed: 1,\n  rmd-sheet-overlay: 1,\n  rmd-sheet--raised: 2,\n);\n\n.phone {\n  height: 100%;\n\n  &--emulated {\n    @include rmd-elevation(4);\n    @include rmd-utils-block-centered(1rem);\n    @include rmd-theme(background-color, background);\n    @include rmd-icon-theme-update-var(size, $rmd-icon-size);\n    @include rmd-app-bar-theme-update-var(height, $rmd-app-bar-height);\n    @include rmd-app-bar-theme-update-var(dense-height, $rmd-app-bar-height + $rmd-icon-size);\n    @include rmd-app-bar-theme-update-var(\n      prominent-dense-height,\n      $rmd-app-bar-prominent-height + $rmd-icon-size\n    );\n    @include rmd-sheet-theme-update-var(touch-width, calc(100% - #{$rmd-sheet-touch-margin}));\n    @include rmd-typography-theme-update-var(line-width, $rmd-typography-mobile-max-line-length);\n\n    height: $phone-height;\n    overflow: hidden;\n    position: relative;\n    width: $phone-width;\n\n    @each $fixed-class, $z-index in $fixed-classes {\n      .#{$fixed-class} {\n        position: absolute;\n        z-index: $z-index;\n      }\n    }\n\n    .phone__app-bar {\n      // updated the shadow to be bottom only\n      box-shadow: 0 3px 2px -3px rgba($rmd-black-base, 0.2),\n        0 2px 2px -2px rgba($rmd-black-base, 0.14), 0 1px 5px -1px rgba($rmd-black-base, 0.12);\n    }\n  }\n\n  &__app-bar {\n    flex-wrap: wrap;\n  }\n\n  &__status-bar {\n    @include rmd-app-bar-theme-update-var(dense-height, rmd-icon-theme-var(size));\n    background-color: rgba($rmd-black-base, 0.12);\n\n    width: 100%;\n  }\n\n  &__icon {\n    @include rmd-icon-dense-theme;\n\n    margin: 0 $rmd-app-bar-lr-margin;\n\n    &--first {\n      @include rmd-utils-rtl-auto(margin-left, auto, $rmd-app-bar-lr-margin);\n    }\n  }\n\n  &__content {\n    @include rmd-utils-scroll;\n\n    height: 100%;\n\n    &--stacked {\n      display: flex;\n      flex-direction: column;\n    }\n  }\n\n  &__close-container {\n    bottom: 1rem;\n    margin: 0;\n    position: fixed;\n    right: 1rem;\n    z-index: 100;\n  }\n}\n",
    "isBinary": false
  },
  "src/Phone/Phone.tsx": {
    "content": "import React, { FC, ReactNode, useMemo, useCallback } from \"react\";\nimport cn from \"classnames\";\nimport {\n  APP_BAR_OFFSET_DENSE_CLASSNAME,\n  APP_BAR_OFFSET_PROMINENT_DENSE_CLASSNAME,\n} from \"@react-md/app-bar\";\nimport { bem, useAppSize, useToggle, PhoneOnly } from \"@react-md/utils\";\n\nimport ConditionalFullPageDialog, {\n  ConditionalFullPageDialogProps,\n} from \"./ConditionalFullPageDialog\";\n\nimport \"./Phone.scss\";\nimport { PhoneContext } from \"./context\";\nimport DefaultAppBar from \"./DefaultAppBar\";\nimport StatusBar from \"./StatusBar\";\nimport ClosePhone from \"./ClosePhone\";\n\nexport interface PhoneConfiguration {\n  /**\n   * An optional app bar to use within the phone. This should normally contain the `ClosePhone`\n   * component so that it can be hidden on mobile devices when the full page dialog is used.\n   */\n  appBar?: ReactNode;\n\n  /**\n   * The title to use for the phone. This will be passed down into the phone context so it can\n   * be grabbed anywhere.\n   */\n  title?: ReactNode;\n\n  /**\n   * A class name to apply to the fake phone's content element.\n   */\n  contentClassName?: string;\n\n  /**\n   * Boolean if the phone's content should gain the stacked styles which update the content\n   * to be display flex and flex-direction column. THis is great when creating a custom app\n   * bar that isn't fixed to the top with position fixed.\n   */\n  contentStacked?: boolean;\n\n  /**\n   * Boolean if the phone's app bar should be prominent. This is used to add the required offset class names\n   * to the content element.\n   */\n  prominent?: boolean;\n}\n\nexport interface PhoneProps\n  extends PhoneConfiguration,\n    Pick<\n      ConditionalFullPageDialogProps,\n      \"disableAppBar\" | \"disableContent\" | \"disableFocusOnMount\"\n    > {\n  /**\n   * An id for the phone. This is required for accessibility and quickly linking\n   * to things.\n   */\n  id: string;\n\n  /**\n   * The content to display. This will conditionally render in a full page\n   * dialog.\n   */\n  children: ReactNode;\n\n  /**\n   * A class name to apply to the fake phone's container element.\n   */\n  className?: string;\n\n  /**\n   * An optional function to call when the dialog is closed. This is useful if\n   * the demo should be reset when the full page dialog is closed.\n   */\n  onPhoneClose?: () => void;\n\n  /**\n   * Boolean if the `appBar` should only render a status bar.\n   */\n  statusBar?: boolean;\n}\n\nconst block = bem(\"phone\");\n\nconst DEFAULT_APP_BAR = <DefaultAppBar />;\n\nconst Phone: FC<PhoneProps> = ({\n  id,\n  title = \"Example\",\n  children,\n  appBar = DEFAULT_APP_BAR,\n  className,\n  contentClassName,\n  contentStacked: stacked = false,\n  prominent,\n  disableAppBar = false,\n  disableContent = false,\n  disableFocusOnMount = false,\n  onPhoneClose,\n  statusBar = false,\n}) => {\n  const { isPhone } = useAppSize();\n  const [visible, enable, disable] = useToggle(false);\n  const closePhone = useCallback(() => {\n    disable();\n    if (onPhoneClose) {\n      onPhoneClose();\n    }\n  }, [onPhoneClose, disable]);\n\n  if (visible && !isPhone) {\n    closePhone();\n  }\n\n  const value = useMemo(\n    () => ({\n      id,\n      title,\n      closePhone,\n    }),\n    [id, title, closePhone]\n  );\n\n  return (\n    <PhoneContext.Provider value={value}>\n      <ConditionalFullPageDialog\n        id={id}\n        disabled={!isPhone}\n        enable={enable}\n        disable={closePhone}\n        visible={visible}\n        disableAppBar={disableAppBar || statusBar}\n        disableContent={disableContent}\n        disableFocusOnMount={disableFocusOnMount}\n      >\n        <div\n          id={`${id}-phone`}\n          className={cn(block({ emulated: !isPhone }), className)}\n        >\n          {(statusBar && <StatusBar id={id} isPhone={isPhone} />) || appBar}\n          <div\n            id={`${id}-content`}\n            className={cn(\n              block(\"content\", { stacked }),\n              {\n                [APP_BAR_OFFSET_DENSE_CLASSNAME]:\n                  !statusBar && appBar && !isPhone,\n                [APP_BAR_OFFSET_PROMINENT_DENSE_CLASSNAME]:\n                  !statusBar && appBar && !isPhone && prominent,\n              },\n              contentClassName\n            )}\n          >\n            {children}\n            {statusBar && (\n              <PhoneOnly>\n                <ClosePhone floating />\n              </PhoneOnly>\n            )}\n          </div>\n        </div>\n      </ConditionalFullPageDialog>\n    </PhoneContext.Provider>\n  );\n};\n\nexport default Phone;\n",
    "isBinary": false
  },
  "src/Phone/PhoneAppBar.tsx": {
    "content": "import React, { FC } from \"react\";\nimport cn from \"classnames\";\nimport { AppBar, AppBarProps } from \"@react-md/app-bar\";\nimport { bem, useAppSize } from \"@react-md/utils\";\n\nimport { usePhoneContext } from \"./context\";\nimport StatusBar from \"./StatusBar\";\n\nconst block = bem(\"phone\");\n\nconst PhoneAppBar: FC<AppBarProps> = ({ className, children, ...props }) => {\n  const { id } = usePhoneContext();\n  const { isPhone } = useAppSize();\n\n  return (\n    <AppBar\n      {...props}\n      id={`${id}-app-bar`}\n      className={cn(block(\"app-bar\"), className)}\n      fixed\n      fixedElevation={false}\n      dense={!isPhone}\n    >\n      <StatusBar id={id} isPhone={isPhone} />\n      {children}\n    </AppBar>\n  );\n};\n\nPhoneAppBar.defaultProps = {\n  theme: \"default\",\n};\n\nexport default PhoneAppBar;\n",
    "isBinary": false
  },
  "src/Phone/SearchAction.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { AppBarAction, AppBarActionProps } from \"@react-md/app-bar\";\nimport { SearchSVGIcon } from \"@react-md/material-icons\";\n\nimport { usePhoneContext } from \"./context\";\n\nconst SearchAction: FC<AppBarActionProps> = ({ children, ...props }) => {\n  const { id } = usePhoneContext();\n  return (\n    <AppBarAction {...props} id={`${id}-search`}>\n      {children}\n    </AppBarAction>\n  );\n};\n\nSearchAction.defaultProps = {\n  \"aria-label\": \"Search\",\n  children: <SearchSVGIcon />,\n  first: true,\n};\n\nexport default SearchAction;\n",
    "isBinary": false
  },
  "src/Phone/StatusBar.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { AppBar } from \"@react-md/app-bar\";\nimport {\n  NetworkWifiSVGIcon,\n  NetworkCellSVGIcon,\n  BatteryFullSVGIcon,\n} from \"@react-md/material-icons\";\nimport { bem } from \"@react-md/utils\";\n\nexport interface StatusBarProps {\n  id: string;\n  isPhone: boolean;\n}\n\nconst block = bem(\"phone\");\n\nconst StatusBar: FC<StatusBarProps> = ({ id, isPhone }) => {\n  if (isPhone) {\n    return null;\n  }\n\n  return (\n    <AppBar\n      id={`${id}-status-bar`}\n      className={block(\"status-bar\")}\n      dense\n      theme=\"clear\"\n      component=\"div\"\n    >\n      <NetworkWifiSVGIcon\n        role=\"presentation\"\n        className={block(\"icon\", { first: true })}\n      />\n      <NetworkCellSVGIcon role=\"presentation\" className={block(\"icon\")} />\n      <BatteryFullSVGIcon role=\"presentation\" className={block(\"icon\")} />\n    </AppBar>\n  );\n};\n\nexport default StatusBar;\n",
    "isBinary": false
  },
  "src/Phone/context.ts": {
    "content": "import { createContext, ReactNode, useContext } from \"react\";\n\ninterface PhoneContextType {\n  id: string;\n  title: ReactNode;\n  closePhone: () => void;\n}\n\nexport const PhoneContext = createContext<PhoneContextType>({\n  id: \"\",\n  title: \"Example\",\n  closePhone: () => {},\n});\n\nexport function usePhoneContext(): PhoneContextType {\n  return useContext(PhoneContext);\n}\n",
    "isBinary": false
  },
  "src/people.ts": {
    "content": "export default [\n  \"Jasmine Robinson\",\n  \"Devonte Craig\",\n  \"Dean Reid\",\n  \"Shaquille Bauer\",\n  \"Vivian Bishop\",\n  \"Braden Mullins\",\n  \"Katlyn Mcdonald\",\n  \"Isabella Marshall\",\n  \"Lee Christensen\",\n  \"Tommy Hogan\",\n  \"Timothy Harvey\",\n  \"Preston Phillips\",\n  \"Marco Sherman\",\n  \"Haley Coleman\",\n  \"Mario Swanson\",\n  \"Xavier Solis\",\n  \"Keaton Cannon\",\n  \"Cassandra Austin\",\n  \"Irene Holland\",\n  \"Gustavo Love\",\n  \"Meghan Stewart\",\n  \"Renee Townsend\",\n  \"Bobby Newman\",\n  \"Keaton Ortiz\",\n  \"Dustin Wells\",\n  \"Jerry Mcgee\",\n  \"Carl Howard\",\n  \"Sabrina Lang\",\n  \"Reed Baker\",\n  \"Kristen Fields\",\n  \"Gavin Carrillo\",\n  \"Claudia Neal\",\n  \"Leonard Schneider\",\n  \"Dominick Boyd\",\n  \"Mary Hampton\",\n  \"Mark Ayala\",\n  \"Kristina Warner\",\n  \"Antonio Walton\",\n  \"Tyson Scott\",\n  \"Harley Moss\",\n] as const;\n",
    "isBinary": false
  },
  "src/createIdGenerator.ts": {
    "content": "/**\n * An extremely simplified uuid function that is scoped with a speciifc prefix. This\n * will just always increment the total count at the end of the prefix.\n *\n * ```ts\n * const uuid = createIdGenerator(\"my-custom-prefix\");\n *\n * uuid(); // my-custom-prefix-0\n * uuid(); // my-custom-prefix-1\n * uuid(); // my-custom-prefix-2\n * ```\n *\n * @param prefix The string prefix to use\n * @return a function to call to generate a \"uuid\"\n */\nexport default function createIdGenerator(prefix: string): () => string {\n  const generator = (function* idGenerator() {\n    let index = 0;\n    while (true) {\n      yield `${prefix}-${index}`;\n      index += 1;\n    }\n  })();\n\n  return () => generator.next().value;\n}\n",
    "isBinary": false
  }
}
