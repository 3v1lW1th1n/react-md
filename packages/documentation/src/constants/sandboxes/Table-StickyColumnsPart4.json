{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/react-md@next/dist/css/react-md.teal-pink-200-light.min.css\"\n    />\n    <title>Table Example - Sticky Columns Part4</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import 'variables';\n@import '~@react-md/button/dist/mixins';\n@import '~@react-md/form/dist/mixins';\n@import '~@react-md/layout/dist/mixins';\n@import '~@react-md/states/dist/mixins';\n@import '~@react-md/table/dist/mixins';\n@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/typography/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "src/_variables.scss": {
    "content": "@import '~@react-md/theme/dist/color-palette';\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": "Table Example - Sticky Columns Part4",
      "description": "Example from https://react-md.dev/packages/table/demos#sticky-columns-part4",
      "main": "src/Demo.tsx",
      "dependencies": {
        "@react-md/button": "next",
        "@react-md/form": "next",
        "@react-md/layout": "next",
        "@react-md/states": "next",
        "@react-md/table": "next",
        "@react-md/theme": "next",
        "@react-md/typography": "next",
        "@react-md/utils": "next",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { useIndeterminateChecked } from \"@react-md/form\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableCheckbox,\n  TableContainer,\n  TableHeader,\n  TableRow,\n} from \"@react-md/table\";\n\nimport \"./StickyColumnsPart4.scss\";\n\nconst rows = Array.from(new Array(30), (_, i) => `row-${i + 1}`);\nconst headers = Array.from(new Array(20), (_, i) => `Header ${i + 1}`);\n\nconst Demo: FC = () => {\n  const { rootProps, getProps } = useIndeterminateChecked(rows);\n\n  return (\n    <TableContainer className=\"sticky-columns-part-4\">\n      <Table fullWidth>\n        <TableHeader sticky>\n          <TableRow>\n            <TableCheckbox\n              id=\"sticky-header-checkbox\"\n              {...rootProps}\n              colSpan={2}\n              /**\n               * Manually set sticky to \"header-cell\" so it is fixed to the\n               * `top` and `left` instead of the default of just `top`\n               */\n              sticky=\"header-cell\"\n            />\n            {headers.map((header) => (\n              <TableCell key={header}>{header}</TableCell>\n            ))}\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {rows.map((row, rowIndex) => {\n            const checkboxProps = getProps(row);\n            const { checked, onChange } = checkboxProps;\n\n            return (\n              <TableRow\n                key={row}\n                clickable\n                selected={checked}\n                onClick={onChange}\n              >\n                <TableCheckbox\n                  id={`${row}-checkbox`}\n                  {...checkboxProps}\n                  sticky\n                />\n                <TableCell\n                  header\n                  /**\n                   * Set the sticky behavior to \"cell\" so it applies the `left`\n                   * styling instead of the the default header cell behavior of\n                   * `top`\n                   */\n                  sticky=\"cell\"\n                  className=\"sticky-columns-part-4__sticky\"\n                >\n                  Row Header\n                </TableCell>\n                {headers.map((header, cellIndex) => (\n                  <TableCell key={header}>\n                    {`Cell ${rowIndex + 1} - ${cellIndex + 1}`}\n                  </TableCell>\n                ))}\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default Demo;\n",
    "isBinary": false
  },
  "src/StickyColumnsPart4.scss": {
    "content": "@import '~@react-md/button/dist/functions';\n@import '~@react-md/table/dist/mixins';\n\n.sticky-columns-part-4 {\n  max-height: 25rem;\n\n  &__sticky {\n    $checkbox-offset: calc(#{rmd-button-theme-var(icon-size)} + #{$rmd-table-checkbox-padding * 2});\n\n    // if you don't need auto-RTL support, you could just set the `left` value\n    // instead of using the mixin and updating the css variable\n    @include rmd-table-theme-update-var(sticky-cell, $checkbox-offset);\n  }\n}\n",
    "isBinary": false
  }
}
