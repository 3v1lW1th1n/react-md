{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <title>. Example - Cross Fade Examples</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { StatesConfig, InteractionModeListener } from \"@react-md/states\";\n\nimport \"./styles.scss\";\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <InteractionModeListener>\n    <StatesConfig>\n      <Demo />\n    </StatesConfig>\n  </InteractionModeListener>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import 'variables';\n@import '~@react-md/app-bar/dist/mixins';\n@import '~@react-md/divider/dist/mixins';\n@import '~@react-md/form/dist/mixins';\n@import '~@react-md/progress/dist/mixins';\n@import '~@react-md/states/dist/mixins';\n@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/transition/dist/mixins';\n@import '~@react-md/typography/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "src/_variables.scss": {
    "content": "@import '~@react-md/theme/dist/color-palette';\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": ". Example - Cross Fade Examples",
      "description": "Example from https://react-md.dev/packages/./demos#cross-fade-examples",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/app-bar": "next",
        "@react-md/divider": "next",
        "@react-md/form": "next",
        "@react-md/progress": "next",
        "@react-md/states": "next",
        "@react-md/theme": "next",
        "@react-md/transition": "next",
        "@react-md/typography": "next",
        "@react-md/utils": "next",
        "classnames": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  ".env": {
    "content": "SASS_PATH=node_modules:src\n",
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "import React, { FC, Fragment } from \"react\";\nimport { Divider } from \"@react-md/divider\";\nimport { Text } from \"@react-md/typography\";\n\nimport Code from \"./Code\";\n\nimport StaticPageTransition from \"./StaticPageTransition\";\nimport AsyncPageTransitions from \"./AsyncPageTransitions\";\n\nconst Demo: FC = () => (\n  <Fragment>\n    <Text type=\"headline-6\" margin=\"bottom\">\n      Static Transitions\n    </Text>\n    <StaticPageTransition />\n    <Divider />\n    <Text type=\"headline-6\" margin=\"bottom\">\n      Async with <Code>Suspense</Code>\n    </Text>\n    <AsyncPageTransitions />\n  </Fragment>\n);\n\nexport default Demo;\n",
    "isBinary": false
  },
  "src/Code/Code.tsx": {
    "content": "import React, { FC, forwardRef, HTMLAttributes, ReactNode } from \"react\";\nimport cn from \"classnames\";\nimport { WithForwardedRef } from \"@react-md/utils\";\n\nexport interface CodeProps extends HTMLAttributes<HTMLElement> {\n  className?: string;\n  children: ReactNode;\n  inline?: boolean;\n}\n\nconst Code: FC<CodeProps & WithForwardedRef<HTMLElement>> = ({\n  children,\n  inline,\n  className,\n  forwardedRef,\n  ...props\n}) => (\n  <code\n    {...props}\n    ref={forwardedRef}\n    className={cn(\"code\", { \"code--inline\": inline }, className)}\n  >\n    {children}\n  </code>\n);\n\nCode.defaultProps = {\n  inline: true,\n};\n\nexport default forwardRef<HTMLElement, CodeProps>((props, ref) => (\n  <Code {...props} forwardedRef={ref} />\n));\n",
    "isBinary": false
  },
  "src/Code/code.scss": {
    "content": "@import '../variables';\n@import '~@react-md/theme/dist/variables';\n@import '~@react-md/typography/dist/mixins';\n\n$code-light-theme-bg: $rmd-grey-200;\n$code-dark-theme-bg: #171717;\n$solarized-base-03: #002b36;\n$solarized-base-02: #073642;\n$solarized-base-01: #586e75;\n$solarized-base-00: #657b83;\n$solarized-base-0: #839496;\n$solarized-base-1: #93a1a1;\n$solarized-base-2: #eee8d5;\n$solarized-base-3: #fdf6e3;\n\n$solarized-yellow: #b58900;\n$solarized-orange: #cb4b16;\n$solarized-red: #d30102;\n$solarized-magenta: #d33682;\n$solarized-violet: #6c71c4;\n$solarized-blue: #268bd2;\n$solarized-cyan: #2aa198;\n$solarized-green: #859900;\n\n:root {\n  #{--code-bg}: #{$code-light-theme-bg};\n}\n\n.code {\n  @include rmd-typography(body-1);\n\n  font-family: 'Source Code Pro', Consolas, Monaco, monospace;\n\n  &::selection,\n  *::selection {\n    background-color: $solarized-base-02;\n  }\n\n  &--block {\n    background-color: $solarized-base-03;\n    color: $solarized-base-1;\n\n    // always enforce ltr for blocked code\n    direction: ltr;\n    margin: 0.5em 0;\n    overflow: auto;\n    padding: 1em;\n  }\n\n  &--inline {\n    background-color: var(--code-bg);\n    border-radius: 0.25rem;\n    font-size: 0.9em;\n    padding: 0.1em 0.4em;\n    white-space: pre-wrap;\n  }\n\n  &--counted {\n    padding-left: 3em;\n    position: relative;\n  }\n\n  &__lines {\n    border-right: 1px solid $solarized-base-01;\n    display: flex;\n    flex-direction: column;\n    left: 0;\n    padding-right: 0.25em;\n    pointer-events: none;\n    position: absolute;\n    text-align: right;\n    width: 2.5em;\n  }\n}\n\n// prismjs custom theme\n// this is _basically_ my current vim theme, but not aas good since\n// Prism doesn't have as many tokenizers\n.token {\n  position: relative;\n  z-index: 1;\n\n  &.comment,\n  &.doctype {\n    color: $solarized-base-01;\n  }\n\n  &.keyword {\n    color: $solarized-green;\n  }\n\n  &.punctuation {\n    color: $solarized-base-01;\n  }\n\n  &.inserted,\n  &.string,\n  .language-tsx &.attr-value {\n    color: $solarized-cyan;\n  }\n\n  &.tag,\n  &.selector,\n  &.class-name,\n  // fixes mixins/functions\n  .language-scss &.function,\n  // fixes variables\n  .language-scss &.variable {\n    color: $solarized-blue;\n  }\n\n  &.attr-name,\n  &.property,\n  &.builtin {\n    color: $solarized-yellow;\n  }\n\n  &.script,\n  &.interpolation,\n  // to fix interfaces\n  .language-ts &.keyword + .class-name,\n  .language-tsx &.keyword + .class-name {\n    color: $solarized-base-1;\n  }\n\n  // fixes property colors\n  .language-scss &.keyword,\n  // for npm install\n  .language-shell &.function {\n    color: $solarized-orange;\n  }\n\n  &.deleted,\n  &.boolean,\n  &.number,\n  &.interpolation-punctuation {\n    color: $solarized-red;\n  }\n\n  &.important,\n  &.bold {\n    font-weight: map-get($rmd-typography-font-weights, bold);\n  }\n\n  &.italic {\n    font-style: italic;\n  }\n\n  &.entity {\n    cursor: help;\n  }\n}\n",
    "isBinary": false
  },
  "src/Code/index.ts": {
    "content": "import \"./code.scss\";\nexport { default } from \"./Code\";\n",
    "isBinary": false
  },
  "src/AsyncPageTransitions.tsx": {
    "content": "import React, { FC, Fragment, Suspense, useState } from \"react\";\nimport { AppBar, AppBarAction } from \"@react-md/app-bar\";\nimport { Switch, useCheckboxState } from \"@react-md/form\";\nimport { CircularProgress } from \"@react-md/progress\";\nimport { CrossFade } from \"@react-md/transition\";\n\nimport useFakeLazyImport from \"./useFakeLazyImport\";\n\nimport Container from \"./Container\";\nimport { Lorem1, Lorem2, Lorem3 } from \"./LorumIpsum\";\n\ninterface CurrentPageProps {\n  page: number;\n}\n\nconst CurrentPage: FC<CurrentPageProps> = ({ page }) => {\n  let content = <Lorem1 />;\n  if (page === 2) {\n    content = <Lorem2 />;\n  } else if (page === 3) {\n    content = <Lorem3 />;\n  }\n\n  return <CrossFade>{content}</CrossFade>;\n};\n\nconst AsyncPageTransitions: FC = () => {\n  const [checked, onChange] = useCheckboxState(false);\n  const [page, setPage] = useState<0 | 1 | 2 | 3>(0);\n  const Content = useFakeLazyImport<CurrentPageProps>(\n    CurrentPage,\n    page,\n    checked ? 0 : 5000\n  );\n\n  return (\n    <Fragment>\n      <Switch\n        id=\"async-immediate\"\n        label=\"Disable loading\"\n        name=\"immediate\"\n        onChange={onChange}\n        checked={checked}\n        iconAfter\n      />\n      <AppBar theme=\"default\">\n        <AppBarAction\n          buttonType=\"text\"\n          theme={page === 1 ? \"primary\" : \"clear\"}\n          onClick={() => setPage(1)}\n        >\n          Page 1\n        </AppBarAction>\n        <AppBarAction\n          buttonType=\"text\"\n          theme={page === 2 ? \"primary\" : \"clear\"}\n          onClick={() => setPage(2)}\n        >\n          Page 2\n        </AppBarAction>\n        <AppBarAction\n          buttonType=\"text\"\n          theme={page === 3 ? \"primary\" : \"clear\"}\n          onClick={() => setPage(3)}\n        >\n          Page 3\n        </AppBarAction>\n      </AppBar>\n      <Container>\n        {page !== 0 && (\n          <Suspense fallback={<CircularProgress id=\"async-loading-progress\" />}>\n            <Content page={page} />\n          </Suspense>\n        )}\n      </Container>\n    </Fragment>\n  );\n};\n\nexport default AsyncPageTransitions;\n",
    "isBinary": false
  },
  "src/Container.scss": {
    "content": "@import '~@react-md/divider/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n.cross-fade-example {\n  @include rmd-utils-scroll;\n\n  height: 10rem;\n}\n",
    "isBinary": false
  },
  "src/Container.tsx": {
    "content": "import React, { FC } from \"react\";\n\nimport \"./Container.scss\";\n\nconst Container: FC = ({ children }) => (\n  <div className=\"cross-fade-example\">{children}</div>\n);\n\nexport default Container;\n",
    "isBinary": false
  },
  "src/LorumIpsum.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { Text } from \"@react-md/typography\";\n\nexport const Lorem1: FC = () => (\n  <Text>\n    Nunc dapibus nec neque vitae aliquam. Phasellus eu luctus tortor. Morbi et\n    massa lectus. Nam nec posuere urna, nec tincidunt ligula. Vestibulum in urna\n    dapibus, rutrum nisi eu, convallis leo. Morbi maximus ultricies metus at\n    venenatis. Nulla tincidunt in enim ac semper. Maecenas at felis eget dui\n    malesuada placerat eu a dui. Vestibulum vel quam egestas turpis commodo\n    euismod ac quis purus.\n  </Text>\n);\n\nexport const Lorem2: FC = () => (\n  <Text>\n    Nullam consectetur rhoncus rhoncus. Nullam cursus porttitor lacus non\n    facilisis. Donec tincidunt arcu sollicitudin neque iaculis sollicitudin.\n    Vivamus in accumsan turpis. Praesent elementum elit vitae risus sollicitudin\n    pretium. Aliquam vitae diam non libero efficitur consequat. Ut a porttitor\n    nibh. Pellentesque habitant morbi tristique senectus et netus et malesuada\n    fames ac turpis egestas.\n  </Text>\n);\n\nexport const Lorem3: FC = () => (\n  <Text>\n    Donec lacinia velit ac est finibus malesuada. Mauris arcu dui, euismod quis\n    erat et, iaculis molestie orci. Nullam efficitur felis non feugiat\n    tincidunt. Etiam sed tellus eu nunc fermentum vestibulum. Integer maximus\n    iaculis fringilla. Donec tincidunt mauris quis iaculis volutpat. Ut tempor\n    dui a nisl eleifend, non tempor ipsum condimentum. Morbi ultrices lectus a\n    feugiat fringilla. Morbi ornare vehicula lorem, eu consectetur augue\n    tristique sit amet. Vestibulum fringilla auctor eros, at consectetur libero\n    hendrerit id. Interdum et malesuada fames ac ante ipsum primis in faucibus.\n  </Text>\n);\n",
    "isBinary": false
  },
  "src/StaticPageTransition.tsx": {
    "content": "import React, { FC, Fragment, useEffect, useRef, useState } from \"react\";\nimport { AppBar, AppBarAction } from \"@react-md/app-bar\";\nimport { CrossFade } from \"@react-md/transition\";\n\nimport Container from \"./Container\";\nimport { Lorem1, Lorem2, Lorem3 } from \"./LorumIpsum\";\n\nconst StaticPageTransition: FC = () => {\n  const [page, setPage] = useState<1 | 2 | 3>(1);\n  let content = <Lorem1 />;\n  if (page === 2) {\n    content = <Lorem2 />;\n  } else if (page === 3) {\n    content = <Lorem3 />;\n  }\n\n  // don't want the first render to trigger the animation, but all changes afterwards\n  // should.\n  const rendered = useRef(false);\n  useEffect(() => {\n    rendered.current = true;\n  }, []);\n\n  return (\n    <Fragment>\n      <AppBar theme=\"default\">\n        <AppBarAction\n          buttonType=\"text\"\n          theme={page === 1 ? \"primary\" : \"clear\"}\n          onClick={() => setPage(1)}\n        >\n          Page 1\n        </AppBarAction>\n        <AppBarAction\n          buttonType=\"text\"\n          theme={page === 2 ? \"primary\" : \"clear\"}\n          onClick={() => setPage(2)}\n        >\n          Page 2\n        </AppBarAction>\n        <AppBarAction\n          buttonType=\"text\"\n          theme={page === 3 ? \"primary\" : \"clear\"}\n          onClick={() => setPage(3)}\n        >\n          Page 3\n        </AppBarAction>\n      </AppBar>\n      <Container>\n        <CrossFade key={page} appear={rendered.current}>\n          {content}\n        </CrossFade>\n      </Container>\n    </Fragment>\n  );\n};\n\nexport default StaticPageTransition;\n",
    "isBinary": false
  },
  "src/useFakeLazyImport.ts": {
    "content": "import { FC, useMemo, lazy, LazyExoticComponent } from \"react\";\n\nfunction fakeImport<P>(\n  Component: FC<P>,\n  delay: number\n): Promise<{ default: FC<P> }> {\n  return new Promise(resolve => {\n    window.setTimeout(() => {\n      resolve({ default: Component });\n    }, delay);\n  });\n}\n\n/**\n * This is a hook that will allow lazily import a component each time the `Component`\n * changes or the `key` changes so that it can work with `Suspense` from React.\n *\n *\n * You should probably never do this... but this is a way to make it so that\n * the lazy loaded component can be re-loaded infinitely after resetting the\n * demo. Without this, the lazy implementation will immediately resolve the\n * fake import and not show any progress\n */\nexport default function useFakeLazyImport<P = {}>(\n  Component: FC<P>,\n  key: string | number | null = null,\n  delay: number = 5000\n): LazyExoticComponent<FC<P>> {\n  // disabled since this is really hacky and want it to also update if the key changes\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useMemo(() => lazy(() => fakeImport(Component, delay)), [\n    Component,\n    key,\n    delay,\n  ]);\n}\n",
    "isBinary": false
  }
}
