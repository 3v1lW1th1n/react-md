{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/react-md@next/dist/css/react-md.teal-pink-200-light.min.css\"\n    />\n    <title>Menu Example - Simple Context Menu</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import 'variables';\n@import '~@react-md/divider/dist/mixins';\n@import '~@react-md/layout/dist/mixins';\n@import '~@react-md/list/dist/mixins';\n@import '~@react-md/menu/dist/mixins';\n@import '~@react-md/states/dist/mixins';\n@import '~@react-md/table/dist/mixins';\n@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/typography/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "src/_variables.scss": {
    "content": "@import '~@react-md/theme/dist/color-palette';\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": "Menu Example - Simple Context Menu",
      "description": "Example from https://react-md.dev/packages/menu/demos#simple-context-menu",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/divider": "next",
        "@react-md/layout": "next",
        "@react-md/list": "next",
        "@react-md/material-icons": "next",
        "@react-md/menu": "next",
        "@react-md/states": "next",
        "@react-md/table": "next",
        "@react-md/theme": "next",
        "@react-md/typography": "next",
        "@react-md/utils": "next",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "import React, { ReactElement } from \"react\";\nimport {\n  TableContainer,\n  Table,\n  TableHeader,\n  TableRow,\n  TableCell,\n  TableBody,\n} from \"@react-md/table\";\n\nimport \"./SimpleContextMenu.scss\";\nimport { contents } from \"./data\";\nimport RowWithMenu from \"./RowWithMenu\";\n\nconst SimpleContextMenu = (): ReactElement | null => (\n  <TableContainer>\n    <Table>\n      <TableHeader>\n        <TableRow>\n          <TableCell grow>Name</TableCell>\n          <TableCell>Owner</TableCell>\n          <TableCell>Last Modified</TableCell>\n          <TableCell>Size</TableCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {contents.map(({ id, ...content }, index) => (\n          <RowWithMenu {...content} key={id} index={index} />\n        ))}\n      </TableBody>\n    </Table>\n  </TableContainer>\n);\n\nexport default Demo;\n",
    "isBinary": false
  },
  "src/RowWithMenu.tsx": {
    "content": "import React, { ReactElement } from \"react\";\nimport { Divider } from \"@react-md/divider\";\nimport { List } from \"@react-md/list\";\nimport {\n  DeleteSVGIcon,\n  EditSVGIcon,\n  FileDownloadSVGIcon,\n  InfoSVGIcon,\n  LinkSVGIcon,\n  ShareSVGIcon,\n  StarSVGIcon,\n} from \"@react-md/material-icons\";\nimport { Menu, MenuItem, useContextMenu } from \"@react-md/menu\";\nimport { TableCell, TableRow } from \"@react-md/table\";\n\nimport { DriveContentItem } from \"./data\";\n\ninterface Props extends Omit<DriveContentItem, \"id\"> {\n  size?: number;\n  index: number;\n}\n\nconst RowWithMenu = ({\n  name,\n  owner,\n  lastModified,\n  size,\n  index,\n}: Props): ReactElement | null => {\n  const id = `content-row-${index + 1}`;\n  const [menuProps, onContextMenu] = useContextMenu();\n  const { visible } = menuProps;\n\n  return (\n    <>\n      <TableRow\n        id={id}\n        tabIndex={0}\n        onContextMenu={onContextMenu}\n        selected={visible}\n        className=\"simple-context-menu__row\"\n      >\n        <TableCell>{name}</TableCell>\n        <TableCell>{owner}</TableCell>\n        <TableCell>{lastModified}</TableCell>\n        <TableCell hAlign=\"right\">{size || \"-\"}</TableCell>\n      </TableRow>\n      <Menu aria-label={`${name} Options`} controlId={id} portal {...menuProps}>\n        <List>\n          <MenuItem leftIcon={<ShareSVGIcon />}>Share</MenuItem>\n          <MenuItem leftIcon={<LinkSVGIcon />}>Get shareable link</MenuItem>\n          <MenuItem leftIcon={<StarSVGIcon />}>Add to Starred</MenuItem>\n          <MenuItem leftIcon={<EditSVGIcon />}>Rename</MenuItem>\n          <Divider />\n          <MenuItem leftIcon={<InfoSVGIcon />}>View Details</MenuItem>\n          <MenuItem leftIcon={<FileDownloadSVGIcon />}>Download</MenuItem>\n          <Divider />\n          <MenuItem leftIcon={<DeleteSVGIcon />}>Remove</MenuItem>\n        </List>\n      </Menu>\n    </>\n  );\n};\n\nexport default RowWithMenu;\n",
    "isBinary": false
  },
  "src/SimpleContextMenu.scss": {
    "content": "@import '~@react-md/states/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n.simple-context-menu {\n  &__row {\n    @include rmd-utils-hide-focus-outline;\n\n    @include rmd-utils-keyboard-only {\n      &:focus {\n        @include rmd-states-theme(box-shadow, focus-shadow);\n      }\n    }\n  }\n}\n",
    "isBinary": false
  },
  "src/data.ts": {
    "content": "import createIdGenerator from \"./createIdGenerator\";\n\nexport interface DriveContent {\n  id: string;\n  name: string;\n  owner: string;\n  lastModified: string;\n}\n\nexport interface DriveFolder extends DriveContent {\n  type: \"folder\";\n}\n\nexport interface DriveMedia extends DriveContent {\n  size: number;\n}\n\nexport interface DriveImage extends DriveMedia {\n  type: \"image\";\n}\n\nexport interface DriveVideo extends DriveMedia {\n  type: \"video\";\n}\n\nexport type DriveContentItem = DriveFolder | DriveImage | DriveVideo;\n\nexport const uuid = createIdGenerator(\"drive-content\");\n\nexport const createFolder = (\n  name: string,\n  lastModified: Date\n): DriveFolder => ({\n  id: uuid(),\n  type: \"folder\",\n  owner: \"me\",\n  name,\n  lastModified: lastModified.toISOString(),\n});\n\nexport const createMedia = (\n  name: string,\n  lastModified: Date,\n  size: number,\n  type: \"image\" | \"video\"\n): DriveImage | DriveVideo => ({\n  id: uuid(),\n  name,\n  size,\n  type,\n  owner: \"me\",\n  lastModified: lastModified.toISOString(),\n});\n\nexport const contents: DriveContentItem[] = [\n  createFolder(\"Documents\", new Date(2020, 0, 3, 8)),\n  createFolder(\"My Pictures\", new Date(2019, 11, 29)),\n  createMedia(\"Amazing Picture.jpg\", new Date(2019, 11, 29), 32423, \"image\"),\n  createMedia(\"Look_at_This.png\", new Date(2019, 11, 20, 3, 2), 2343, \"image\"),\n  createMedia(\"Some band live.mov\", new Date(2019, 11, 29), 90823490, \"video\"),\n  createMedia(\"My Movie.mp4\", new Date(2019, 11, 29), 90823490, \"video\"),\n];\n",
    "isBinary": false
  },
  "src/createIdGenerator.ts": {
    "content": "/**\n * An extremely simplified uuid function that is scoped with a speciifc prefix. This\n * will just always increment the total count at the end of the prefix.\n *\n * ```ts\n * const uuid = createIdGenerator(\"my-custom-prefix\");\n *\n * uuid(); // my-custom-prefix-0\n * uuid(); // my-custom-prefix-1\n * uuid(); // my-custom-prefix-2\n * ```\n *\n * @param prefix The string prefix to use\n * @return a function to call to generate a \"uuid\"\n */\nexport default function createIdGenerator(prefix: string): () => string {\n  const generator = (function* idGenerator() {\n    let index = 0;\n    while (true) {\n      yield `${prefix}-${index}`;\n      index += 1;\n    }\n  })();\n\n  return () => generator.next().value;\n}\n",
    "isBinary": false
  }
}
