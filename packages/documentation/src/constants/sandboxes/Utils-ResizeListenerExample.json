{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/react-md@next/dist/css/react-md.teal-pink-200-light.min.css\"\n    />\n    <title>Utils Example - Resize Listener Example</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import 'variables';\n@import '~@react-md/form/dist/mixins';\n@import '~@react-md/layout/dist/mixins';\n@import '~@react-md/states/dist/mixins';\n@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/typography/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "src/_variables.scss": {
    "content": "@import '~@react-md/theme/dist/color-palette';\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": "Utils Example - Resize Listener Example",
      "description": "Example from https://react-md.dev/packages/utils/demos#resize-listener-example",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/form": "next",
        "@react-md/layout": "next",
        "@react-md/states": "next",
        "@react-md/theme": "next",
        "@react-md/typography": "next",
        "@react-md/utils": "next",
        "classnames": "latest",
        "marked": "latest",
        "prismjs": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "import React, { FC, Fragment, useState } from \"react\";\nimport { Checkbox, useCheckboxState } from \"@react-md/form\";\nimport { Text } from \"@react-md/typography\";\nimport { ResizeListener } from \"@react-md/utils\";\n\nimport CodeBlock from \"./CodeBlock\";\n\nconst Demo: FC = () => {\n  const [size, setSize] = useState(() => {\n    if (typeof window !== \"undefined\") {\n      return window.innerWidth;\n    }\n\n    return 0;\n  });\n\n  const [enabled, handleEnabledChange] = useCheckboxState(true);\n  const [immediate, handleImmediateChange] = useCheckboxState(true);\n\n  return (\n    <Fragment>\n      <Checkbox\n        id=\"resize-enabled\"\n        name=\"resizeOptions\"\n        checked={enabled}\n        onChange={handleEnabledChange}\n        label=\"Enable Listener\"\n      />\n      <Checkbox\n        id=\"toggle-resize-listener\"\n        name=\"resizeOptions\"\n        checked={immediate}\n        onChange={handleImmediateChange}\n        label=\"Invoke on mount\"\n      />\n      {enabled && (\n        <ResizeListener\n          immediate={immediate}\n          onResize={() => setSize(window.innerWidth)}\n        />\n      )}\n      <Text>The current app size is:</Text>\n      <CodeBlock>{size}px</CodeBlock>\n    </Fragment>\n  );\n};\n\nexport default Demo;\n",
    "isBinary": false
  },
  "src/Code/Code.tsx": {
    "content": "import React, { FC, forwardRef, HTMLAttributes, ReactNode } from \"react\";\nimport cn from \"classnames\";\nimport { WithForwardedRef } from \"@react-md/utils\";\n\nexport interface CodeProps extends HTMLAttributes<HTMLElement> {\n  className?: string;\n  children: ReactNode;\n  inline?: boolean;\n}\n\nconst Code: FC<CodeProps & WithForwardedRef<HTMLElement>> = ({\n  children,\n  inline,\n  className,\n  forwardedRef,\n  ...props\n}) => (\n  <code\n    {...props}\n    ref={forwardedRef}\n    className={cn(\"code\", { \"code--inline\": inline }, className)}\n  >\n    {children}\n  </code>\n);\n\nCode.defaultProps = {\n  inline: true,\n};\n\nexport default forwardRef<HTMLElement, CodeProps>((props, ref) => (\n  <Code {...props} forwardedRef={ref} />\n));\n",
    "isBinary": false
  },
  "src/Code/CodeBlock.tsx": {
    "content": "/* eslint-disable react/no-danger */\nimport React, { forwardRef, FC, ReactNode, useMemo } from \"react\";\nimport cn from \"classnames\";\nimport { bem, WithForwardedRef } from \"@react-md/utils\";\n\nimport { highlightCode } from \"./utils\";\n\nimport Code from \"./Code\";\nimport LineNumbers from \"./LineNumbers\";\n\nexport interface CodeBlockProps {\n  className?: string;\n  language?: string;\n  children: ReactNode;\n  highlight?: boolean;\n  lineNumbers?: boolean;\n}\n\ntype WithRef = WithForwardedRef<HTMLPreElement>;\ntype DefaultProps = Required<\n  Pick<CodeBlockProps, \"language\" | \"highlight\" | \"lineNumbers\">\n>;\ntype WithDefaultProps = CodeBlockProps & DefaultProps & WithRef;\n\nconst block = bem(\"code\");\n\nconst CodeBlock: FC<CodeBlockProps & WithRef> = props => {\n  const {\n    className,\n    language,\n    children: propChildren,\n    highlight,\n    forwardedRef,\n    lineNumbers,\n  } = props as WithDefaultProps;\n\n  const children = useMemo(() => {\n    if (!highlight || typeof propChildren !== \"string\") {\n      return <Code inline={false}>{propChildren}</Code>;\n    }\n\n    return (\n      <code\n        className={block()}\n        dangerouslySetInnerHTML={{\n          __html: highlightCode(propChildren, language),\n        }}\n      />\n    );\n  }, [propChildren, highlight, language]);\n\n  return (\n    <pre\n      ref={forwardedRef}\n      className={cn(\n        block({ block: true, counted: lineNumbers }),\n        `language-${language}`,\n        className\n      )}\n    >\n      {typeof propChildren === \"string\" && (\n        <LineNumbers enabled={lineNumbers} code={propChildren} />\n      )}\n      {children}\n    </pre>\n  );\n};\n\nconst defaultProps: DefaultProps = {\n  highlight: true,\n  lineNumbers: false,\n  language: \"markdown\",\n};\n\nCodeBlock.defaultProps = defaultProps;\n\nexport default forwardRef<HTMLPreElement, CodeBlockProps>((props, ref) => (\n  <CodeBlock {...props} forwardedRef={ref} />\n));\n",
    "isBinary": false
  },
  "src/Code/LineNumbers.tsx": {
    "content": "/* eslint-disable react/no-array-index-key */\nimport React, { FC } from \"react\";\nimport { bem } from \"@react-md/utils\";\n\nexport interface LineNumbersProps {\n  code: string;\n  enabled: boolean;\n}\n\nconst block = bem(\"code\");\n\nconst LineNumbers: FC<LineNumbersProps> = ({ code, enabled }) => {\n  if (!enabled) {\n    return null;\n  }\n\n  const lines = (code.match(/\\r?\\n/g) || []).length;\n\n  return (\n    <span className={block(\"lines\")}>\n      {Array.from(new Array(lines)).map((_, i) => (\n        <span key={i} className={block(\"line-number\")}>\n          {i + 1}\n        </span>\n      ))}\n    </span>\n  );\n};\n\nexport default LineNumbers;\n",
    "isBinary": false
  },
  "src/Code/code.scss": {
    "content": "@import '../variables';\n@import '~@react-md/theme/dist/variables';\n@import '~@react-md/typography/dist/mixins';\n\n$code-light-theme-bg: $rmd-grey-200;\n$code-dark-theme-bg: #171717;\n$solarized-base-03: #002b36;\n$solarized-base-02: #073642;\n$solarized-base-01: #586e75;\n$solarized-base-00: #657b83;\n$solarized-base-0: #839496;\n$solarized-base-1: #93a1a1;\n$solarized-base-2: #eee8d5;\n$solarized-base-3: #fdf6e3;\n\n$solarized-yellow: #b58900;\n$solarized-orange: #cb4b16;\n$solarized-red: #d30102;\n$solarized-magenta: #d33682;\n$solarized-violet: #6c71c4;\n$solarized-blue: #268bd2;\n$solarized-cyan: #2aa198;\n$solarized-green: #859900;\n\n:root {\n  #{--code-bg}: #{$code-light-theme-bg};\n}\n\n.code {\n  @include rmd-typography(body-1);\n\n  font-family: 'Source Code Pro', Consolas, Monaco, monospace;\n\n  &::selection,\n  *::selection {\n    background-color: $solarized-base-02;\n  }\n\n  &--block {\n    background-color: $solarized-base-03;\n    color: $solarized-base-1;\n\n    // always enforce ltr for blocked code\n    direction: ltr;\n    margin: 0.5em 0;\n    overflow: auto;\n    padding: 1em;\n  }\n\n  &--inline {\n    background-color: var(--code-bg);\n    border-radius: 0.25rem;\n    font-size: 0.9em;\n    padding: 0.1em 0.4em;\n    white-space: pre-wrap;\n  }\n\n  &--counted {\n    padding-left: 3em;\n    position: relative;\n  }\n\n  &__lines {\n    border-right: 1px solid $solarized-base-01;\n    display: flex;\n    flex-direction: column;\n    left: 0;\n    padding-right: 0.25em;\n    pointer-events: none;\n    position: absolute;\n    text-align: right;\n    width: 2.5em;\n  }\n}\n\n// prismjs custom theme\n// this is _basically_ my current vim theme, but not aas good since\n// Prism doesn't have as many tokenizers\n.token {\n  position: relative;\n  z-index: 1;\n\n  &.comment,\n  &.doctype {\n    color: $solarized-base-01;\n  }\n\n  &.keyword {\n    color: $solarized-green;\n  }\n\n  &.punctuation {\n    color: $solarized-base-01;\n  }\n\n  &.inserted,\n  &.string,\n  .language-tsx &.attr-value {\n    color: $solarized-cyan;\n  }\n\n  &.tag,\n  &.selector,\n  &.class-name,\n  // fixes mixins/functions\n  .language-scss &.function,\n  // fixes variables\n  .language-scss &.variable {\n    color: $solarized-blue;\n  }\n\n  &.attr-name,\n  &.property,\n  &.builtin {\n    color: $solarized-yellow;\n  }\n\n  &.script,\n  &.interpolation,\n  // to fix interfaces\n  .language-ts &.keyword + .class-name,\n  .language-tsx &.keyword + .class-name {\n    color: $solarized-base-1;\n  }\n\n  // fixes property colors\n  .language-scss &.keyword,\n  // for npm install\n  .language-shell &.function {\n    color: $solarized-orange;\n  }\n\n  &.deleted,\n  &.boolean,\n  &.number,\n  &.interpolation-punctuation {\n    color: $solarized-red;\n  }\n\n  &.important,\n  &.bold {\n    font-weight: map-get($rmd-typography-font-weights, bold);\n  }\n\n  &.italic {\n    font-style: italic;\n  }\n\n  &.entity {\n    cursor: help;\n  }\n}\n",
    "isBinary": false
  },
  "src/Code/index.ts": {
    "content": "import \"./code.scss\";\nexport { default } from \"./Code\";\n",
    "isBinary": false
  },
  "src/Markdown/utils.ts": {
    "content": "import Prism from \"prismjs\";\nimport * as marked from \"marked\";\nimport cn from \"classnames\";\n\nimport { GITHUB_URL } from \"./github\";\nimport { DEMOABLE_PACKAGES, PACKAGE_NAMES } from \"./packages\";\n\nexport function getLanguage(language: string): string {\n  switch (language) {\n    case \"\":\n    case \"markdown\":\n      return \"markup\";\n    case \"sh\":\n      return \"shell\";\n    default:\n      return language;\n  }\n}\n\nexport function highlightCode(code: string, lang: string = \"\"): string {\n  const language = getLanguage(lang);\n  try {\n    return Prism.highlight(code, Prism.languages[language], language);\n  } catch (e) {\n    if (process.env.NODE_ENV === \"development\") {\n      /* eslint-disable no-console */\n      console.error(\n        `Error trying to parse code with the following language: '${lang}' as '${language}'`\n      );\n      console.error(e);\n    }\n\n    return \"\";\n  }\n}\n\n/**\n * The custom markdown renderer. This just adds some additional styles to\n * existing elements, and does some fun stuff with code blocks.\n */\nconst renderer = new marked.Renderer();\n\nrenderer.code = (rawCode, language) => {\n  language = getLanguage(language || \"\");\n  const code = highlightCode(rawCode, language);\n  const lines = (rawCode.match(/\\r?\\n/g) || []).length + 1;\n  let lineNumbers = \"\";\n  if (lines > 3 && !/markup|shell/.test(language) && language) {\n    lineNumbers = Array.from(new Array(lines))\n      .map((_, i) => `<span class=\"code__line-number\">${i + 1}</span>`)\n      .join(\"\");\n    lineNumbers = `<span class=\"code__lines\">${lineNumbers}</span>`;\n  }\n\n  const className = cn(\n    \"code code--block\",\n    {\n      \"code--counted\": lineNumbers,\n    },\n    `language-${language}`\n  );\n  return `<pre class=\"${className}\">${lineNumbers}<code class=\"code\">${code}</code></pre>`;\n};\n\nrenderer.codespan = code => `<code class=\"code code--inline\">${code}</code>`;\n\nrenderer.heading = (text, level, _raw, slugger) => {\n  // if it is over 60 characters, it is probably not really a title\n  const isNoMargin = text.includes(\"<!-- no-margin -->\");\n  const isNoMarginBottom = text.includes(\"<!-- no-margin-bottom -->\");\n  const isForcedHeading = text.includes(\"<!-- force-heading -->\");\n  // replace comments since they will be slugged :/\n  text = text.replace(/<!-- ([A-z]+(-[A-z]+)*) -->/g, \"\");\n\n  const isValidHeading = isForcedHeading || (text.length <= 60 && !isNoMargin);\n  // `'t` gets slugged as 39t\n  const id = slugger.slug(text).replace(/39t/g, \"t\");\n  const className = cn(`rmd-typography rmd-typography--headline-${level}`, {\n    heading: isValidHeading,\n    // eslint-disable-next-line @typescript-eslint/camelcase\n    heading__toc: text.includes(\"Table of Contents\"),\n    \"rmd-typography--no-margin\": isNoMargin,\n    \"rmd-typography--no-margin-bottom\": isNoMarginBottom,\n  });\n\n  return `<h${level} id=\"${id}\" class=\"${className}\">\n  ${isValidHeading ? `<a href=\"#${id}\" class=\"heading__link\">#</a>` : \"\"}\n  ${text}\n</h${level}>`;\n};\n\nrenderer.blockquote = quote =>\n  `<blockquote class=\"blockquote\">${quote}</blockquote>`;\n\nrenderer.link = (href, title, text) => {\n  title = title ? ` title=\"${title}\"` : \"\";\n\n  return `<a class=\"rmd-link\" href=\"${href}\"${title}>${text}</a>`;\n};\n\nrenderer.paragraph = (text: string) => `<p class=\"markdown__p\">${text}</p>`;\n\n// ///////////////////////////////////////////////////\n// MARKDOWN TRANSFORMATIONS\n\ntype Transform = (markdown: string) => string;\nconst joinedNames = PACKAGE_NAMES.join(\"|\");\nconst packagesList = `\n${PACKAGE_NAMES.map(\n  name => `- [@react-md/${name}](/packages/${name}/installation)`\n).join(\"\\n\")}\n`;\nconst whitespace = \"(?=\\r?\\n| |[^/])\";\n\nconst transforms: Transform[] = [\n  // #package-name -> [@react-md/package-name](/packages/package-name/demos|installation)\n  md =>\n    md.replace(\n      new RegExp(`#(${joinedNames})${whitespace}`, \"g\"),\n      (_, pkg) =>\n        `[@react-md/${pkg}](/packages/${pkg}/${\n          DEMOABLE_PACKAGES.includes(pkg) ? \"demos\" : \"installation\"\n        })`\n    ),\n  // #package-name -> [package-name page](/packages/package-name/page)\n  md =>\n    md.replace(\n      new RegExp(`#(${joinedNames})/(demos|api|sassdoc)`, \"g\"),\n      \"[$1 $2](/packages/$1/$2)\"\n    ),\n  // #packages -> markdown list for all react-md packages\n  md =>\n    md.replace(/#packages(\\/demos)?/g, (_, demos) => {\n      if (demos) {\n        return packagesList.replace(\n          /^(?!layout)(.+)\\/installation/g,\n          \"$1/demos\"\n        );\n      }\n\n      return packagesList;\n    }),\n  // create links to github issues/PRs with #ISSUE_NUMBER\n  // the regex below tries to make sure that hex codes aren't switched to links\n  md =>\n    md.replace(\n      /(: )?(#)(\\d+)(?=\\r?\\n| (?!!))/g,\n      (match, invalid, _hash, ticket) => {\n        if (invalid) {\n          return match;\n        }\n\n        return `[#${ticket}](${GITHUB_URL}/issues/${ticket})`;\n      }\n    ),\n  // create github commit links for git sha's of length 7 (should be first 7 of sha)\n  md => md.replace(/(\\b[0-9a-f]{7}\\b)/g, `[$1](${GITHUB_URL}/commit/$1)`),\n  md => md.replace(/(:tada:)/g, \"🎉\"),\n  md =>\n    md.replace(\n      /#customizing-your-theme/g,\n      \"[customizing your theme](/guides/customizing-your-theme)\"\n    ),\n];\n\nrenderer.image = (href, title, alt) => {\n  return (\n    `<a href=\"${href}\">` +\n    '<div class=\"rmd-media-container rmd-media-container--auto\">' +\n    `<img src=\"${href}\" alt=\"${alt}\" title=\"${title || alt}\" />` +\n    \"</div>\" +\n    \"</a>\"\n  );\n};\n\nrenderer.list = (body, ordered) => {\n  const tag = ordered ? \"ol\" : \"ul\";\n  return `<${tag} class=\"markdown__list\">${body}</${tag}>`;\n};\n\nconst transform = (markdown: string): string =>\n  transforms.reduce((updated, fn) => fn(updated), markdown);\n\nexport function markdownToHTML(markdown: string): string {\n  return marked.parse(transform(markdown), { renderer });\n}\n",
    "isBinary": false
  },
  "src/github.ts": {
    "content": "export const { COMMIT_SHA } = process.env;\n\nexport const GITHUB_URL = \"https://github.com/mlaursen/react-md\";\nexport const GITHUB_FILE_URL = `${GITHUB_URL}/blob/${COMMIT_SHA}`;\nexport const GITHUB_DOC_PREFIX = `${GITHUB_FILE_URL}/packages/documentation`;\nexport const GITHUB_DEMO_URL = `${GITHUB_DOC_PREFIX}/src/components/Demos`;\n",
    "isBinary": false
  },
  "src/packages.ts": {
    "content": "/** this file is generated from `yarn dev-utils docConstants` and should not be updated manually */\n\nexport const PACKAGE_NAMES = [\n  \"alert\",\n  \"app-bar\",\n  \"autocomplete\",\n  \"avatar\",\n  \"badge\",\n  \"button\",\n  \"card\",\n  \"chip\",\n  \"dialog\",\n  \"divider\",\n  \"elevation\",\n  \"form\",\n  \"icon\",\n  \"layout\",\n  \"link\",\n  \"list\",\n  \"material-icons\",\n  \"media\",\n  \"menu\",\n  \"overlay\",\n  \"portal\",\n  \"progress\",\n  \"sheet\",\n  \"states\",\n  \"table\",\n  \"tabs\",\n  \"theme\",\n  \"tooltip\",\n  \"transition\",\n  \"tree\",\n  \"typography\",\n  \"utils\",\n];\n\nexport const TYPESCRIPT_PACKAGES = PACKAGE_NAMES.filter(\n  name => !/elevation|theme/.test(name)\n);\n\nexport const SCSS_PACKAGES = PACKAGE_NAMES.filter(\n  name => !/autocomplete|material-icons|portal/.test(name)\n);\n\nexport const DEMOABLE_PACKAGES = PACKAGE_NAMES.filter(\n  name => !/layout/.test(name)\n);\n",
    "isBinary": false
  }
}
