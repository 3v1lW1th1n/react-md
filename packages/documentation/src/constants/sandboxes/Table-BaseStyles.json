{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/react-md@next/dist/css/react-md.teal-pink-200-light.min.css\"\n    />\n    <title>Table Example - Base Styles</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import 'variables';\n@import '~@react-md/layout/dist/mixins';\n@import '~@react-md/states/dist/mixins';\n@import '~@react-md/table/dist/mixins';\n@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/typography/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "src/_variables.scss": {
    "content": "@import '~@react-md/theme/dist/color-palette';\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": "Table Example - Base Styles",
      "description": "Example from https://react-md.dev/packages/table/demos#base-styles",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/layout": "next",
        "@react-md/states": "next",
        "@react-md/table": "next",
        "@react-md/theme": "next",
        "@react-md/typography": "next",
        "@react-md/utils": "next",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "import React, { FC, Fragment } from \"react\";\nimport {\n  Caption,\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n} from \"@react-md/table\";\nimport { Text, TextContainer } from \"@react-md/typography\";\n\nimport contacts from \"./contacts\";\n\nconst list = contacts.slice(0, 4);\n\nconst BaseConfiguration: FC = () => (\n  <Fragment>\n    <TextContainer>\n      <Text type=\"subtitle-2\">Default styles</Text>\n    </TextContainer>\n    <Table>\n      <Caption>Contacts</Caption>\n      <TableHeader>\n        <TableRow>\n          <TableCell>Name</TableCell>\n          <TableCell>Phone</TableCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {list.map(({ name, phone }) => (\n          <TableRow key={name} colSpan={2}>\n            <TableCell>{name}</TableCell>\n            <TableCell>{phone}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n    <TextContainer>\n      <Text type=\"subtitle-2\">No hover styles</Text>\n    </TextContainer>\n    <Table hoverable={false}>\n      <Caption>Contacts</Caption>\n      <TableHeader>\n        <TableRow>\n          <TableCell>Name</TableCell>\n          <TableCell>Phone</TableCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {list.map(({ name, phone }) => (\n          <TableRow key={name} colSpan={2}>\n            <TableCell>{name}</TableCell>\n            <TableCell>{phone}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n    <TextContainer>\n      <Text type=\"subtitle-2\">No border styles</Text>\n    </TextContainer>\n    <Table bordered={false}>\n      <Caption>Contacts</Caption>\n      <TableHeader>\n        <TableRow>\n          <TableCell>Name</TableCell>\n          <TableCell>Phone</TableCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {list.map(({ name, phone }) => (\n          <TableRow key={name} colSpan={2}>\n            <TableCell>{name}</TableCell>\n            <TableCell>{phone}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n    <TextContainer>\n      <Text type=\"subtitle-2\">Less Padding</Text>\n    </TextContainer>\n    <Table extraPadding={false}>\n      <Caption>Contacts</Caption>\n      <TableHeader>\n        <TableRow>\n          <TableCell>Name</TableCell>\n          <TableCell>Phone</TableCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {list.map(({ name, phone }) => (\n          <TableRow key={name} colSpan={2}>\n            <TableCell>{name}</TableCell>\n            <TableCell>{phone}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n    <TextContainer>\n      <Text type=\"subtitle-2\">Dense</Text>\n    </TextContainer>\n    <Table dense>\n      <Caption>Contacts</Caption>\n      <TableHeader>\n        <TableRow>\n          <TableCell>Name</TableCell>\n          <TableCell>Phone</TableCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {list.map(({ name, phone }) => (\n          <TableRow key={name} colSpan={2}>\n            <TableCell>{name}</TableCell>\n            <TableCell>{phone}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  </Fragment>\n);\n\nexport default BaseConfiguration;\n",
    "isBinary": false
  },
  "src/contacts.ts": {
    "content": "import people from \"./people\";\n\nconst mod = (x: number): number => Math.floor(x % 9);\n\ninterface Contact {\n  name: string;\n  phone: string;\n}\n\n// you can ignore this as this is just a bad way of making fake phone numbers\nconst contacts: readonly Contact[] = people.map((person, i) => {\n  const [firstName, lastName] = person.split(\" \");\n  const l1 = firstName.length;\n  const l2 = lastName.length;\n\n  const areaCode = `(${mod((l1 + l2) / 4)}${i % 5}${i % 8})`;\n  const prefix = `${i % 3}${mod(l1)}${mod(l2)}`;\n  const suffix = `${mod(l1 / 2)}${mod(l2 / 4)}${mod(l1 + l2 / 7)}${mod(\n    l1 / 2 + l2 / 4\n  )}`;\n  const phone = `${areaCode} - ${prefix}-${suffix}`;\n  return {\n    name: person,\n    phone,\n  };\n});\n\nexport default contacts;\n",
    "isBinary": false
  },
  "src/people.ts": {
    "content": "export default [\n  \"Jasmine Robinson\",\n  \"Devonte Craig\",\n  \"Dean Reid\",\n  \"Shaquille Bauer\",\n  \"Vivian Bishop\",\n  \"Braden Mullins\",\n  \"Katlyn Mcdonald\",\n  \"Isabella Marshall\",\n  \"Lee Christensen\",\n  \"Tommy Hogan\",\n  \"Timothy Harvey\",\n  \"Preston Phillips\",\n  \"Marco Sherman\",\n  \"Haley Coleman\",\n  \"Mario Swanson\",\n  \"Xavier Solis\",\n  \"Keaton Cannon\",\n  \"Cassandra Austin\",\n  \"Irene Holland\",\n  \"Gustavo Love\",\n  \"Meghan Stewart\",\n  \"Renee Townsend\",\n  \"Bobby Newman\",\n  \"Keaton Ortiz\",\n  \"Dustin Wells\",\n  \"Jerry Mcgee\",\n  \"Carl Howard\",\n  \"Sabrina Lang\",\n  \"Reed Baker\",\n  \"Kristen Fields\",\n  \"Gavin Carrillo\",\n  \"Claudia Neal\",\n  \"Leonard Schneider\",\n  \"Dominick Boyd\",\n  \"Mary Hampton\",\n  \"Mark Ayala\",\n  \"Kristina Warner\",\n  \"Antonio Walton\",\n  \"Tyson Scott\",\n  \"Harley Moss\",\n] as const;\n",
    "isBinary": false
  }
}
