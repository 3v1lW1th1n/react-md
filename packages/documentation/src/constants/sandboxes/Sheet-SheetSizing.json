{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <title>Sheet Example - Sheet Sizing</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { StatesConfig, InteractionModeListener } from \"@react-md/states\";\n\nimport \"./styles.scss\";\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <InteractionModeListener>\n    <StatesConfig>\n      <Demo />\n    </StatesConfig>\n  </InteractionModeListener>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import 'variables';\n@import '~@react-md/app-bar/dist/mixins';\n@import '~@react-md/button/dist/mixins';\n@import '~@react-md/dialog/dist/mixins';\n@import '~@react-md/elevation/dist/mixins';\n@import '~@react-md/form/dist/mixins';\n@import '~@react-md/icon/dist/mixins';\n@import '~@react-md/list/dist/mixins';\n@import '~@react-md/sheet/dist/mixins';\n@import '~@react-md/states/dist/mixins';\n@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/typography/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "src/_variables.scss": {
    "content": "@import '~@react-md/theme/dist/color-palette';\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": "Sheet Example - Sheet Sizing",
      "description": "Example from https://react-md.dev/packages/sheet/demos#sheet-sizing",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/app-bar": "next",
        "@react-md/button": "next",
        "@react-md/dialog": "next",
        "@react-md/elevation": "next",
        "@react-md/form": "next",
        "@react-md/icon": "next",
        "@react-md/list": "next",
        "@react-md/material-icons": "next",
        "@react-md/sheet": "next",
        "@react-md/states": "next",
        "@react-md/theme": "next",
        "@react-md/typography": "next",
        "@react-md/utils": "next",
        "classnames": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  ".env": {
    "content": "SASS_PATH=node_modules:src\n",
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "import React, { FC, useState } from \"react\";\nimport { AppBar, AppBarAction } from \"@react-md/app-bar\";\nimport { Button } from \"@react-md/button\";\nimport { DialogContent } from \"@react-md/dialog\";\nimport { Fieldset, Form, Select, useSelectState } from \"@react-md/form\";\nimport { List, ListItem } from \"@react-md/list\";\nimport { ArrowDropDownSVGIcon, CloseSVGIcon } from \"@react-md/material-icons\";\nimport {\n  Sheet,\n  SheetHorizontalSize,\n  SheetPosition,\n  SheetVerticalSize,\n} from \"@react-md/sheet\";\nimport { GridList, useAppSize, useToggle } from \"@react-md/utils\";\n\nimport Checkbox from \"components/Checkbox\";\nimport ConditionalPhone from \"components/Phone/ConditionalPhone\";\n\nconst positions: SheetPosition[] = [\"top\", \"right\", \"bottom\", \"left\"];\nconst horizontalSizes: SheetHorizontalSize[] = [\n  \"none\",\n  \"touch\",\n  \"static\",\n  \"media\",\n];\nconst verticalSizes: SheetVerticalSize[] = [\"none\", \"touch\", \"recommended\"];\n\nconst Demo: FC = () => {\n  const [visible, show, hide] = useToggle(false);\n  const [position, setPosition] = useSelectState<SheetPosition>(\"left\");\n  const [horizontalSize, setHorizontalSize] = useSelectState<\n    SheetHorizontalSize\n  >(\"media\");\n  const [verticalSize, setVerticalSize] = useSelectState<SheetVerticalSize>(\n    \"recommended\"\n  );\n\n  const isHorizontal = position === \"left\" || position === \"right\";\n  const [emulate, setEmulate] = useState(false);\n  const { isDesktop } = useAppSize();\n\n  if (emulate && !isDesktop) {\n    setEmulate(false);\n  }\n\n  return (\n    <Form>\n      <Fieldset legend=\"Position Options\" disableLegendSROnly>\n        <GridList clone maxCellSize={300}>\n          <Select\n            id=\"sheet-sizing-position\"\n            label=\"Position\"\n            options={positions}\n            value={position}\n            onChange={setPosition}\n            rightChildren={<ArrowDropDownSVGIcon />}\n          />\n          <Select\n            id=\"sheet-sizing-horizontal\"\n            label=\"Horizontal Size\"\n            options={horizontalSizes}\n            value={horizontalSize}\n            onChange={setHorizontalSize}\n            disabled={!isHorizontal}\n            rightChildren={<ArrowDropDownSVGIcon />}\n          />\n          <Select\n            id=\"sheet-sizing-vertical\"\n            label=\"Vertical Size\"\n            options={verticalSizes}\n            value={verticalSize}\n            onChange={setVerticalSize}\n            disabled={isHorizontal}\n            rightChildren={<ArrowDropDownSVGIcon />}\n          />\n          {isDesktop && (\n            <Checkbox\n              id=\"sheet-sizing-emulate\"\n              checked={emulate}\n              onChange={() => setEmulate(!emulate)}\n              label=\"Emulate?\"\n            />\n          )}\n        </GridList>\n      </Fieldset>\n      <Button\n        id=\"sheet-sizing-toggle\"\n        onClick={show}\n        type=\"submit\"\n        theme=\"secondary\"\n        themeType=\"contained\"\n      >\n        Show\n      </Button>\n      <ConditionalPhone id=\"example-sheet\" enabled={emulate}>\n        <Sheet\n          id=\"example-sheet\"\n          aria-label=\"Example Sheet\"\n          position={position}\n          horizontalSize={horizontalSize}\n          verticalSize={verticalSize}\n          visible={visible}\n          onRequestClose={hide}\n          portalIntoId={emulate ? \"example-sheet-content\" : undefined}\n          disableScrollLock={emulate}\n        >\n          <AppBar theme=\"clear\">\n            <AppBarAction first={position !== \"right\"} last onClick={hide}>\n              <CloseSVGIcon />\n            </AppBarAction>\n          </AppBar>\n          <DialogContent>\n            <List>\n              {Array.from(new Array(10), (_, i) => (\n                <ListItem id={`example-sheet-item-${i + 1}`} key={i}>\n                  {`Item ${i + 1}`}\n                </ListItem>\n              ))}\n            </List>\n          </DialogContent>\n        </Sheet>\n      </ConditionalPhone>\n    </Form>\n  );\n};\n\nexport default Demo;\n",
    "isBinary": false
  },
  "src/Checkbox.tsx": {
    "content": "import React, { FC, forwardRef } from \"react\";\nimport { Checkbox as CheckboxMD, CheckboxProps } from \"@react-md/form\";\nimport { CheckBoxSVGIcon } from \"@react-md/material-icons\";\nimport { WithForwardedRef } from \"@react-md/utils\";\n\nconst Checkbox: FC<CheckboxProps & WithForwardedRef<HTMLInputElement>> = ({\n  forwardedRef,\n  ...props\n}) => <CheckboxMD {...props} ref={forwardedRef} />;\n\nCheckbox.defaultProps = {\n  icon: <CheckBoxSVGIcon />,\n};\n\nexport default forwardRef<HTMLInputElement, CheckboxProps>((props, ref) => (\n  <Checkbox {...props} forwardedRef={ref} />\n));\n",
    "isBinary": false
  },
  "src/ConditionalFullPageDialog.tsx": {
    "content": "import React, { Fragment, FC, ReactElement, ReactNode } from \"react\";\nimport { AppBar, AppBarAction, AppBarTitle } from \"@react-md/app-bar\";\nimport { Button } from \"@react-md/button\";\nimport { Dialog, DialogContent } from \"@react-md/dialog\";\nimport { TextIconSpacing } from \"@react-md/icon\";\nimport { CloseSVGIcon, LaunchSVGIcon } from \"@react-md/material-icons\";\nimport { Text } from \"@react-md/typography\";\n\nexport interface ConditionalFullPageDialogProps {\n  id: string;\n  title?: ReactNode;\n  children: ReactElement;\n  enable: () => void;\n  disable: () => void;\n  visible: boolean;\n  disabled?: boolean;\n  disableAppBar?: boolean;\n  disableContent?: boolean;\n}\n\ntype DefaultProps = Required<\n  Pick<\n    ConditionalFullPageDialogProps,\n    \"title\" | \"disabled\" | \"disableAppBar\" | \"disableContent\"\n  >\n>;\ntype WithDefaultProps = ConditionalFullPageDialogProps & DefaultProps;\n\nconst ConditionalFullPageDialog: FC<\n  ConditionalFullPageDialogProps\n> = providedProps => {\n  const {\n    id,\n    title,\n    children,\n    enable,\n    disable,\n    visible,\n    disabled,\n    disableAppBar,\n    disableContent,\n  } = providedProps as WithDefaultProps;\n  if (disabled) {\n    return children;\n  }\n\n  return (\n    <Fragment>\n      <Text type=\"headline-6\">\n        This example requires a more screen real estate than what is available\n        so you will need to open it in a full page dialog.\n      </Text>\n      <Button\n        id={`${id}-dialog-toggle`}\n        themeType=\"contained\"\n        onClick={enable}\n        theme=\"primary\"\n      >\n        <TextIconSpacing icon={<LaunchSVGIcon />}>Launch</TextIconSpacing>\n      </Button>\n      <Dialog\n        id={`${id}-dialog`}\n        aria-labelledby={`${id}-dialog-title`}\n        visible={visible}\n        onRequestClose={disable}\n        type=\"full-page\"\n      >\n        {!disableAppBar && (\n          <AppBar>\n            <AppBarTitle keyline id={`${id}-dialog-title`}>\n              {title}\n            </AppBarTitle>\n            <AppBarAction first aria-label=\"Close\" onClick={disable}>\n              <CloseSVGIcon />\n            </AppBarAction>\n          </AppBar>\n        )}\n        {disableContent ? (\n          children\n        ) : (\n          <DialogContent disablePadding>{children}</DialogContent>\n        )}\n      </Dialog>\n    </Fragment>\n  );\n};\n\nconst defaultProps: DefaultProps = {\n  title: \"Full Page Demo\",\n  disabled: false,\n  disableAppBar: false,\n  disableContent: false,\n};\n\nConditionalFullPageDialog.defaultProps = defaultProps;\n\nexport default ConditionalFullPageDialog;\n",
    "isBinary": false
  },
  "src/Phone/ClosePhone.tsx": {
    "content": "import React, { FC, useCallback } from \"react\";\nimport cn from \"classnames\";\nimport { AppBarNav, AppBarNavProps } from \"@react-md/app-bar\";\nimport {\n  KeyboardArrowLeftSVGIcon,\n  CloseSVGIcon,\n} from \"@react-md/material-icons\";\nimport { bem } from \"@react-md/utils\";\n\nimport { usePhoneContext } from \"./context\";\n\nconst block = bem(\"phone\");\n\ninterface Props extends AppBarNavProps {\n  floating?: boolean;\n}\n\nconst ClosePhone: FC<Props> = ({\n  children,\n  onClick,\n  floating,\n  className,\n  ...props\n}) => {\n  const { id, closePhone } = usePhoneContext();\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (onClick) {\n        onClick(event);\n      }\n\n      closePhone();\n    },\n    [onClick, closePhone]\n  );\n\n  return (\n    <AppBarNav\n      {...props}\n      id={`${id}-close`}\n      onClick={handleClick}\n      theme={floating ? \"secondary\" : undefined}\n      themeType={floating ? \"contained\" : undefined}\n      className={cn(block(\"close\", { floating }), className)}\n    >\n      {floating ? <CloseSVGIcon /> : children}\n    </AppBarNav>\n  );\n};\n\nClosePhone.defaultProps = {\n  \"aria-label\": \"Go back\",\n  children: <KeyboardArrowLeftSVGIcon />,\n  floating: false,\n};\n\nexport default ClosePhone;\n",
    "isBinary": false
  },
  "src/Phone/ConditionalPhone.tsx": {
    "content": "import React, { FC, ReactNode, Fragment } from \"react\";\nimport Phone, { PhoneProps } from \"./Phone\";\n\nexport interface ConditionalPhoneProps extends PhoneProps {\n  enabled: boolean;\n  children: ReactNode;\n}\n\nconst ConditionalPhone: FC<ConditionalPhoneProps> = ({\n  enabled,\n  children,\n  ...props\n}) => {\n  if (!enabled) {\n    return <Fragment>{children}</Fragment>;\n  }\n\n  return <Phone {...props}>{children}</Phone>;\n};\n\nexport default ConditionalPhone;\n",
    "isBinary": false
  },
  "src/Phone/DefaultAppBar.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { AppBarTitle, AppBar } from \"@react-md/app-bar\";\n\nimport ClosePhone from \"./ClosePhone\";\nimport { usePhoneContext } from \"./context\";\nimport OptionsAction from \"./OptionsAction\";\nimport PhoneAppBar from \"./PhoneAppBar\";\nimport SearchAction from \"./SearchAction\";\n\nconst DefaultPhoneAppBar: FC = () => {\n  const { title } = usePhoneContext();\n  return (\n    <PhoneAppBar>\n      <AppBar component=\"div\" theme=\"clear\">\n        <ClosePhone />\n        <AppBarTitle>{title}</AppBarTitle>\n        <SearchAction />\n        <OptionsAction />\n      </AppBar>\n    </PhoneAppBar>\n  );\n};\n\nexport default DefaultPhoneAppBar;\n",
    "isBinary": false
  },
  "src/Phone/OptionsAction.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { AppBarAction, AppBarActionProps } from \"@react-md/app-bar\";\nimport { MoreVertSVGIcon } from \"@react-md/material-icons\";\n\nimport { usePhoneContext } from \"./context\";\n\nconst OptionsAction: FC<AppBarActionProps> = ({ children, ...props }) => {\n  const { id } = usePhoneContext();\n  return (\n    <AppBarAction {...props} id={`${id}-options`}>\n      {children}\n    </AppBarAction>\n  );\n};\n\nOptionsAction.defaultProps = {\n  \"aria-label\": \"Options\",\n  children: <MoreVertSVGIcon />,\n  last: true,\n};\n\nexport default OptionsAction;\n",
    "isBinary": false
  },
  "src/Phone/Phone.scss": {
    "content": "@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n@import '~@react-md/elevation/dist/mixins';\n@import '~@react-md/app-bar/dist/mixins';\n@import '~@react-md/icon/dist/mixins';\n@import '~@react-md/typography/dist/mixins';\n@import '~@react-md/sheet/dist/mixins';\n\n$phone-height: 35.5rem;\n$phone-width: 20rem;\n\n$fixed-classes: (\n  rmd-app-bar--fixed: 1,\n  rmd-sheet-overlay: 1,\n  rmd-sheet--raised: 2,\n);\n\n.phone {\n  &--emulated {\n    @include rmd-elevation(4);\n    @include rmd-utils-block-centered(1rem);\n    @include rmd-theme(background-color, background);\n    @include rmd-icon-theme-update-var(size, $rmd-icon-size);\n    @include rmd-app-bar-theme-update-var(\n      dense-height,\n      calc(#{rmd-app-bar-theme-var(height)} + #{rmd-icon-theme-var(size)})\n    );\n    @include rmd-app-bar-theme-update-var(\n      prominent-dense-height,\n      calc(#{rmd-app-bar-theme-var(prominent-height)} + #{rmd-icon-theme-var(size)})\n    );\n    @include rmd-sheet-theme-update-var(touch-width, calc(100% - #{$rmd-sheet-touch-margin}));\n\n    height: $phone-height;\n    overflow: hidden;\n    position: relative;\n    width: $phone-width;\n\n    @each $fixed-class, $z-index in $fixed-classes {\n      .#{$fixed-class} {\n        position: absolute;\n        z-index: $z-index;\n      }\n    }\n\n    .phone__app-bar {\n      // updated the shadow to be bottom only\n      box-shadow: 0 3px 2px -3px rgba($rmd-black-base, 0.2),\n        0 2px 2px -2px rgba($rmd-black-base, 0.14), 0 1px 5px -1px rgba($rmd-black-base, 0.12);\n    }\n  }\n\n  &__app-bar {\n    flex-wrap: wrap;\n  }\n\n  &__status-bar {\n    @include rmd-app-bar-theme-update-var(dense-height, rmd-icon-theme-var(size));\n    background-color: rgba($rmd-black-base, 0.12);\n\n    width: 100%;\n  }\n\n  &__icon {\n    @include rmd-icon-dense-theme;\n\n    margin: 0 $rmd-app-bar-lr-margin;\n\n    &--first {\n      @include rmd-utils-rtl-auto(margin-left, auto, $rmd-app-bar-lr-margin);\n    }\n  }\n\n  &__content {\n    @include rmd-utils-scroll;\n\n    height: 100%;\n  }\n\n  &__close {\n    &--floating {\n      bottom: 1rem;\n      margin: 0;\n      position: fixed;\n      right: 1rem;\n      z-index: 100;\n    }\n  }\n}\n",
    "isBinary": false
  },
  "src/Phone/Phone.tsx": {
    "content": "import React, { FC, ReactNode, useMemo, useCallback } from \"react\";\nimport cn from \"classnames\";\nimport {\n  APP_BAR_OFFSET_DENSE_CLASSNAME,\n  APP_BAR_OFFSET_PROMINENT_DENSE_CLASSNAME,\n} from \"@react-md/app-bar\";\nimport { bem, useAppSize, useToggle } from \"@react-md/utils\";\n\nimport ConditionalFullPageDialog, {\n  ConditionalFullPageDialogProps,\n} from \"components/ConditionalFullPageDialog\";\n\nimport \"./Phone.scss\";\nimport { PhoneContext } from \"./context\";\nimport DefaultAppBar from \"./DefaultAppBar\";\n\nexport interface PhoneProps\n  extends Pick<\n    ConditionalFullPageDialogProps,\n    \"disableAppBar\" | \"disableContent\"\n  > {\n  /**\n   * An id for the phone. This is required for accessibility and quickly linking to things.\n   */\n  id: string;\n\n  /**\n   * An optional app bar to use within the phone. This should normally contain the `ClosePhone`\n   * component so that it can be hidden on mobile devices when the full page dialog is used.\n   */\n  appBar?: ReactNode;\n\n  /**\n   * The title to use for the phone. This will be passed down into the phone context so it can\n   * be grabbed anywhere.\n   */\n  title?: ReactNode;\n\n  /**\n   * The content to display. This will conditionally render in a full page dialog.\n   */\n  children: ReactNode;\n\n  /**\n   * A class name to apply to the fake phone's container element.\n   */\n  className?: string;\n\n  /**\n   * A class name to apply to the fake phone's content element.\n   */\n  contentClassName?: string;\n\n  /**\n   * Boolean if the phone's app bar should be prominent. This is used to add the required offset class names\n   * to the content element.\n   */\n  prominent?: boolean;\n\n  /**\n   * An optional function to call when the dialog is closed. This is useful if the demo should be reset\n   * when the full page dialog is closed.\n   */\n  onPhoneClose?: () => void;\n}\ntype DefaultProps = Required<Pick<PhoneProps, \"appBar\" | \"title\">>;\ntype WithDefaultProps = PhoneProps & DefaultProps;\n\nconst block = bem(\"phone\");\n\nconst Phone: FC<PhoneProps> = props => {\n  const {\n    id,\n    title,\n    children,\n    appBar,\n    className,\n    contentClassName,\n    prominent,\n    disableAppBar,\n    disableContent,\n    onPhoneClose,\n  } = props as WithDefaultProps;\n  const { isPhone } = useAppSize();\n  const [visible, enable, disable] = useToggle(false);\n  const closePhone = useCallback(() => {\n    disable();\n    if (onPhoneClose) {\n      onPhoneClose();\n    }\n  }, [onPhoneClose, disable]);\n\n  if (visible && !isPhone) {\n    closePhone();\n  }\n\n  const value = useMemo(\n    () => ({\n      id,\n      title,\n      closePhone,\n    }),\n    [id, title, closePhone]\n  );\n\n  return (\n    <PhoneContext.Provider value={value}>\n      <ConditionalFullPageDialog\n        id={id}\n        disabled={!isPhone}\n        enable={enable}\n        disable={closePhone}\n        visible={visible}\n        disableAppBar={disableAppBar}\n        disableContent={disableContent}\n      >\n        <div\n          id={`${id}-phone`}\n          className={cn(block({ emulated: !isPhone }), className)}\n        >\n          {appBar}\n          <div\n            id={`${id}-content`}\n            className={cn(\n              block(\"content\"),\n              {\n                [APP_BAR_OFFSET_DENSE_CLASSNAME]: !isPhone,\n                [APP_BAR_OFFSET_PROMINENT_DENSE_CLASSNAME]:\n                  !isPhone && prominent,\n              },\n              contentClassName\n            )}\n          >\n            {children}\n          </div>\n        </div>\n      </ConditionalFullPageDialog>\n    </PhoneContext.Provider>\n  );\n};\n\nconst defaultProps: DefaultProps = {\n  appBar: <DefaultAppBar />,\n  title: \"Example\",\n};\n\nPhone.defaultProps = defaultProps;\n\nexport default Phone;\n",
    "isBinary": false
  },
  "src/Phone/PhoneAppBar.tsx": {
    "content": "import React, { FC } from \"react\";\nimport cn from \"classnames\";\nimport { AppBar, AppBarProps } from \"@react-md/app-bar\";\nimport { bem, useAppSize } from \"@react-md/utils\";\n\nimport { usePhoneContext } from \"./context\";\nimport StatusBar from \"./StatusBar\";\n\nconst block = bem(\"phone\");\n\nconst PhoneAppBar: FC<AppBarProps> = ({ className, children, ...props }) => {\n  const { id } = usePhoneContext();\n  const { isPhone } = useAppSize();\n\n  return (\n    <AppBar\n      {...props}\n      id={`${id}-app-bar`}\n      className={cn(block(\"app-bar\"), className)}\n      fixed\n      fixedElevation={false}\n      dense={!isPhone}\n    >\n      <StatusBar id={id} isPhone={isPhone} />\n      {children}\n    </AppBar>\n  );\n};\n\nPhoneAppBar.defaultProps = {\n  theme: \"default\",\n};\n\nexport default PhoneAppBar;\n",
    "isBinary": false
  },
  "src/Phone/SearchAction.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { AppBarAction, AppBarActionProps } from \"@react-md/app-bar\";\nimport { SearchSVGIcon } from \"@react-md/material-icons\";\n\nimport { usePhoneContext } from \"./context\";\n\nconst SearchAction: FC<AppBarActionProps> = ({ children, ...props }) => {\n  const { id } = usePhoneContext();\n  return (\n    <AppBarAction {...props} id={`${id}-search`}>\n      {children}\n    </AppBarAction>\n  );\n};\n\nSearchAction.defaultProps = {\n  \"aria-label\": \"Search\",\n  children: <SearchSVGIcon />,\n  first: true,\n};\n\nexport default SearchAction;\n",
    "isBinary": false
  },
  "src/Phone/StatusBar.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { AppBar } from \"@react-md/app-bar\";\nimport {\n  NetworkWifiSVGIcon,\n  NetworkCellSVGIcon,\n  BatteryFullSVGIcon,\n} from \"@react-md/material-icons\";\nimport { bem } from \"@react-md/utils\";\n\nexport interface StatusBarProps {\n  id: string;\n  isPhone: boolean;\n}\n\nconst block = bem(\"phone\");\n\nconst StatusBar: FC<StatusBarProps> = ({ id, isPhone }) => {\n  if (isPhone) {\n    return null;\n  }\n\n  return (\n    <AppBar\n      id={`${id}-status-bar`}\n      className={block(\"status-bar\")}\n      dense\n      theme=\"clear\"\n      component=\"div\"\n    >\n      <NetworkWifiSVGIcon\n        role=\"presentation\"\n        className={block(\"icon\", { first: true })}\n      />\n      <NetworkCellSVGIcon role=\"presentation\" className={block(\"icon\")} />\n      <BatteryFullSVGIcon role=\"presentation\" className={block(\"icon\")} />\n    </AppBar>\n  );\n};\n\nexport default StatusBar;\n",
    "isBinary": false
  },
  "src/Phone/context.ts": {
    "content": "import { createContext, ReactNode, useContext } from \"react\";\n\ninterface PhoneContextType {\n  id: string;\n  title: ReactNode;\n  closePhone: () => void;\n}\n\nexport const PhoneContext = createContext<PhoneContextType>({\n  id: \"\",\n  title: \"Example\",\n  closePhone: () => {},\n});\n\nexport function usePhoneContext(): PhoneContextType {\n  return useContext(PhoneContext);\n}\n",
    "isBinary": false
  }
}
