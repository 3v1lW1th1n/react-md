{"functions":[{"name":"rmd-states-opacities","description":"Gets the states opacity map based on the provided color. This will check the contrast\ntone of the themed color, and return the correct opacities for a dark or light color.\n\n","file":"states/src/_functions.scss","group":"states","links":[],"see":[],"usedBy":[{"name":"rmd-states-opacity","type":"function","description":"Gets the states opacity for with the provided color and state.\n\n","group":"states"}],"requires":[{"name":"rmd-theme-prop-value","type":"function","description":"","group":"theme"},{"name":"rmd-theme-contrast-tone","type":"function","description":"","group":"theme"},{"name":"rmd-states-opacities","type":"variable","description":"","group":"states"}],"code":"@function rmd-states-opacities(color) {\n  $color-value: rmd-theme-prop-value($color);\n\n  @return map-get($rmd-states-opacities, rmd-theme-contrast-tone($color-value));\n}","throws":[],"examples":[],"parameters":[{"type":"Color","name":"color","description":"The color to get an opacity map for."}],"returns":{"type":"Map","description":"Either the `$rmd-states-light-opacities` or `$rmd-states-dark-opacities` based on the\n  provided color and it's contrast value."}},{"name":"rmd-states-opacity","description":"Gets the states opacity for with the provided color and state.\n\n","file":"states/src/_functions.scss","group":"states","links":[],"see":[],"usedBy":[{"name":"rmd-states-opacity","type":"mixin","description":"Updates the opacity for a provided state and color.\n\n","group":"states"}],"requires":[{"name":"rmd-states-opacities","type":"function","description":"","group":"states"}],"code":"@function rmd-states-opacity(color, state) {\n  $opacity-map: rmd-states-opacities($color);\n\n  @if not map-has-key($opacity-map, $state) {\n    @error 'Invalid state: \\'#{$state}\\'. Choose one of #{$map-keys($opacity-map)}.';\n  }\n\n  @return map-get($opacity-map, $state);\n}","throws":[],"examples":[],"parameters":[{"type":"Color","name":"color","description":"The color to get an opacity map for."},{"type":"String","name":"state","description":"The state that should be retrieved. This should be one of\n  the keys in the `$rmd-states-opacities` dark or light Maps."}],"returns":{"type":"Number","description":"the opacity value to apply for the provided state."}}],"mixins":[{"name":"rmd-states-base-color","description":"Applies the base color for the different states to use. The different\nstates will apply different opacity values to this value.\n\n","file":"states/src/_mixins.scss","group":"states","links":[],"see":[],"usedBy":[{"name":"react-md-button","type":"mixin","description":"Creates all the styles for buttons within react-md.\n","group":"button"},{"name":"react-md-button","type":"mixin","description":"Creates all the styles for buttons within react-md.\n","group":"button"},{"name":"rmd-list-item-base","type":"mixin","description":"Creates the base list item styles.\n","group":"list"},{"name":"rmd-states-surface","type":"mixin","description":"The base mixin for creating a \"stateable surface\". This should be used along with the `StatesProvider` and\n`StatesConsumer` components to dynamically add the focus and pressed states as needed.\n\n","group":"states"}],"requires":[{"name":"rmd-theme","type":"mixin","description":"","group":"theme"}],"code":"@mixin rmd-states-base-color(color: rmd-black-base, important: false) {\n  &::before {\n    @include rmd-theme(background-color, $color, $important);\n  }\n}","throws":[],"examples":[],"parameters":[{"type":"Color","name":"color","default":"rmd-black-base","description":"The background color for the different states."},{"type":"Boolean","name":"important","default":"false","description":"Boolean if the background color should be applied\n  with `!important`."}]},{"name":"rmd-states-opacity","description":"Updates the opacity for a provided state and color.\n\n","file":"states/src/_mixins.scss","group":"states","links":[],"see":[],"usedBy":[{"name":"rmd-states-hover","type":"mixin","description":"Applies the hover state opacity based on the provided color.\n\n","group":"states"},{"name":"rmd-states-focus","type":"mixin","description":"Applies the focus state opacity based on the provided color.\n\n","group":"states"},{"name":"rmd-states-pressed","type":"mixin","description":"Applies the pressed state opacity based on the provided color.\n\n","group":"states"},{"name":"rmd-states-pressed","type":"mixin","description":"Applies the pressed state opacity based on the provided color.\n\n","group":"states"},{"name":"rmd-states-selected","type":"mixin","description":"Applies the selected state opacity based on the provided color.\n\n","group":"states"},{"name":"rmd-states-active","type":"mixin","description":"Applies the active state opacity based on the provided color.\n\n","group":"states"}],"requires":[{"name":"rmd-states-opacity","type":"function","description":"","group":"states"}],"code":"@mixin rmd-states-opacity(state, color: rmd-black-base) {\n  &::before {\n    opacity: rmd-states-opacity($color, $state);\n  }\n}","throws":[],"examples":[],"parameters":[{"type":"String","name":"state","description":"The current state, this should be one of the `$rmd-states-light-opacities` and\n  `$rmd-states-dark-opacities` keys."},{"type":"Color","name":"color","default":"rmd-black-base","description":"The color to use for determining whether to use the dark or light\n  opacity map."}]},{"name":"rmd-states-base","description":"Applies the base states styles.\n","file":"states/src/_mixins.scss","group":"states","links":[],"see":[],"usedBy":[{"name":"rmd-states-surface","type":"mixin","description":"The base mixin for creating a \"stateable surface\". This should be used along with the `StatesProvider` and\n`StatesConsumer` components to dynamically add the focus and pressed states as needed.\n\n","group":"states"}],"requires":[{"name":"rmd-states-tap-highlight-color","type":"variable","description":"","group":"states"},{"name":"rmd-states-transition-duration","type":"variable","description":"","group":"states"}],"code":"@mixin rmd-states-base {\n  // sass-lint:disable-block no-vendor-prefixes\n  -webkit-tap-highlight-color: $rmd-states-tap-highlight-color;\n\n  &::before {\n    border-radius: inherit;\n    bottom: 0;\n    content: '';\n    left: 0;\n    opacity: 0;\n    pointer-events: none;\n    position: absolute;\n    right: 0;\n    top: 0;\n    transition: opacity $rmd-states-transition-duration linear;\n    z-index: 1;\n  }\n}","throws":[],"examples":[],"parameters":[]},{"name":"rmd-states-hover","description":"Applies the hover state opacity based on the provided color.\n\n","file":"states/src/_mixins.scss","group":"states","links":[],"see":[],"usedBy":[{"name":"react-md-button","type":"mixin","description":"Creates all the styles for buttons within react-md.\n","group":"button"},{"name":"rmd-list-item-base","type":"mixin","description":"Creates the base list item styles.\n","group":"list"},{"name":"rmd-states-simple","type":"mixin","description":"Creates the style for \"simple\" states that only rely on css selectors.\n","group":"states"},{"name":"rmd-states-surface","type":"mixin","description":"The base mixin for creating a \"stateable surface\". This should be used along with the `StatesProvider` and\n`StatesConsumer` components to dynamically add the focus and pressed states as needed.\n\n","group":"states"}],"requires":[{"name":"rmd-states-opacity","type":"mixin","description":"","group":"states"}],"code":"@mixin rmd-states-hover(color: rmd-black-base) {\n  &:hover {\n    @include rmd-states-opacity(hover, $color);\n  }\n}","throws":[],"examples":[],"parameters":[{"type":"Color","name":"color","default":"rmd-black-base","description":"The base hover color to get an opacity for."}]},{"name":"rmd-states-focus","description":"Applies the focus state opacity based on the provided color.\n\n","file":"states/src/_mixins.scss","group":"states","links":[],"see":[],"usedBy":[{"name":"rmd-states-simple","type":"mixin","description":"Creates the style for \"simple\" states that only rely on css selectors.\n","group":"states"},{"name":"rmd-states-surface","type":"mixin","description":"The base mixin for creating a \"stateable surface\". This should be used along with the `StatesProvider` and\n`StatesConsumer` components to dynamically add the focus and pressed states as needed.\n\n","group":"states"}],"requires":[{"name":"rmd-states-opacity","type":"mixin","description":"","group":"states"}],"code":"@mixin rmd-states-focus(color: rmd-black-base) {\n  @include rmd-states-opacity(focus, $color);\n}","throws":[],"examples":[],"parameters":[{"type":"Color","name":"color","default":"rmd-black-base","description":"The base focus color to get an opacity for."}]},{"name":"rmd-states-pressed","description":"Applies the pressed state opacity based on the provided color.\n\n","file":"states/src/_mixins.scss","group":"states","links":[],"see":[],"usedBy":[{"name":"rmd-states-simple","type":"mixin","description":"Creates the style for \"simple\" states that only rely on css selectors.\n","group":"states"},{"name":"rmd-states-surface","type":"mixin","description":"The base mixin for creating a \"stateable surface\". This should be used along with the `StatesProvider` and\n`StatesConsumer` components to dynamically add the focus and pressed states as needed.\n\n","group":"states"}],"requires":[{"name":"rmd-states-opacity","type":"mixin","description":"","group":"states"},{"name":"rmd-states-opacity","type":"mixin","description":"","group":"states"}],"code":"@mixin rmd-states-pressed(color: rmd-black-base) {\n  @include rmd-states-opacity(press, $color);\n\n  &:hover {\n    @include rmd-states-opacity(press, $color);\n  }\n}","throws":[],"examples":[],"parameters":[{"type":"Color","name":"color","default":"rmd-black-base","description":"The base pressed color to get an opacity for."}]},{"name":"rmd-states-selected","description":"Applies the selected state opacity based on the provided color.\n\n","file":"states/src/_mixins.scss","group":"states","links":[],"see":[],"usedBy":[{"name":"rmd-states-surface","type":"mixin","description":"The base mixin for creating a \"stateable surface\". This should be used along with the `StatesProvider` and\n`StatesConsumer` components to dynamically add the focus and pressed states as needed.\n\n","group":"states"}],"requires":[{"name":"rmd-states-opacity","type":"mixin","description":"","group":"states"}],"code":"@mixin rmd-states-selected(color: rmd-black-base) {\n  @include rmd-states-opacity(selected, $color);\n}","throws":[],"examples":[],"parameters":[{"type":"Color","name":"color","default":"rmd-black-base","description":"The base selected color to get an opacity for."}]},{"name":"rmd-states-active","description":"Applies the active state opacity based on the provided color.\n\n","file":"states/src/_mixins.scss","group":"states","links":[],"see":[],"usedBy":[{"name":"rmd-states-surface","type":"mixin","description":"The base mixin for creating a \"stateable surface\". This should be used along with the `StatesProvider` and\n`StatesConsumer` components to dynamically add the focus and pressed states as needed.\n\n","group":"states"}],"requires":[{"name":"rmd-states-opacity","type":"mixin","description":"","group":"states"}],"code":"@mixin rmd-states-active(color: rmd-black-base) {\n  @include rmd-states-opacity(active, $color);\n}","throws":[],"examples":[],"parameters":[{"type":"Color","name":"color","default":"rmd-black-base","description":"The base active color to get an opacity for."}]},{"name":"rmd-states-simple","description":"Creates the style for \"simple\" states that only rely on css selectors.\n","file":"states/src/_mixins.scss","group":"states","links":[],"see":[],"usedBy":[{"name":"rmd-states-surface","type":"mixin","description":"The base mixin for creating a \"stateable surface\". This should be used along with the `StatesProvider` and\n`StatesConsumer` components to dynamically add the focus and pressed states as needed.\n\n","group":"states"}],"requires":[{"name":"rmd-states-hover","type":"mixin","description":"","group":"states"},{"name":"rmd-states-focus","type":"mixin","description":"","group":"states"},{"name":"rmd-states-pressed","type":"mixin","description":"","group":"states"}],"code":"@mixin rmd-states-simple(color: rmd-black-base) {\n  // sass-lint:disable-block force-pseudo-nesting\n  &:not(:disabled):not([aria-disabled='true']) {\n    @include rmd-states-hover($color);\n\n    &:focus {\n      @include rmd-states-focus($color);\n    }\n\n    &:active {\n      @include rmd-states-pressed($color);\n    }\n  }\n}","throws":[],"examples":[],"parameters":[{"type":"Color","name":"color","default":"rmd-black-base","description":"The base color to get the different state opacities for."}]},{"name":"rmd-states-surface","description":"The base mixin for creating a \"stateable surface\". This should be used along with the `StatesProvider` and\n`StatesConsumer` components to dynamically add the focus and pressed states as needed.\n\n","file":"states/src/_mixins.scss","group":"states","links":[],"see":[],"usedBy":[{"name":"rmd-btn-base","type":"mixin","description":"The base styles for a button.\n\n","group":"button"},{"name":"rmd-list-item-base","type":"mixin","description":"Creates the base list item styles.\n","group":"list"}],"requires":[{"name":"rmd-states-base","type":"mixin","description":"","group":"states"},{"name":"rmd-states-base-color","type":"mixin","description":"","group":"states"},{"name":"rmd-states-simple","type":"mixin","description":"","group":"states"},{"name":"rmd-states-selected","type":"mixin","description":"","group":"states"},{"name":"rmd-states-active","type":"mixin","description":"","group":"states"},{"name":"rmd-states-hover","type":"mixin","description":"","group":"states"},{"name":"rmd-states-focus","type":"mixin","description":"","group":"states"},{"name":"rmd-states-pressed","type":"mixin","description":"","group":"states"}],"code":"@mixin rmd-states-surface(color: rmd-black-base) {\n  @include rmd-states-base;\n  @include rmd-states-base-color($color);\n\n  &.rmd-states--simple {\n    @include rmd-states-simple;\n  }\n\n  &.rmd-states--selected {\n    @include rmd-states-selected($color);\n  }\n\n  &.rmd-states--active {\n    @include rmd-states-active($color);\n  }\n\n  &.rmd-states--hover {\n    @include rmd-states-hover($color);\n  }\n\n  &.rmd-states--focus {\n    @include rmd-states-focus($color);\n  }\n\n  &.rmd-states--pressed {\n    @include rmd-states-pressed($color);\n  }\n}","throws":[],"examples":[],"parameters":[{"type":"Color","name":"color","default":"rmd-black-base","description":"The base color to use for the surface. The different states will have\n  their opacities updated for light or dark based on this color."}]}],"variables":[{"name":"rmd-states-transition-duration","type":"Number","description":"The transition duration for hover effects\n","file":"states/src/_variables.scss","group":"states","links":[],"see":[],"usedBy":[{"name":"rmd-states-base","type":"mixin","description":"Applies the base states styles.\n","group":"states"}],"requires":[],"code":"$rmd-states-transition-duration: .15s !default;"},{"name":"rmd-states-light-opacities","type":"Map","description":"A Map of all the hover opacities when the container should have\na light colored state.\n\n","file":"states/src/_variables.scss","group":"states","links":[],"see":[],"usedBy":[],"requires":[],"code":"$rmd-states-light-opacities: (\n  hover: .08,\n  focus: .24,\n  press: .32,\n  selected: .16,\n  active: .24,\n) !default;"},{"name":"rmd-states-dark-opacities","type":"Map","description":"A Map of all the hover opacities when the container should have\na dark colored state.\n\n","file":"states/src/_variables.scss","group":"states","links":[],"see":[],"usedBy":[],"requires":[],"code":"$rmd-states-dark-opacities: (\n  hover: .04,\n  focus: .12,\n  press: .16,\n  selected: .08,\n  active: .12,\n) !default;"},{"name":"rmd-states-opacities","type":"Map","description":"A Map of the dark and light state opacities so that they can be quickly looked up programmatically.\n\n","file":"states/src/_variables.scss","group":"states","links":[],"see":[],"usedBy":[{"name":"rmd-states-opacities","type":"function","description":"Gets the states opacity map based on the provided color. This will check the contrast\ntone of the themed color, and return the correct opacities for a dark or light color.\n\n","group":"states"}],"requires":[],"code":"$rmd-states-opacities: (\n  dark: $rmd-states-dark-opacities,\n  light: $rmd-states-light-opacities,\n) !default;"},{"name":"rmd-states-tap-highlight-color","type":"Color","description":"The highlight color to apply to \"fix\" the default android touch interaction\n","file":"states/src/_variables.scss","group":"states","links":[],"see":[],"usedBy":[{"name":"rmd-states-base","type":"mixin","description":"Applies the base states styles.\n","group":"states"}],"requires":[],"code":"$rmd-states-tap-highlight-color: rgba($rmd-black-base, 0) !default;"}]}
