////
/// @group theme
////

@import 'constants';
@import 'color-palette';

/// Calculate the luminance for a color.
///
/// @link https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
/// @returns {Number}
@function rmd-theme-luminance($color) {
  $red: nth($rmd-theme-linear-channel-values, red($color) + 1);
  $red-multiplier: 0.2126;
  $green: nth($rmd-theme-linear-channel-values, green($color) + 1);
  $green-multiplier: 0.07152;
  $blue: nth($rmd-theme-linear-channel-values, blue($color) + 1);
  $blue-multiplier: 0.0722;

  @return ($red * $red-multiplier) + ($green * $green-multiplier) +
    ($blue * $blue-multiplier);
}

/// Gets the contrast between two colors.
/// @returns {Number}
@function rmd-theme-contrast($back, $front) {
  $back-luminance: rmd-theme-luminance($back) + 0.05;
  $front-luminance: rmd-theme-luminance($front) + 0.05;

  @return max($back-luminance, $front-luminance) /
    min($back-luminance, $front-luminance);
}

/// Determines if a provided color is considered light or dark.
///
/// @param {Color} color - The color to test.
/// @param {Number} min-contrast [3.1] - The minimum contrast that should be applied. The min
///     contrast for normal text should be 4.5 while large or 14px bold text should be 3.1. See
///     the link for contrasts for more information.
/// @returns {String} - The string 'light' if the color is considered light, otherwise 'dark'.
/// @link https://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast
@function rmd-theme-tone($color, $min-contrast: 3.1) {
  @if $color == 'dark' or $color == 'light' {
    @return $color;
  }

  $light-contrast: rmd-theme-contrast($color, $rmd-white-base);
  $dark-contrast: rmd-theme-contrast($color, rgba($rmd-black-base, 0.87));

  @if ($light-contrast < $min-contrast) and ($dark-contrast > $light-contrast) {
    @return 'light';
  } @else {
    @return 'dark';
  }
}

/// Determines if the provided color should have a light or dark contrast using the
/// luminance algorithm to maintain a required contrast ratio for accessibility.
///
/// @param {Color} color - The color to test.
/// @param {Number} min-contrast [3.1] - The minimum contrast that should be applied. The min
///     contrast for normal text should be 4.5 while large or 14px bold text should be 3.1. See
///     the link for contrasts for more information.
/// @returns {String} - The string 'dark' if the color is considered light, or 'light' if the
///     color is considered dark.
/// @link https://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast
@function rmd-theme-contrast-tone($color, $min-contrast: 3.1) {
  @return if(rmd-theme-tone($color) == 'dark', 'light', 'dark');
}

/// A theme utility function to convert a material design color to the same color but with a different
/// swatch. If your app is not using material design colors, this utility function is useless but you
/// will need to define fallback colors so compliation does not fail.
///
/// @example scss - Example Material Design Color Usage
///   .something {
///     color: rmd-theme-get-swatch($rmd-theme-primary, 200);
///   }
///
///   .something-2 {
///     color: rmd-theme-get-swatch($rmd-theme-primary, 200, true);
///   }
///
/// @example scss - Example Non-Material Design Color Usage
///   $my-theme-color: #3498db;
///   // START_NO_COMPILE
///   .something-failed {
///     color: rmd-theme-get-swatch($my-theme-color, 200);
///   }
///   // END_NO_COMPILE
///
///   .something-failed--fixed {
///     color: rmd-theme-get-swatch($my-theme-color, 200, false, rgba($my-theme-color, .32));
///   }
///
/// @param {Color} color - The material design color to create a new color for with the provided swatch.
/// @param {Number} swatch - The swatch to apply. This should be one of `$rmd-theme-primary-suffixes` or
///   `$rmd-theme-accent-suffixes` if the `$accent` param is enabled.
/// @param {Boolean} accent [false] - Boolean if the swatch is an accent color instead of a primary color.
/// @param {Color} fallback-color [null] - The color to fallback to if the `$color` is not a valid
///   material design color. Since this is null by default, the complilation will fail until a valid
///   fallback is provided.
/// @param {String} fallback-name [null] - The name of a variable or global variable that should be set to
///   automatically fix the compilation error.
/// @return {Color} the new color within the same color family with the provided swatch and optional accent.
@function rmd-theme-get-swatch(
  $color,
  $swatch,
  $accent: false,
  $fallback-color: null,
  $fallback-name: null
) {
  $current-color-index: index(map-values($rmd-theme-color-map), $color);

  @if not $current-color-index or $current-color-index < 1 {
    @if $fallback-color == null {
      $fallback: if(
        $fallback-name,
        "the '$#{$fallback-name}' variable",
        'a fallback color'
      );

      $error-msg: "Invalid material design color: '#{$color}'. If this was intentional because your app does " +
        'not use material design colors, set #{$fallback} instead to get a correct color for the provided swatch: ' +
        '#{$swatch}.';
      @error $error-msg;
    } @else if type-of($fallback-color) != 'color' {
      @error 'Invalid fallback color: \'#{$fallback-color}\'. This must be a valid color.';
    }

    @return $fallback-color;
  }

  $suffixes: if(
    $accent,
    $rmd-theme-accent-suffixes,
    $rmd-theme-primary-suffixes
  );

  @if not index($suffixes, $swatch) {
    @error 'Invalid swatch: \'#{$swatch}\'. Choose one of #{$suffixes}.';
  }

  $current-color-name: nth(
    map-keys($rmd-theme-color-map),
    $current-color-index
  );
  $accent-index: str-index($current-color-name, '-a-');
  @if $accent-index {
    $current-color-name: str-slice($current-color-name, 1, $accent-index - 1);
  } @else {
    $index: 1;
    $found: false;
    @while not $found and $index < length($rmd-theme-primary-suffixes) {
      $suffix: nth($rmd-theme-colors, $index);
      $suffix-index: str-index($current-color-name, $suffix);
      @if $suffix-index {
        $found: true;
        $current-color-name: str-slice(
          $current-color-name,
          1,
          $suffix-index - 1 + str-length($suffix)
        );
      }

      $index: $index + 1;
    }
  }

  $color-name: '#{$current-color-name}#{if($accent, '-a', '')}-#{$swatch}';

  @return map-get($rmd-theme-color-map, $color-name);
}
