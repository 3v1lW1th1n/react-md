////
/// @group theme
////

@import 'variables';

/// A small utility function to get a color from the current theme. This is normally used along with the
/// `rmd-theme-var` function so that both css variables and a fallback can be applied.
///
/// You are _most_ likely looking for the `rmd-theme` mixin and not the functions instead.
///
/// @see rmd-theme-var
/// @see rmd-theme-property-values
/// @see rmd-theme
/// @param {String} style - The theme style to get. This should be one of the keys from `$rmd-theme-property-values`.
/// @return {Color} the theme color.
@function rmd-theme($style) {
  @if not map-has-key($rmd-theme-property-values, $style) {
    @error 'Invalid style: \'#{$style}\'. Choose one of: #{map-keys($rmd-theme-property-values)}';
  }

  @return map-get($rmd-theme-property-values, $style);
}

/// A small utility function to get a color from the current theme as a css variable. This is normally used along with the
/// `rmd-theme` function so that both css variables and a fallback can be applied.
///
/// You are _most_ likely looking for the `rmd-theme` mixin and not the functions instead.
///
/// @see rmd-theme
/// @see rmd-theme-property-values
/// @param {String} style - The theme style to get. This should be one of the keys from `$rmd-theme-property-values`.
/// @return {Color} the theme color.
@function rmd-theme-var($style, $color: null) {
  @if not map-has-key($rmd-theme-property-values, $style) {
    @error 'Invalid style: \'#{$style}\'. Choose one of: #{map-keys($rmd-theme-property-values)}';
  }

  @if $color == null {
    $color: rmd-theme($style);
  }

  @return var(--rmd-theme-#{$style}, $color);
}

/// This is really for internal use with the `react-md-theme` mixin, but you might be able to use it for some other stuff.
///
/// @param {String} property - This is normally `color` or `background-color`, but any valid CSS property that accepts
///     color values can be used.
/// @param {String} style - The type of theme style to use. This should be one of the `$rmd-theme-property-values` or a literal
///     color value.
/// @param {Boolean} important [false] - Boolean if the !important flag should also be applied. It is generally recommended
///     to not use this flag.
/// @param {Boolean} edge-opt-out [$rmd-theme-edge-opt-out] - Boolean whether to feature-detect around Edge to avoid emitting
///     CSS variables for it. This is really only intended for use cases where interactions with pseudo-element styles cause
///     problems due to Edge bugs.
@mixin rmd-theme($property, $style, $important: false, $edge-opt-out: $rmd-theme-edge-opt-out) {
  $suffix: if($important, ' !important', '');
  @if type-of($style) == 'color' or $style == 'currentColor' {
    #{$property}: #{$style + $suffix};
  } @else {
    $color-value: rmd-theme($style);
    $var-value: rmd-theme-var($style, $color-value);

    // Apply the base property and color-value for browsers that do not support css-variables.
    #{$property}: #{$color-value + $suffix};

    @if $edge-opt-out {
      @at-root {
        // sass-lint:disable-block no-vendor-prefixes
        @supports not (-ms-ime-align: auto) {
          & {
            #{$property}: $var-value;
          }
        }
      }
    } @else {
      #{$property}: $var-value;
    }
  }
}

/// Creates all the styles for a theme in react-md. This will start by creating CSS Variables
/// for each theme variable and then create class names for each variable.
///
/// @example scss - Normal SCSS Usage
///   // declare your theme variables
///   $rmd-theme-primary: $rmd-teal-500;
///   $rmd-theme-secondary: $rmd-pink-a-400;
///
///   @include react-md-theme;
///
/// @example scss - Alternative SCSS Usage
///   // if you want to create a theme without using the `$rmd-theme-primary` and `$rmd-theme-secondary` variables
///   @include react-md-theme($rmd-teal-500, $rmd-pink-a-400);
///
/// @param {Color} primary-color [rmd-theme-primary] - The primary color to use to theme your app.
/// @param {Color} secondary-color [rmd-theme-secondary] - The secondary color to use to theme your app.
@mixin react-md-theme($primary-color: $rmd-theme-primary, $secondary-color: $rmd-theme-secondary) {
  $property-values: map-keys($rmd-theme-property-values);

  :root {
    @each $style in $property-values {
      // the #{--rmd-theme} is required since sass-lint's AST doesn't work with css-variables yet in this scope
      #{--rmd-theme-#{$style}}: #{map-get($rmd-theme-property-values, $style)};
    }
  }
}

