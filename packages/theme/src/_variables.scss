////
/// @group theme
////

@import 'color-palette';
@import 'functions';

/// The primary theme color to use for your app. This is normally one of the material design colors with a `-500` suffix,
/// but it can be any color.
/// @type Color
$rmd-theme-primary: $rmd-purple-500 !default;

/// The color to use when text should be displayed on the primary theme color. The default behavior is to test the primary color's
/// contrast tone. If the color is considered 'dark', `$rmd-white-base` will be used. Otherwise `$rmd-black-base` will be used. If
/// this isn't sufficient for your app, you can change this to be any color. Just make sure that it meets the contrast accessibility
/// requirements (3.1:1 ratio for large (18px regular or 14px bold) and 4.5:1 for normal text).
/// @type Color
$rmd-theme-on-primary: if(
  rmd-theme-contrast-tone($rmd-theme-primary) == 'light',
  $rmd-black-base,
  $rmd-white-base
) !default;

/// The secondary theme color to use for your app. This is normally one of the material design colors with an accent
/// suffix (`-a-100` or `-a-200` or `-a-400` or `-a-700`, but it can really be any color.
/// @type Color
$rmd-theme-secondary: $rmd-pink-a-400 !default;

/// The color to use when text should be displayed on the secondary theme color. The default behavior is to test the secondary color's
/// contrast tone. If the color is considered 'dark', `$rmd-white-base` will be used. Otherwise `$rmd-black-base` will be used. If
/// this isn't sufficient for your app, you can change this to be any color. Just make sure that it meets the contrast accessibility
/// requirements (3.1:1 ratio for large (18px regular or 14px bold) and 4.5:1 for normal text).
/// @type Color
$rmd-theme-on-secondary: if(
  rmd-theme-contrast-tone($rmd-theme-secondary) == 'light',
  $rmd-black-base,
  $rmd-white-base
) !default;

/// The warning theme color to use for your app. This isn't used by anything internally within react-md at this time, but it might
/// be helpful to have this variable defined as more things get developed.
/// @type Color
$rmd-theme-warning: $rmd-deep-orange-a-200 !default;

/// The color to use when text should be displayed on the warning theme color. The default behavior is to test the warning color's
/// contrast tone. If the color is considered 'dark', `$rmd-white-base` will be used. Otherwise `$rmd-black-base` will
/// be used. If this isn't sufficient for your app, you can change this to be any color. Just make sure that it meets the contrast
/// accessibility requirements (3.1:1 ratio for large (18px regular or 14px bold) and 4.5:1 for normal text).
$rmd-theme-on-warning: if(
  rmd-theme-contrast-tone($rmd-theme-warning) == 'light',
  $rmd-black-base,
  $rmd-white-base
) !default;

/// The error theme color to use for your app.
/// @type Color
$rmd-theme-error: $rmd-red-500 !default;

/// The color to use when text should be displayed on the warning theme color. The default behavior is to test the error color's
/// contrast tone. If the color is considered 'dark', `$rmd-white-base` will be used. Otherwise `$rmd-black-base` will
/// be used. If this isn't sufficient for your app, you can change this to be any color. Just make sure that it meets the contrast
/// accessibility requirements (3.1:1 ratio for large (18px regular or 14px bold) and 4.5:1 for normal text).
$rmd-theme-on-error: if(
  rmd-theme-contrast-tone($rmd-theme-error) == 'light',
  $rmd-black-base,
  $rmd-white-base
);

/// The success theme color to use for your app. This isn't used by anything internally within react-md at this time, but it might
/// be helpful to have this variable defined as more things get developed.
/// @type Color
$rmd-theme-success: $rmd-green-a-700 !default;

/// The color to use when text should be displayed on the warning theme color. The default behavior is to test the success color's
/// contrast tone. If the color is considered 'dark', `$rmd-white-base` will be used. Otherwise `$rmd-black-base` will
/// be used. If this isn't sufficient for your app, you can change this to be any color. Just make sure that it meets the contrast
/// accessibility requirements (3.1:1 ratio for large (18px regular or 14px bold) and 4.5:1 for normal text).
$rmd-theme-on-success: if(
  rmd-theme-contrast-tone($rmd-theme-success) == 'light',
  $rmd-black-base,
  $rmd-white-base
) !default;

/// The theme's background color.
/// @type Color
$rmd-theme-background: #fff !default;

/// The theme's surface background color. This is the background color that will be used for any temporary 'material' (or surface)
///
/// Ex: Dialogs, Lists
/// @type Color
$rmd-theme-surface: #fff !default;

/// The color to use when text should be displayed on a surface or temporary material. The default behavior is to test if the surface
/// color's contrast tone. If the color is considered 'dark', `$rd-white-base` will be used. Otherwise `$rmd-black-base` will
/// be used. If this isn't sufficient for your app, you can change this to be any color. Just make sure that it meets the contrast
/// accessibility requirements (3.1:1 ratio for large (18px regular or 14px bold) and 4.5:1 for normal text).
/// @type Color
$rmd-theme-on-surface: if(rmd-theme-contrast-tone($rmd-theme-surface) == 'dark', $rmd-black-base, $rmd-white-base);

/// A Map of all the text colors for the app. This will be Map of 'light' and 'dark' that has the following keys:
/// - primary
/// - secondary
/// - hint
/// - disabled
/// - icon
///
/// This is normally used along with the `rmd-theme-contrast-tone` and the `map-get` Sass functions
///
/// @example scss - Example SCSS Usage
///   .example {
///     // gets the disabled text color based on the theme's background color.
///     color: map-get(map-get($rmd-theme-text-colors, rmd-theme-contrast-tone($rmd-theme-background)), disabled);
///   }
///
/// @type Map
$rmd-theme-text-colors: (
  dark: (
    primary: rgba($rmd-black-base, .87),
    secondary: rgba($rmd-black-base, .54),
    hint: rgba($rmd-black-base, .34),
    disabled: rgba($rmd-black-base, .38),
    icon: rgba($rmd-black-base, .54),
  ),
  light: (
    primary: $rmd-white-base,
    secondary: rgba($rmd-white-base, .7),
    hint: rgba($rmd-white-base, .5),
    disabled: rgba($rmd-white-base, .5),
    icon: rgba($rmd-white-base, .7),
  ),
);

/// A simple utility function only within the variables file for getting a text color based on contrasts.
///
/// @access private
/// @returns {Color}
@function rmd-theme-text-color($style, $color) {
  $contrast-tone: rmd-theme-contrast-tone($color);

  @return map-get(map-get($rmd-theme-text-colors, $contrast-tone), $style);
}

/// A Map of all the theme property values that can be used throughout the app. This is mainly created
/// so that the specific `rmd-theme--NAME` classes can be created, but also for the `rmd-theme-prop-value` function
/// to get a specific color within your theme.
$rmd-theme-property-values: (
  background: $rmd-theme-background,
  primary: $rmd-theme-primary,
  on-primary: $rmd-theme-on-primary,
  secondary: $rmd-theme-secondary,
  on-secondary: $rmd-theme-on-secondary,
  surface: $rmd-theme-surface,
  on-surface: $rmd-theme-on-surface,
  warning: $rmd-theme-warning,
  on-warning: $rmd-theme-on-warning,
  error: $rmd-theme-error,
  on-error: $rmd-theme-on-error,
  success: $rmd-theme-success,
  on-success: $rmd-theme-on-success,
  text-primary-on-background: rmd-theme-text-color(primary, $rmd-theme-background),
  text-secondary-on-background: rmd-theme-text-color(secondary, $rmd-theme-background),
  text-hint-on-background: rmd-theme-text-color(hint, $rmd-theme-background),
  text-disabled-on-background: rmd-theme-text-color(disabled, $rmd-theme-background),
  text-icon-on-background: rmd-theme-text-color(icon, $rmd-theme-background),
  text-primary-on-light: rmd-theme-text-color(primary, light),
  text-secondary-on-light: rmd-theme-text-color(secondary, light),
  text-hint-on-light: rmd-theme-text-color(hint, light),
  text-disabled-on-light: rmd-theme-text-color(disabled, light),
  text-icon-on-light: rmd-theme-text-color(icon, light),
  text-primary-on-dark: rmd-theme-text-color(primary, dark),
  text-secondary-on-dark: rmd-theme-text-color(secondary, dark),
  text-hint-on-dark: rmd-theme-text-color(hint, dark),
  text-disabled-on-dark: rmd-theme-text-color(disabled, dark),
  text-icon-on-dark: rmd-theme-text-color(icon, dark),
);

/// Boolean if the theme should opt-out of edge support by default with the provided mixins.
/// @type Boolean
$rmd-theme-edge-opt-out: false !default;

/// Attempts to get a specific theme color based on the property provided.
///
/// If the property is a color or 'currentColor', it will be returned instead.
///
/// NOTE: This has to be defined in variables so there aren't recursive imports.
/// @param {String|Color} property - The property to get from the theme colors.
/// @returns {Color} a color value for the provided property.
@function rmd-theme-prop-value($property) {
  @if type-of($property) == 'color' or $property == 'currentColor' {
    @return $property;
  }

  @if not map-has-key($rmd-theme-property-values, $property) {
    @error 'Invalid theme property specified! \'#{$property}\' doesn\'t exist. Choose one of #{map-keys($rmd-theme-property-values)}';
  }

  @return map-get($rmd-theme-property-values, $property);
}
