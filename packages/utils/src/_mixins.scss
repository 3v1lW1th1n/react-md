////
/// @group utils
////

@import 'functions';
@import 'variables';

/// A simple mixin that allows you to update styles when the [dir="rtl"] is present
/// for languages that read right to light. This is mostly used to update spacing with
/// margins or padding and a more "verbose" method of declaring rtl styles.
///
/// @example scss - Example Usage SCSS
///   .my-class {
///     margin-right: 1rem;
///
///     @include rmd-utils-rtl {
///       margin-left: 1rem;
///       margin-right: auto;
///     }
///   }
///
@mixin rmd-utils-rtl {
  [dir='rtl'] & {
    @content;
  }
}

/// This mixin will try to automatically swap the positioning styles for rtl languages.
/// If the swapped style should have something other than `auto` as the new style, that
/// style should be included in the `$swapped-styles` map with the correct value.
///
/// @param {String} property - The property that should be reversed for rtl languages.
/// @param {String|Number} value - The value that should be used for the original property
/// value or the inversed property value when in rtl mode.
/// @param {String|Number} swapped-value [null] - The value to use when in rtl languages
/// for the original property. When this is set to `null`, `0` will be used for margins
/// and padding while `auto` for everything else.
@mixin rmd-utils-rtl-auto($property, $value, $swapped-value: null) {
  $inversed-property: rmd-utils-swap-position($property);

  @include rmd-utils-rtl {
    @if $swapped-value == null {
      $swapped-value: auto;

      @each $prefix in $rmd-utils-swappable-position-prefixes {
        @if str-index($property, '#{$prefix}-') {
          $swapped-value: 0;
        }
      }
    }

    #{$property}: #{$swapped-value};
    #{$inversed-property}: #{$value};
    @content;
  }

  #{$property}: #{$value};
}

/// This mixin will try to automatically swap the positioning styles for rtl languages.
/// If the swapped style should have something other than `auto` as the new style, that
/// style should be included in the `$swapped-styles` map with the correct value.
///
/// @param {Map} styles - The styles that should be swapped for rtl languages. Right now
///   react-md only supports the `$rmd-utils-swappable-positions`.
/// @param {Map} swapped-styles [()] - Any optional swapped style overrides that should
///   be applied.
@mixin rmd-utils-rtl-auto-group($styles, $swapped-styles: ()) {
  @include rmd-utils-rtl {
    @each $property, $value in $styles {
      $inversed-property: rmd-utils-swap-position($property);
      $inversed-value: auto;
      @if map-has-key($swapped-styles, $property) {
        $inversed-value: map-get($swapped-styles, $property);
      } @else if map-has-key($styles, $inversed-property) {
        $inversed-value: map-get($swapped-styles, $inversed-property);
      }

      #{$property}: #{$inversed-value};
      #{$inversed-property}: #{$value};

      @content;
    }
  }

  @each $property, $value in $styles {
    #{$property}: #{$value};
  }
}

/// A very simple mixin that will center an element within the page for you
/// when you aren't using flexbox or grid for the part of the layout.
@mixin rmd-utils-block-centered($vertical-margin: null) {
  display: block;

  @if $vertical-margin {
    margin: $vertical-margin auto;
  } @else {
    margin-left: auto;
    margin-right: auto;
  }
}

/// A very simple mixin that is used to position an element in the center of
/// another element by using some transforms and `position: absolute`. You will
/// need to make sure that the parent element has `position: relative` to work.
@mixin rmd-utils-absolute-centered {
  left: 50%;
  position: absolute;
  top: 50%;
  transform: translateX(-50%) translateY(-50%);
}

/// An extremely simple util that is used to add scrolling to an element with a "patch" for adding scroll
/// momentum to iOS.
///
/// @param {String} position [null] - This should either be "x", "y", or null. This will just change the style
///     between overflow, overflow-x, and overflow-y.
/// @param {String} type [auto] - The scroll type to apply. It is recommended to use the default of `auto` in
///     most cases, but it can be set to something else.
/// @param {Boolean} enable-momentum [$rmd-utils-ios-scroll-momentum] - Boolean if iOS scroll momentum should be "patched".
@mixin rmd-utils-scroll(
  $position: null,
  $type: auto,
  $enable-momentum: $rmd-utils-ios-scroll-momentum
) {
  $style: overflow;
  @if $position == 'x' or $position == 'y' {
    $style: #{$style}-#{$position};
  }

  #{$style}: $type;

  @if $enable-momentum {
    // sass-lint:disable no-vendor-prefixes
    -webkit-overflow-scrolling: touch;
  }
}

/// A helper mixin that will hide the outline style when a user focuses any element / on the page. All this really does
/// is create an `outline-style: none` when the element is focused.
///
/// @param {Boolean} fix-moz-focus [true] - Boolean if the Firefox focus inner styles should also
///     be removed.
@mixin rmd-utils-hide-focus-outline($fix-moz-focus: true) {
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);

  &:focus {
    outline-style: none;
  }

  @if $fix-moz-focus {
    &::-moz-focus-inner {
      border: 0;
    }
  }
}

/// An extremely simple mixin that will allow any element to be fixed to the entire viewport
/// size.
/// @param {String} position [fixed] - The positioning that should be applied. This should be
/// one of the values for the `position` attribute.
@mixin rmd-utils-full-screen($position: fixed) {
  bottom: 0;
  left: 0;
  position: $position;
  right: 0;
  top: 0;
}

/// Creates the styles to apply to a pseudo element (`::before` or `::after`) so that
/// it spans the entire size of the container element. This is really useful for
/// focus effects or other interaction states. This relies on the parent to have
/// `position: relative;` to work.
///
/// @param {Number} z-index [0] - The z-index to use.
@mixin rmd-utils-pseudo-element($z-index: 0) {
  @include rmd-utils-full-screen(absolute);

  border-radius: inherit;
  content: '';
  pointer-events: none;
  z-index: $z-index;
}

/// This is a small utility function that helps set up your react-md app.
///
/// This will:
/// - update the `box-sizing` to be `border-box` (helpful for calculation positions and sizing)
/// - remove the margin and padding from the `html` and `body`
/// - apply the base background color and text colors to the `html` tag if the `@react-md/theme` package
///   has been correctly included
/// - apply the base typography to the `html` element if the `@react-md/typography` package
///   has been correctly included
@mixin rmd-utils-base {
  *,
  *::before,
  *::after {
    // setting everything to border-box for easier positioning
    // and calculations
    box-sizing: border-box;
  }

  html,
  body {
    margin: 0;
    padding: 0;
  }

  html {
    @if mixin-exists(rmd-theme) {
      @include rmd-theme(background-color, background);
      @include rmd-theme(color, text-primary-on-background);
    }

    @if mixin-exists(rmd-typography-base) {
      @include rmd-typography-base;
    }
  }
}

/// This mixin will include the styles for all packages that have been
/// imported in your scss files. If there are missing styles, you need
/// to make sure to correctly import that package before calling this
/// function.
@mixin react-md-utils {
  @if mixin-exists(react-md-avatar) {
    @include react-md-avatar;
  }

  @if mixin-exists(react-md-button) {
    @include react-md-button;
  }

  // has to come after buttons
  @if mixin-exists(react-md-app-bar) {
    @include react-md-app-bar;
  }

  @if mixin-exists(react-md-overlay) {
    @include react-md-overlay;
  }

  // has to come after overlays
  @if mixin-exists(react-md-dialog) {
    @include react-md-dialog;
  }

  @if mixin-exists(react-md-card) {
    @include react-md-card;
  }

  @if mixin-exists(react-md-divider) {
    @include react-md-divider;
  }

  @if mixin-exists(react-md-icon) {
    @include react-md-icon;
  }

  @if mixin-exists(react-md-link) {
    @include react-md-link;
  }

  @if mixin-exists(react-md-list) {
    @include react-md-list;
  }

  @if mixin-exists(react-md-media) {
    @include react-md-media;
  }

  @if mixin-exists(react-md-menu) {
    @include react-md-menu;
  }

  @if mixin-exists(react-md-progress) {
    @include react-md-progress;
  }

  @if mixin-exists(react-md-sheet) {
    @include react-md-sheet;
  }

  @if mixin-exists(react-md-states) {
    @include react-md-states;
  }

  @if mixin-exists(react-md-table) {
    @include react-md-table;
  }

  @if mixin-exists(react-md-theme) {
    @include react-md-theme;
  }

  @if mixin-exists(react-md-tooltip) {
    @include react-md-tooltip;
  }

  @if mixin-exists(react-md-transition) {
    @include react-md-transition;
  }

  @if mixin-exists(react-md-tree) {
    @include react-md-tree;
  }

  @if mixin-exists(react-md-typography) {
    @include react-md-typography;
  }

  @include rmd-utils-base;
}
