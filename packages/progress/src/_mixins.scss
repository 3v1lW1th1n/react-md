////
/// @group progress
////

@import '@react-md/theme/dist/helpers';
@import '@react-md/transition/dist/mixins';
@import '@react-md/utils/dist/mixins';
@import 'functions';
@import 'variables';

/// Creates the styles for one of the progress's theme values. This is mostly
/// going to be an internal helper mixin util.
///
/// @param {String} property - The property to set a `rmd-progress-theme-values` value to.
/// @param {String} theme-style - One of the keys of `rmd-progress-theme-values` to extract a value from.
/// @param {String|Color|Number} fallback [null] - A fallback value to use if the css variable
///   isn't set somehow. This will default to automatically retrieving the default value
///   from the `rmd-progress-theme-values` map when `null`.
@mixin rmd-progress-theme($property, $theme-style: $property, $fallback: null) {
  @include rmd-theme-apply-rmd-var($property, $theme-style, $rmd-progress-theme-values, progress);
}

/// Updates one of the progress's theme variables with the new value for the section
/// of your app.
///
/// @param {String} theme-style - The progress theme style type to update. This should be one
///   of the `$rmd-progress-theme-values` keys.
/// @param {String|Number|Color} value - The new value to use.
@mixin rmd-progress-theme-update-var($theme-style, $value) {
  @include rmd-theme-update-rmd-var($value, $theme-style, $rmd-progress-theme-values, progress);
}

/// @access private
/// @param styles - The current animation styles to use
@mixin rmd-progress-animation($styles) {
  @if $styles != null {
    @each $percentage, $style in $styles {
      #{$percentage} {
        @each $property, $value in $style {
          #{$property}: #{$value};
        }
      }
    }
  }
}

/// @access private
@mixin rmd-linear-progress-bar-styles {
  @include rmd-progress-theme(background-color, color);
  @include rmd-progress-theme(height, linear-size);

  position: absolute;
  z-index: 0;
}

/// @access private
@mixin rmd-linear-progress-bar {
  &--horizontal {
    @include rmd-utils-rtl-auto(left, 0);
  }

  &--horizontal-reverse {
    @include rmd-utils-rtl-auto-group(
      (
        left: auto,
        right: 0,
      )
    );
  }

  &--vertical {
    bottom: 0;
    left: 0;
    right: 0;
  }

  &--vertical-reverse {
    bottom: auto;
    top: 0;
  }

  &--determinate {
    @include rmd-linear-progress-bar-styles;
  }

  &--animate {
    @include rmd-transition(sharp);

    transition: width $rmd-transition-standard-time, height $rmd-transition-standard-time;
  }

  &--indeterminate {
    &::before,
    &::after {
      @include rmd-linear-progress-bar-styles;
      @include rmd-transition(standard, true);
      @include rmd-utils-rtl-auto-group(
        (
          left: 0,
          right: 100%,
        )
      );

      animation-duration: $rmd-linear-progress-transition-duration;
      animation-iteration-count: infinite;
      content: '';
      will-change: left, right;
    }

    &::before {
      animation-name: rmd-progress-bar;
    }

    &::after {
      animation-delay: $rmd-linear-progress-short-animation-delay;
      animation-name: rmd-progress-bar-short;
    }
  }

  &--indeterminate-reverse {
    &::before {
      animation-name: rmd-progress-bar-reverse;
    }

    &::after {
      animation-name: rmd-progress-bar-reverse-short;
    }
  }

  &--indeterminate-vertical {
    &::before,
    &::after {
      @include rmd-progress-theme(width, linear-size);

      height: auto;
      left: 0;
      right: 0;
    }

    &::before {
      animation-name: rmd-progress-bar-vertical;
    }

    &::after {
      animation-name: rmd-progress-bar-vertical-short;
    }
  }

  &--indeterminate-vertical-reverse {
    &::before {
      animation-name: rmd-progress-bar-vertical-reverse;
    }

    &::after {
      animation-name: rmd-progress-bar-vertical-reverse-short;
    }
  }
}

/// Creates the styles for the linear progress bar. This should only
/// @access private
@mixin rmd-linear-progress {
  .rmd-linear-progress {
    @include rmd-progress-theme(background-color);
    @include rmd-progress-theme(height, linear-size);

    display: block;
    overflow: hidden;
    position: relative;
    width: 100%;

    &--vertical {
      @include rmd-progress-theme(width, linear-size);

      display: inline-block;
      height: auto;
    }

    &__bar {
      @include rmd-linear-progress-bar;
    }
  }

  @keyframes rmd-progress-bar {
    @include rmd-progress-animation($rmd-linear-progress-styles);
  }

  @keyframes rmd-progress-bar-short {
    @include rmd-progress-animation($rmd-linear-progress-short-styles);
  }

  @keyframes rmd-progress-bar-reverse {
    @include rmd-progress-animation($rmd-linear-progress-reverse-styles);
  }

  @keyframes rmd-progress-bar-reverse-short {
    @include rmd-progress-animation($rmd-linear-progress-reverse-short-styles);
  }

  @keyframes rmd-progress-bar-vertical {
    @include rmd-progress-animation($rmd-linear-progress-vertical-styles);
  }

  @keyframes rmd-progress-bar-vertical-short {
    @include rmd-progress-animation($rmd-linear-progress-vertical-short-styles);
  }

  @keyframes rmd-progress-bar-vertical-reverse {
    @include rmd-progress-animation($rmd-linear-progress-vertical-reverse-styles);
  }

  @keyframes rmd-progress-bar-vertical-reverse-short {
    @include rmd-progress-animation($rmd-linear-progress-vertical-reverse-short-styles);
  }
}

/// @access private
@mixin rmd-circular-progress {
  .rmd-circular-progress {
    @include rmd-progress-theme(height, circular-size);
    @include rmd-progress-theme(width, circular-size);

    align-items: center;
    display: inline-flex;
    justify-content: center;

    &--centered {
      display: flex;
      margin-left: auto;
      margin-right: auto;
    }

    &__svg {
      height: inherit;
      width: inherit;

      &--animate {
        @include rmd-transition(standard);

        transition: transform 0.1s;
      }

      &--indeterminate {
        animation: rmd-progress-rotate $rmd-progress-circle-transition-duration linear infinite;
      }
    }

    &__circle {
      @include rmd-progress-theme(stroke, color);

      fill: none;
      stroke-dasharray: $rmd-progress-circle-dasharray;
      stroke-linecap: round;
      stroke-width: $rmd-progress-circle-stroke-width;

      &--animate {
        @include rmd-transition(standard);

        transition: stroke-dashoffset 0.1s;
      }

      &--indeterminate {
        animation: rmd-progress-circle-size $rmd-progress-circle-transition-duration ease-in-out
          infinite;
      }
    }

    @keyframes rmd-progress-rotate {
      @include rmd-progress-animation($rmd-progress-circle-rotate-styles);
    }

    @keyframes rmd-progress-circle-size {
      @include rmd-progress-animation($rmd-progress-circle-dash-styles);
    }
  }
}

/// Creates all the styles for the progress package.
@mixin react-md-progress {
  @include rmd-theme-create-root-theme($rmd-progress-theme-values, progress);

  @if $rmd-progress-include-linear {
    @include rmd-linear-progress;
  }

  @if $rmd-progress-include-circular {
    @include rmd-circular-progress;
  }
}
