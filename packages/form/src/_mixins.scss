////
/// @group form
////

@import '@react-md/button/dist/mixins';
@import '@react-md/icon/dist/mixins';
@import '@react-md/theme/dist/helpers';
@import '@react-md/typography/dist/mixins';
@import '@react-md/transition/dist/mixins';
@import '@react-md/utils/dist/mixins';
@import 'variables';
@import 'functions';

/// Creates the styles for one of the form's theme values. This is mostly
/// going to be an internal helper mixin util.
///
/// @param {String} property - The property to set a `rmd-form-theme-values` value to.
/// @param {String} theme-style [property] - One of the keys of `rmd-form-theme-values` to extract a value from.
/// @param {String|Color|Number} fallback [null] - A fallback value to use if the css variable
///   isn't set somehow. This will default to automatically retrieving the default value
///   from the `rmd-form-theme-values` map when `null`.
@mixin rmd-form-theme($property, $theme-style: $property, $fallback: null) {
  @include rmd-theme-apply-rmd-var($property, $theme-style, $rmd-form-theme-values, form);
}

/// Updates one of the form's theme variables with the new value for the section
/// of your app.
///
/// @example scss - Example SCSS USage
///   .bigger-form-section {
///     @include rmd-form-theme-update-var(size, 4rem);
///   }
///
///
/// @example scss - Updating the base form size with a media query
///   @media (min-width: 75rem)  {
///     @include rmd-form-theme-update-var(size, rmd-form-theme(dense-size));
///   }
///
/// @param {String} theme-style - The form theme style type to update. This should be one
///   of the `$rmd-form-theme-values` keys.
/// @param {String|Number|Color} value - The new value to use.
@mixin rmd-form-theme-update-var($theme-style, $value) {
  @include rmd-theme-update-rmd-var($value, $theme-style, $rmd-form-theme-values, form);
}

/// Creates the base styles for a `<label>` element as well as all the different
/// states a label can be in.
@mixin rmd-label {
  @include rmd-typography(body-1);
  @include rmd-transition(standard);

  display: inline-flex;
  font-size: $rmd-label-font-size;
  transition: color $rmd-transition-standard-time;

  &--active {
    @include rmd-form-theme(color, active-color);
  }

  &--error {
    @include rmd-form-theme(color, error-color);
  }

  &--disabled {
    @include rmd-form-theme(color, disabled-color);
  }
}

/// Creates the minimal styles for a toggle container.
/// @access private
@mixin rmd-form-toggle-container {
  align-items: center;
  display: inline-flex;

  &--full-width {
    display: flex;
  }

  &--stacked {
    flex-direction: column;
  }
}

/// Creates all the styles for creating the icon container for the checkbox and radio input
/// types.
/// @access private
@mixin rmd-form-toggle {
  @include rmd-button-theme(height, icon-size);
  @include rmd-button-theme(width, icon-size);
  @include rmd-states-surface;
  @include rmd-states-keyboard-only {
    &--focused {
      @include rmd-states-theme-update-var(background-color, rmd-states-theme-var(focus-color));

      &:hover {
        @include rmd-states-theme-update-var(background-color, rmd-states-theme-var(hover-color));
      }
    }
  }

  align-items: center;
  border-radius: 50%;
  display: inline-flex;
  justify-content: center;
  position: relative;

  &--disabled {
    @include rmd-states-theme-update-var(hover-color, tranparent);
  }
}

/// Creates the styles for a form input that should be hidden from view. This
/// should normally be applied to checkbox or radio input types.
/// @access private
@mixin rmd-form-toggle-hidden {
  @include rmd-utils-hide-focus-outline;

  bottom: 0;
  height: 100%;
  left: 0;
  margin: 0;
  opacity: 0;
  position: absolute;
  right: 0;
  top: 0;
  width: 100%;
  z-index: 1;

  &:hover {
    cursor: pointer;
  }

  &:disabled {
    &:hover {
      cursor: default;
    }
  }

  &:checked + .rmd-form-toggle__icon::before {
    opacity: 0;
  }

  &:checked + .rmd-form-toggle__icon::after {
    opacity: 1;
  }
}

/// Creates the styles for the checkbox and radio input types' icon
/// @access private
@mixin rmd-form-toggle-icon {
  @include rmd-theme(color, warning);
  @include rmd-icon-theme(height, size);
  @include rmd-icon-theme(width, size);

  .rmd-icon {
    color: inherit;
    fill: currentColor;
    height: inherit;
    width: inherit;
  }

  pointer-events: none;
  position: absolute;

  &::before,
  &::after {
    @include rmd-transition(standard);
    @include rmd-form-theme(bottom, toggle-inset);
    @include rmd-form-theme(left, toggle-inset);
    @include rmd-form-theme(right, toggle-inset);
    @include rmd-form-theme(top, toggle-inset);

    content: '';
    position: absolute;
    transition: opacity $rmd-transition-standard-time;
  }

  &::before {
    @include rmd-theme(background-color, background);

    opacity: 1;
    z-index: 3;
  }

  &::after {
    opacity: 0;
    z-index: 0;
  }

  &--circle::before,
  &--circle::after {
    border-radius: 50%;
  }

  &--disabled {
    @include rmd-theme(color, text-disabled-on-background);
  }

  &--dense {
    @include rmd-form-theme(bottom, toggle-dense-inset);
    @include rmd-form-theme(left, toggle-dense-inset);
    @include rmd-form-theme(right, toggle-dense-inset);
    @include rmd-form-theme(top, toggle-dense-inset);
  }
}

/// Updates the checkbox and radio components to have a dense theme by updating the toggle-inset
/// css variable to be the dense version. This should generally be used within media queries.
@mixin rmd-form-toggle-dense-theme {
  @include rmd-form-theme-update-var(toggle-inset, rmd-form-theme-var(toggle-dense-inset));
}

/// Creates the styles for a floating label. This also requries the base styles from
/// the `rmd-label` mixin.
/// @access private
@mixin rmd-floating-label {
  @include rmd-form-theme(top, label-floating-top);
  @include rmd-utils-rtl {
    left: auto;
    right: 0;
    transform: translate(rmd-utils-negate-var(rmd-form-theme-var(offset)), -50%);
  }

  $transitions: background-color, color, font-size, transform, top;

  left: 0;
  position: absolute;
  transform: translate(rmd-form-theme-var(offset), -50%);
  transition-property: $transitions;
  will-change: $transitions;

  &--active {
    @include rmd-utils-rtl {
      transform: translate(rmd-utils-negate-var(rmd-form-theme-var(offset)), 0);
    }

    font-size: $rmd-label-floating-font-size;
    top: 0;
    transform: translate(rmd-form-theme-var(offset), 0);
    z-index: 1;
  }

  &--covering {
    @include rmd-utils-rtl-auto(right, rmd-form-theme-var(offset), 0);
  }

  &--inactive {
    @include rmd-theme(color, text-secondary-on-background);
  }

  &--outline-active {
    @include rmd-theme(background-color, background);
    @include rmd-utils-rtl {
      transform: translate(rmd-utils-negate-var(rmd-form-theme-var(offset)), -50%);
    }

    left: -$rmd-label-padding;
    padding: 0 $rmd-label-padding;
    transform: translate(rmd-form-theme-var(offset), -50%);
  }
}

@mixin rmd-form-placeholder {
  &:placeholder {
    @content;
  }

  &:-moz-placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }

  &::-webkit-input-placeholder {
    @content;
  }
}

@mixin rmd-text-field-container {
  @include rmd-transition(standard);
  @include rmd-form-theme-update-var(offset, rmd-form-theme-var(horizontal-padding));

  align-items: center;
  display: flex;
  position: relative;
  transition: border-color $rmd-transition-standard-time, height $rmd-transition-standard-time;

  &::after {
    // don't want pointer events since it'll make resizing textareas
    // harder
    pointer-events: none;
    position: absolute;
  }

  &--inline {
    display: inline-flex;
  }

  &--filled {
    @include rmd-states-surface;
    @include rmd-form-theme(background-color, filled-color);
  }

  &--outline {
    @include rmd-form-theme(border-color);
    @include rmd-form-theme(border-radius);
    @include rmd-form-theme(border-width);
    @include rmd-form-theme-update-var(horizontal-padding, $rmd-form-outline-horizontal-padding);
    @include rmd-form-theme-update-var(vertical-padding, $rmd-form-outline-vertical-padding);

    border-style: solid;

    &:hover {
      @include rmd-form-theme(border-color, border-hover-color);
    }

    &:disabled {
      @include rmd-form-theme(bordered-color, disabled-color);
    }

    &::after {
      @include rmd-transition(standard);
      @include rmd-utils-pseudo-element;

      box-shadow: 0 0 0 rmd-form-theme-var(border-width-active) rmd-form-theme-var(active-color);
      opacity: 0;
      transition: opacity $rmd-transition-standard-time;
    }
  }

  &--outline-active::after {
    opacity: 1;
  }

  &--underline {
    @include rmd-transition(standard);
    @include rmd-form-theme(border-top-left-radius, border-radius);
    @include rmd-form-theme(border-top-right-radius, border-radius);
    @include rmd-form-theme(border-bottom-width, border-width);
    @include rmd-form-theme(border-bottom-color, border-color);
    @include rmd-form-theme-update-var(horizontal-padding, $rmd-form-underline-horizontal-padding);
    @include rmd-form-theme-update-var(vertical-padding, $rmd-form-underline-vertical-padding);

    border-bottom-style: solid;
    padding-top: 1em;

    &:hover {
      @include rmd-form-theme(border-bottom-color, border-hover-color);
    }

    &::after {
      @include rmd-transition(standard);
      @include rmd-form-theme(background-color, active-color);
      @include rmd-form-theme(height, border-width-active);

      content: '';
      max-width: 0;
      top: 100%;
      transition: max-width $rmd-transition-standard-time;
      width: 100%;
      z-index: 1;
    }
  }

  &--underline-left::after {
    @include rmd-utils-rtl {
      left: auto;
      margin-left: auto;
      margin-right: 0;
      right: 0;
    }

    left: 0;
    margin-right: auto;
  }

  &--underline-right::after {
    margin-left: auto;
    right: 0;
  }

  &--underline-active::after {
    max-width: 100%;
  }

  &--error {
    $error-color: rmd-form-theme-var(error-color);

    @include rmd-form-theme-update-var(active-color, $error-color);
    @include rmd-form-theme-update-var(border-color, $error-color);
    @include rmd-form-theme-update-var(border-hover-color, rmd-form-theme-var(error-hover-color));
    @include rmd-icon-theme-update-var(color, $error-color);
  }

  &--offset-left {
    $offset: calc(
      #{rmd-form-theme-var(underline-horizontal-padding)} + #{rmd-icon-theme-var(size)} + #{rmd-icon-theme-var(
          text-spacing
        )}
    );
    @include rmd-form-theme-update-var(horizontal-padding, $offset);
  }
}

@mixin rmd-text-field {
  @include rmd-transition(standard);
  @include rmd-typography(body-1, font-size);
  @include rmd-utils-hide-focus-outline;
  @include rmd-form-placeholder {
    @include rmd-transition(standard);
    @include rmd-theme(color, text-secondary-on-background);

    // want to gain the same font styles as the input/textarea itself,
    // just apply different colors as needed instead
    font: inherit;
  }
  background-color: transparent;
  border-width: 0;
  color: inherit;
  flex-grow: 1;
  flex-shrink: 1;
  font-size: 1em;
  padding: rmd-form-theme-var(vertical-padding) rmd-form-theme-var(horizontal-padding);
  transition-duration: $rmd-transition-standard-time;
  transition-property: border-color;

  &[disabled] {
    @include rmd-theme(color, text-disabled-on-background);

    @include rmd-form-placeholder {
      @include rmd-theme(color, text-disabled-on-background);
    }
  }

  &--secondary {
    @include rmd-theme(color, text-secondary-on-background);
  }

  &--no-v-padding {
    @include rmd-form-theme-update-var(vertical-padding, 0);
  }

  &--unresizable {
    height: calc(100% - #{rmd-form-theme-var(textarea-margin-top)});
    resize: none;
    width: 100%;
  }

  &--resize-h {
    resize: horizontal;
  }

  &--resize-v {
    resize: vertical;
  }

  &--mask {
    height: auto;
    left: 0;
    opacity: 0;
    pointer-events: none;
    position: absolute;
    right: 0;
    top: 0;
    z-index: -1;
  }

  &--area {
    @include rmd-form-theme(min-height, textarea-min-height);
    @include rmd-form-theme(margin-top, textarea-margin-top);

    // only show the scrollbars when needed
    overflow: auto;
  }

  &--area-underline {
    @include rmd-form-theme-update-var(
      textarea-margin-top,
      $rmd-form-textarea-underline-margin-top
    );

    padding-top: 0;
  }

  &--floating {
    @include rmd-form-placeholder {
      color: transparent;
      transition: color $rmd-transition-standard-time;
    }

    &:focus {
      @include rmd-form-placeholder {
        @include rmd-theme(color, text-secondary-on-background);
      }
    }
  }
}

/// Creates the styles for forms within react-md. This requires either the `rmd-form-use-font-forms` or `rmd-form-use-svg-forms` variables
/// to be enabled to generate any styles.
@mixin react-md-form {
  @include rmd-theme-create-root-theme($rmd-form-theme-values, form);

  .rmd-label {
    @include rmd-label;
  }

  .rmd-form-toggle-container {
    @include rmd-form-toggle-container;
  }

  .rmd-form-toggle {
    @include rmd-form-toggle;

    &__input {
      @include rmd-form-toggle-hidden;
    }

    &__icon {
      @include rmd-form-toggle-icon;
    }
  }

  .rmd-floating-label {
    @include rmd-floating-label;
  }

  .rmd-text-field-container {
    @include rmd-text-field-container;
  }

  .rmd-text-field {
    @include rmd-text-field;
  }

  .rmd-password {
    &--offset {
      @include rmd-utils-rtl-auto(padding-right, 2rem);
    }

    &__toggle {
      @include rmd-button-theme-update-var(icon-size, 1.5rem);
      @include rmd-icon-theme-update-var(size, 1.25rem);

      pointer-events: auto;
    }
  }

  .rmd-text-field-addon {
    display: inline-flex;
    pointer-events: none;
    position: absolute;

    &--first {
      @include rmd-utils-rtl-auto(left, 0.5rem);
    }

    &--last {
      @include rmd-utils-rtl-auto(right, 0.5rem);
    }
  }
}
