////
/// @group tree-view
////

@import '@react-md/utils/dist/mixins';

/// Creates styles to add additional padding to tree items based on depth. This will only work
/// if you correctly apply the `aria-level` attributes to the list items.
///
/// The formula used for creating padding is:
/// ```scss
/// $padding: (($depth - 1) * $incrementor) + $base;
/// ```
///
/// @param {Number} depth - The depth to create styles for.
/// @param {String} selector-prefix [''] - An optional selector prefix to add before the `aria-level`.
/// @param {Number} incrementor [rmd-tree-view-item-padding-incrementor] - The amount of padding to be used for each level of depth.
/// @param {Number} base [rmd-tree-view-item-padding-base] - The base amount of padding that should be added to a tree item.
@mixin rmd-tree-item-at-depth(
  $depth,
  $selector-prefix: '',
  $incrementor: $rmd-tree-view-item-padding-incrementor,
  $base: $rmd-tree-view-item-padding-base
) {
  $selector: '#{$selector-prefix}[aria-level="#{$depth + 1}"].rmd-tree-item__content, #{$selector-prefix}[aria-level="#{$depth + 1}"] > .rmd-tree-item__content';
  $padding: (($depth - 1) * $incrementor) + $base;

  #{$selector} {
    padding-left: $padding;

    // sass-lint:disable mixins-before-declarations
    @include rmd-utils-rtl {
      padding-left: $rmd-list-item-horizontal-padding;
      padding-right: $padding;
    }
  }
}

/// Creates the styles for all the depths from the provided min and max values for a tree.
///
/// @param {String} selector-prefix [''] - An optional prefix to apply before the `aria-level` selector.
/// @param {Number} min [1] - The min level to use. This needs to be a number greater than 0.
/// @param {Number} max [rmd-tree-view-max-depth] - The max number of levels to create styles for.
/// @param {Number} incrementor [rmd-tree-view-item-padding-incrementor] - The amount of padding to be used for each level of depth.
/// @param {Number} base [rmd-tree-view-item-padding-base] - The base amount of padding that should be added to a tree item.
@mixin rmd-tree-view-depths(
  $selector-prefix: '',
  $min: 1,
  $max: $rmd-tree-view-max-depth,
  $incrementor: $rmd-tree-view-item-padding-incrementor,
  $base-padding: $rmd-tree-view-item-padding-base
) {
  @if $min < 1 {
    @error 'Invalid min value: \'#{$min}\'! The min must be a number greater than 0.';
  }

  @if $max < $min {
    @error 'Invalid max value: \'#{$max}\'! The max must be a number greater than the min value: \'#{$min}\'';
  }

  $index: $min;
  @while $index < $max {
    @include rmd-tree-item-at-depth($index, $selector-prefix, $incrementor, $base-padding);

    $index: $index + 1;
  }
}

/// Creates the styles for a tree item. This really requires the `@react-md/list` styles to be created
/// beforehand since these styles just prevent the outline when focused to work with the `@react-md/states`
/// package.
///
/// @example scss - Example Usage SCSS
///   .rmd-tree-item {
///     @include rmd-tree-item;
///   }
@mixin rmd-tree-item {
  // added again just-in-case so that dnd libraries don't do a bad drag image
  list-style: none;
  outline-style: none;

  &__content--link {
    color: inherit;
    text-decoration: none;
  }
}

/// Creates the styles for the tree group.
///
/// @example scss - Example Usage SCSS
///   .rmd-tree-group {
///     @include rmd-tree-group;
///   }
@mixin rmd-tree-group {
  background-color: inherit;
  color: inherit;
  font-size: inherit;
  line-height: inherit;

  // remove the list padding to make it more condensed
  padding-bottom: 0;
  padding-top: 0;
}

/// Creates all tree-view specific styles. This really requires the `@react-md/list` styles to be created
/// beforehand since these styles just prevent the outline when focused to work with the `@react-md/states`
/// package.
@mixin react-md-tree-view {
  .rmd-tree-view {
    @include rmd-tree-view-depths;
  }

  .rmd-tree-item {
    @include rmd-tree-item;
  }

  .rmd-tree-group {
    @include rmd-tree-group;
  }
}
