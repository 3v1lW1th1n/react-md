{"version":3,"sources":["components/GettingStarted/Installation.tsx","components/Markdown/Markdown.tsx","components/Markdown/MarkdownPage.tsx","components/Markdown/index.ts","utils/markdown/index.ts"],"names":["packages","_i","routes_1","components_App_routes__WEBPACK_IMPORTED_MODULE_2__","length","route","itemId","childItems","push","apply","map","_a","name","children","path","markdown","join","react__WEBPACK_IMPORTED_MODULE_0__","components_Markdown__WEBPACK_IMPORTED_MODULE_1__","__webpack_exports__","Markdown","_super","props","_this","call","this","updateInnerHTML","html","Object","utils_markdown__WEBPACK_IMPORTED_MODULE_3__","state","__html","setState","prevMarkdown","tslib__WEBPACK_IMPORTED_MODULE_0__","getDerivedStateFromProps","nextProps","prevState","prototype","render","style","className","react__WEBPACK_IMPORTED_MODULE_1__","classnames__WEBPACK_IMPORTED_MODULE_2___default","dangerouslySetInnerHTML","MarkdownPage","_Markdown__WEBPACK_IMPORTED_MODULE_3__","_Markdown__WEBPACK_IMPORTED_MODULE_0__","getLanguage","s","marked__WEBPACK_IMPORTED_MODULE_0__","renderer","highlight","code","lang","prismjs__WEBPACK_IMPORTED_MODULE_1__","gfm","tables","breaks","pedantic","sanitize","smartLists","smartypants","preTransforms","postTransforms","replace","_","s1","s2","transform","transforms","options","reduce","t","markdownToHTML"],"mappings":"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","file":"js/4.a5a5ab1c.chunk.min.js","sourcesContent":["/* tslint:disable max-line-length */\nimport * as React from \"react\";\nimport { TreeViewDataList } from \"@react-md/tree-view\";\n\nimport { MarkdownPage } from \"components/Markdown\";\nimport routes from \"components/App/routes\";\n\ninterface IPackageLink {\n  name: string;\n  path: string;\n}\n\ntype ChildItems = TreeViewDataList<{ children: string }>;\n\nconst packages: IPackageLink[] = [];\nfor (const route of routes) {\n  const { itemId, childItems } = route;\n  if (itemId === \"/packages\") {\n    [].push.apply(packages, (childItems as ChildItems).map(({ children, itemId: path }) => ({ name: children, path })));\n    break;\n  }\n}\n\nconst markdown = `## Table of Contents\n- [Installing Packages](#installing-packages)\n  - [Installing with npm](#installing-with-npm)\n  - [Using UMD Bundles](#using-umd-bundles)\n- [Updating Sass Include Paths](#updating-sass-include-paths)\n  - [Upating webpack config](#updating-webpack-config)\n- [Including Styles](#including-styles)\n  - [SCSS Naming Paradigm](#scss-naming-paradigm)\n  - [Exported SCSS Files](#exported-scss-files)\n  - [Including Styles Example](#including-styles-example)\n\n## Installing Packages\n\\`react-md\\` has been split up into separate scoped packages to hopefully make it easy to pick and choose\nwhat functionality you want to bring into your app without requiring the entire framework. However,\nyou can still install the base \\`react-md\\` package that will include every scoped package for convenience.\n\nEven though the packages are scoped, most packages will require the styles from:\n- \\`@react-md/icon\\`\n- \\`@react-md/theme\\`\n- \\`@react-md/typography\\`\n\nso it is recommended to at least start with these packages. The packages are available by installing from [npm](https://npmjs.com)\nor using the UMD bundle hosted on [unpkg](https://unpkg.com). You will have a lot more flexibility by installing with npm as the\nUMD bundle will include every component and styles within react-md.\n\n> NOTE: \\`@react-md/material-icons\\` will be the only package that is **not** included in the UMD bundle since\nit includes 500+ icons and components.\n\nFor convenience, here is a list of all packages within react-md and links to their documentation:\n${packages.map(({ name, path }) => `- [${name}](${path})`).join(\"\\n\")}\n\n### Installing with npm\nThis method will allow the most control and will most likely be the easiest within a normal React workflow.\nYou can install any of the packages listed above as follows:\n\n\\`\\`\\`sh\n$ npm install --save @react-md/icon @react-md/theme @react-md/typography\n\\`\\`\\`\n\nOr you can just install the entire \\`react-md\\` library with:\n\\`\\`\\`sh\n$ npm install --save react-md\n\\`\\`\\`\n\n### Using UMD Bundles\nThe main \\`react-md\\` package also exports a UMD bundle as well as 255 precompiled themes for quick setup. You\ncan use these bundles by updating your \\`index.html\\` file as follows:\n\\`\\`\\`diff\n <!DOCTYPE html>\n <html>\n   <head>\n+    <link rel=\"stylesheet\" href=\"https://unpkg.com/react-md@2.0.0-alpha-1/dist/react-md.indigo-pink.min.css\">\n   </head>\n   <body>\n     <div id=\"root\"></div>\n     <script src=\"https://unpkg.com/react/dist/react.min.js\"></script>\n     <script src=\"https://unpkg.com/react-dom/dist/react-dom.min.js\"></script>\n+    <script src=\"https://unpkg.com/react-md@2.0.0-alpha-1/dist/react-md.min.js\"></script>\n+    <script src=\"https://unpkg.com/@react-md/material-icons@2.0.0-alpha-1/dist/react-md.min.js\"></script>\n   </body>\n </html>\n\\`\\`\\`\n\nOnce \\`react-md\\` has been included, you can use the globally created \\`ReactMD\\` variable to extract the components\nyou want:\n\\`\\`\\`jsx\nconst { AppBar, AppBarNav, AppBarTitle, List, ListItem } = ReactMD;\nconst { HomeSVGIcon } = ReactMDMaterialIcons;\n\nconst App = () => (\n  <div>\n    <AppBar>\n      <AppBarNav><HomeSVGIcon /></AppBarNav>\n      <AppTitle>Example App!</AppTitle>\n    </AppBar>\n    <main className={AppBar.offsetClassName}>\n      <List>\n        <ListItem>Item 1</List>\n        <ListItem>Item 2</List>\n        <ListItem>Item 3</List>\n      </List>\n    </main>\n  </div>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\\`\\`\\`\n\n## Updating Sass Include Paths\nEvery package within \\`react-md\\` that has styles will require you to update your Sass compiler to include\n\\`node_modules\\` for the \\`includePaths\\` to work. If you are using [create-react-app](https://github.com/facebookincubator/create-react-app), you\ncan skip this and read the [updating create-react-app](/getting-started/updating-create-react-app) guide instead.\n\n### Updating webpack config\nTo make things simple, I will assume that you have an existing webpack config file and have a decent understanding\nof how to use different rules and loaders.\n\nUpdate the webpack config file to add a new rule for loading SCSS (or update your existing rule):\n\\`\\`\\`diff\n {\n   test: /\\.scss$/,\n   use: [{\n     loader: 'style-loader',\n     options: { sourceMap: true },\n   }, {\n     loader: 'css-loader',\n     options: { sourceMap: true, importLoaders: 2 },\n   }, {\n     loader: 'postcss',\n     options: { sourceMap: true },\n   }, {\n     loader: 'sass-loader',\n     options: {\n       sourceMap: true,\n+      includePaths: [\n+        './node_modules', // or whatever relative path it is to node_modules\n+      ],\n     },\n   }],\n }\n\\`\\`\\`\n\nThe important part to note is the \"added\" section in the diff above. This will update \\`node-sass\\` to also\nresolve SCSS files that are found within the \\`node_modules\\` directory. Without this change, you will be unable\nto import any SCSS file correctly from react-md.\n\n## Including Styles\n### SCSS Naming Paradigm\nTo make these styles easier to plug-and-play with other libraries, every variable, function, and mixin will be prefixed with \\`rmd\\` or \\`react-md\\`\nwhere \\`rmd\\` is preserved for general variables, functions, and mixins while \\`react-md\\` is reserved for a package's mixin that will generate\nall the styles required.\n\nIf you are unfamiliar with the existing SCSS file naming paradigms, here is a quick summary. If a file is prefixed with an underscore (\\`_\\`), the file\n**should not** generate any styles when imported while a file without an underscore *should*. Even though some files will have underscores and others will\nnot, there will be no difference when importing the files in your SCSS file. So lets say that we have the following files:\n- \\`styles.scss\\`\n- \\`_variables.scss\\`\n- \\`_mixins.scss\\`\n\nIf you were to import these into a SCSS file, it should look like:\n\\`\\`\\`scss\n@import 'variables';\n@import 'mixins';\n@import 'styles';\n\\`\\`\\`\n\n### Exported SCSS Files\nEvery package within react-md will follow the same SCSS file export structure:\n- \\`dist/styles.scss\\` - A file that will generate all the styles when imported into your project for that package. If the react-md package does\nnot have any styles, this file and the follow files will not be available.\n- \\`dist/_<<PACKAGE_NAME>>.scss\\` - A file that can be used to import every variable, function, and mixin for the package **without** generating any\nstyles.\n- \\`dist/_variables.scss\\` - A file that can be imported into your project that will only include the variables (if they exist) for this package.\n- \\`dist/_functions.scss\\` - A file that can be imported into your project that will only include the functions (if they exist) for this package.\n- \\`dist/_mixins.scss\\` - A file that can be imported into your project that will only include the mixins (if they exist) for this package.\n\nIf a package has any styles that need to be created, the \\`_mixins.scss\\` file will exist and have a \\`react-md-<<PACKAGE_NAME>>\\` mixin\nthat will generate all the styles for this package. So for example, the \\`@react-md/typography\\` package will have a mixin \\`react-md-typography\\`\nand the \\`@react-md/button\\` package will have a mixin \\`react-md-button\\`.\n\n### Including Styles Example\nNow that all of that is out of the way, here is a quick example for how you can include the styles for the recommended \"base\" packages for react-md.\n\n\\`\\`\\`scss\n@import '@react-md/icon/dist/icon';\n@import '@react-md/theme/dist/theme';\n@import '@react-md/typography/dist/typography';\n\n@include react-md-icon;\n@include react-md-theme;\n@include react-md-typography;\n\n// or if you don't need to use any of the provided variables, mixins, or functions, only include the following lines\n@import '@react-md/icon/dist/styles';\n@import '@react-md/theme/dist/styles';\n@import '@react-md/typography/dist/styles';\n\\`\\`\\`\n\nIf you installed the base \\`react-md\\` package instead, these steps can be simplified to:\n\\`\\`\\`scss\n@import 'react-md/dist/react-md';\n\n@include react-md-everything;\n\n// or if you don't need to use any of the provided variables, mixins, or functions, only include the following line\n@import 'react-md/dist/styles';\n\\`\\`\\`\n`;\n\nexport default () => <MarkdownPage markdown={markdown} />;\n","import * as React from \"react\";\nimport cn from \"classnames\";\n\nimport { markdownToHTML } from \"utils/markdown\";\n\nimport \"./markdown.scss\";\n\nexport interface IMarkdownProps {\n  style?: React.CSSProperties;\n  className?: string;\n  markdown: string;\n}\n\ninterface IInnerHTML {\n  __html: string;\n}\n\nexport interface IMarkdownState {\n  html: IInnerHTML;\n  prevMarkdown: string;\n}\n\nexport default class Markdown extends React.Component<IMarkdownProps, IMarkdownState> {\n  public static getDerivedStateFromProps(nextProps: IMarkdownProps, prevState: IMarkdownState) {\n    const { markdown } = nextProps;\n    if (prevState.prevMarkdown !== markdown) {\n      return {\n        html: { __html: markdownToHTML(nextProps.markdown) },\n        prevMarkdown: markdown,\n      }\n    }\n\n    return null;\n  };\n\n  constructor(props: IMarkdownProps) {\n    super(props);\n\n    this.state = {\n      html: { __html: markdownToHTML(props.markdown) },\n      prevMarkdown: props.markdown,\n    };\n  }\n\n  public render() {\n    const { style, className, markdown } = this.props;\n    const { html } = this.state;\n    if (!html.__html || !markdown) {\n      return null;\n    }\n\n    return <div style={style} className={cn(\"markdown-container\", className)} dangerouslySetInnerHTML={html} />;\n  }\n\n  private updateInnerHTML = () => {\n    const { markdown } = this.props;\n    if (!markdown) {\n      return;\n    }\n\n    const html = markdownToHTML(markdown);\n    if (this.state.html.__html !== html) {\n      this.setState({ html: { __html: html } });\n    }\n  };\n}\n","import * as React from \"react\";\nimport cn from \"classnames\";\n\nimport Markdown from \"./Markdown\";\n\nexport interface IMarkdownPageProps {\n  style?: React.CSSProperties;\n  className?: string;\n  markdown: string;\n}\n\nconst MarkdownPage: React.SFC<IMarkdownPageProps> = ({ className, ...props }) => (\n  <Markdown {...props} className={cn(\"markdown-page rmd-text-container\", className)} />\n);\n\nexport default MarkdownPage;\n","import Markdown from \"./Markdown\";\n\nexport default Markdown;\nexport { Markdown };\n\nexport { default as MarkdownPage } from \"./MarkdownPage\";\n","import * as marked from \"marked\";\nimport * as Prism from \"prismjs\";\n\nimport \"prismjs/components/prism-bash\";\nimport \"prismjs/components/prism-css-extras\";\nimport \"prismjs/components/prism-scss\";\nimport \"prismjs/components/prism-jsx\";\nimport \"prismjs/components/prism-typescript\";\nimport \"prismjs/components/prism-git\";\n\nexport function getLanguage(s: string) {\n  if (!s) {\n    return \"markup\";\n  } else if (s === \"tsx\") {\n    return \"typescript\";\n  } else if (s === \"sh\") {\n    return \"bash\";\n  } else if (s === \"diff\") {\n    return \"git\";\n  }\n\n  return s;\n}\n\nmarked.setOptions({\n  renderer: new marked.Renderer(),\n  highlight: (code, lang) => Prism.highlight(code, Prism.languages[getLanguage(lang)]),\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: false,\n  smartLists: true,\n  smartypants: false,\n});\n\nexport interface IMarkdownOptions {\n  showToolbar?: boolean;\n  showLineNumbers?: boolean;\n}\n\nexport type MarkdownTransformation = (markdown: string, options?: IMarkdownOptions) => string;\nexport type MarkdownTransformationList = MarkdownTransformation[];\n\nconst preTransforms: MarkdownTransformationList = [];\nconst postTransforms: MarkdownTransformationList = [\n  markdown => markdown.replace(/<a href/g, '<a class=\"rmd-link\" href'),\n  markdown =>\n    markdown.replace(\n      /(<h2 id=\"table-of-contents\")(>Table of Contents<\\/h2>\\r?\\n<ul)/,\n      (_, s1, s2) => `${s1} class=\"markdown-toc\"${s2} class=\"markdown-toc__list\"`\n    ),\n  markdown =>\n    markdown.replace(/yarn add/g, '<span class=\"token function\">yarn</span> <span class=\"token function\">add</span>'),\n];\n\nexport function transform(markdown: string, transforms: MarkdownTransformation[], options?: IMarkdownOptions) {\n  return transforms.reduce((s, t) => t(s, options), markdown);\n}\n\nexport function markdownToHTML(markdown: string, options?: IMarkdownOptions) {\n  return transform(marked.parse(transform(markdown, preTransforms, options)), postTransforms, options);\n}\n"],"sourceRoot":""}