{"version":3,"sources":["components/Changelog.tsx","components/Markdown/Markdown.tsx","components/Markdown/MarkdownPage.tsx","components/Markdown/index.ts","components/packages/Sheet/Changelog/CHANGELOG.md","components/packages/Sheet/Changelog/Changelog.tsx","components/packages/Sheet/Changelog/index.ts","utils/markdown/index.ts"],"names":["Changelog","_a","changelog","markdown","split","length","react__WEBPACK_IMPORTED_MODULE_0__","components_Markdown__WEBPACK_IMPORTED_MODULE_1__","__webpack_exports__","Markdown","_super","props","_this","call","this","updateLinks","history","container","current","link","test","href","onclick","event","preventDefault","push","replace","window","location","origin","_i","links_1","Array","from","querySelectorAll","state","html","__html","Object","utils_markdown__WEBPACK_IMPORTED_MODULE_4__","prevMarkdown","react__WEBPACK_IMPORTED_MODULE_1__","tslib__WEBPACK_IMPORTED_MODULE_0__","getDerivedStateFromProps","nextProps","prevState","prototype","componentDidMount","componentDidUpdate","prevProps","render","style","className","ref","classnames__WEBPACK_IMPORTED_MODULE_2___default","dangerouslySetInnerHTML","react_router__WEBPACK_IMPORTED_MODULE_3__","MarkdownPage","_Markdown__WEBPACK_IMPORTED_MODULE_3__","_Markdown__WEBPACK_IMPORTED_MODULE_0__","module","exports","__webpack_require__","components_Changelog__WEBPACK_IMPORTED_MODULE_1__","_Changelog__WEBPACK_IMPORTED_MODULE_0__","getLanguage","s","marked__WEBPACK_IMPORTED_MODULE_0__","renderer","highlight","code","lang","prismjs__WEBPACK_IMPORTED_MODULE_1__","gfm","tables","breaks","pedantic","sanitize","smartLists","smartypants","preTransforms","postTransforms","_","s1","s2","transform","transforms","options","reduce","t","markdownToHTML"],"mappings":"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","file":"js/51.7aaaa6b1.chunk.min.js","sourcesContent":["import * as React from \"react\";\nimport { MarkdownPage } from \"components/Markdown\";\n\nexport interface IChangelogProps {\n  changelog: string;\n}\n\nconst Changelog: React.SFC<IChangelogProps> = ({ changelog }) => {\n  let markdown = \"# Changelog\";\n  if (changelog.split(/\\r?\\n/).length <= 3) {\n    markdown = `${markdown}\n\n#### This package is completely new starting with v2 and has not had any changes yet.\n`;\n  } else {\n    markdown = `${markdown}\n\n${changelog}`;\n  }\n\n  return <MarkdownPage markdown={markdown} />;\n};\n\nexport default Changelog;\n","import * as React from \"react\";\nimport cn from \"classnames\";\nimport { withRouter, RouteComponentProps } from \"react-router\";\n\nimport { markdownToHTML } from \"utils/markdown\";\n\nimport \"./markdown.scss\";\n\nexport interface IMarkdownProps extends RouteComponentProps<any> {\n  style?: React.CSSProperties;\n  className?: string;\n  markdown: string;\n}\n\ninterface IInnerHTML {\n  __html: string;\n}\n\nexport interface IMarkdownState {\n  html: IInnerHTML;\n  prevMarkdown: string;\n}\n\nclass Markdown extends React.Component<IMarkdownProps, IMarkdownState> {\n  public static getDerivedStateFromProps(nextProps: IMarkdownProps, prevState: IMarkdownState) {\n    const { markdown } = nextProps;\n    if (prevState.prevMarkdown !== markdown) {\n      return {\n        html: { __html: markdownToHTML(nextProps.markdown) },\n        prevMarkdown: markdown,\n      };\n    }\n\n    return null;\n  }\n\n  private container: React.RefObject<HTMLDivElement>;\n  constructor(props: IMarkdownProps) {\n    super(props);\n\n    this.state = {\n      html: { __html: markdownToHTML(props.markdown) },\n      prevMarkdown: props.markdown,\n    };\n\n    this.container = React.createRef();\n  }\n\n  public componentDidMount() {\n    this.updateLinks();\n  }\n\n  public componentDidUpdate(prevProps: IMarkdownProps, prevState: IMarkdownState) {\n    if (this.state.html !== prevState.html) {\n      this.updateLinks();\n    }\n  }\n\n  public render() {\n    const { style, className, markdown } = this.props;\n    const { html } = this.state;\n    if (!html.__html || !markdown) {\n      return null;\n    }\n\n    return (\n      <div\n        ref={this.container}\n        style={style}\n        className={cn(\"markdown-container\", className)}\n        dangerouslySetInnerHTML={html}\n      />\n    );\n  }\n\n  private updateLinks = () => {\n    const { history } = this.props;\n    if (!this.container.current) {\n      return;\n    }\n\n    const links = Array.from(this.container.current.querySelectorAll(\".rmd-link\") as NodeListOf<\n      HTMLAnchorElement\n    >);\n    for (const link of links) {\n      if (/^https?:\\/\\/(localhost|react-md|mlaursen\\.github\\.io\\/react-md\\/)/.test(link.href)) {\n        // update internal links to use browser history instead of native behavior\n        link.onclick = function handleClick(event: MouseEvent) {\n          event.preventDefault();\n          history.push(link.href.replace(window.location.origin, \"\"));\n        };\n      }\n    }\n  };\n}\n\nexport default withRouter(Markdown);\n","import * as React from \"react\";\nimport cn from \"classnames\";\n\nimport Markdown from \"./Markdown\";\n\nexport interface IMarkdownPageProps {\n  style?: React.CSSProperties;\n  className?: string;\n  markdown: string;\n}\n\nconst MarkdownPage: React.SFC<IMarkdownPageProps> = ({ className, ...props }) => (\n  <Markdown {...props} className={cn(\"markdown-page rmd-text-container\", className)} />\n);\n\nexport default MarkdownPage;\n","import Markdown from \"./Markdown\";\n\nexport default Markdown;\nexport { Markdown };\n\nexport { default as MarkdownPage } from \"./MarkdownPage\";\n","module.exports = \"## Table of Contents\\n\\n\"","import * as React from \"react\";\n\nimport Changelog from \"components/Changelog\";\n\nconst changelog = require(\"./CHANGELOG.md\");\n\nexport default () => <Changelog changelog={changelog} />;\n","import Changelog from \"./Changelog\";\n\nexport default Changelog;\n","import * as marked from \"marked\";\nimport * as Prism from \"prismjs\";\n\nimport \"prismjs/components/prism-bash\";\nimport \"prismjs/components/prism-css-extras\";\nimport \"prismjs/components/prism-scss\";\nimport \"prismjs/components/prism-jsx\";\nimport \"prismjs/components/prism-typescript\";\nimport \"prismjs/components/prism-git\";\n\nexport function getLanguage(s: string) {\n  if (!s) {\n    return \"markup\";\n  } else if (s === \"tsx\") {\n    return \"typescript\";\n  } else if (s === \"sh\") {\n    return \"bash\";\n  } else if (s === \"diff\") {\n    return \"git\";\n  }\n\n  return s;\n}\n\nmarked.setOptions({\n  renderer: new marked.Renderer(),\n  highlight: (code, lang) => Prism.highlight(code, Prism.languages[getLanguage(lang)]),\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: false,\n  smartLists: true,\n  smartypants: false,\n});\n\nexport interface IMarkdownOptions {\n  showToolbar?: boolean;\n  showLineNumbers?: boolean;\n}\n\nexport type MarkdownTransformation = (markdown: string, options?: IMarkdownOptions) => string;\nexport type MarkdownTransformationList = MarkdownTransformation[];\n\nconst preTransforms: MarkdownTransformationList = [];\nconst postTransforms: MarkdownTransformationList = [\n  markdown => markdown.replace(/<a href/g, '<a class=\"rmd-link\" href'),\n  markdown =>\n    markdown.replace(\n      /(<h2 id=\"table-of-contents\")(>Table of Contents<\\/h2>\\r?\\n<ul)/,\n      (_, s1, s2) => `${s1} class=\"markdown-toc\"${s2} class=\"markdown-toc__list\"`\n    ),\n  markdown =>\n    markdown.replace(\n      /yarn add/g,\n      '<span class=\"token function\">yarn</span> <span class=\"token function\">add</span>'\n    ),\n];\n\nexport function transform(\n  markdown: string,\n  transforms: MarkdownTransformation[],\n  options?: IMarkdownOptions\n) {\n  return transforms.reduce((s, t) => t(s, options), markdown);\n}\n\nexport function markdownToHTML(markdown: string, options?: IMarkdownOptions) {\n  return transform(\n    marked.parse(transform(markdown, preTransforms, options)),\n    postTransforms,\n    options\n  );\n}\n"],"sourceRoot":""}