{"version":3,"sources":["../../link/es/Link.js","../../link/es/index.js","components/Anchor/Anchor.tsx","components/Anchor/TextAnchor.tsx","components/Anchor/index.ts","components/DocumentationPage/Banner.tsx","components/DocumentationPage/BannerSource.tsx","components/DocumentationPage/DocumentationPage.tsx","components/DocumentationPage/SectionTitle.tsx","components/DocumentationPage/index.ts","components/Link.tsx","components/Markdown/Markdown.tsx","components/Markdown/MarkdownPage.tsx","components/Markdown/index.ts","components/packages/Typography/Exports/Exports.tsx","components/packages/Typography/Exports/PropTable.tsx","components/packages/Typography/Exports/Props.tsx","components/packages/Typography/Exports/Text.tsx","components/packages/Typography/Exports/dummyData.ts","components/packages/Typography/Exports/index.ts","utils/markdown/index.ts"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","Link_Link","react","[object Object]","_a","this","props","className","propClassName","component","href","propHref","children","rel","propRel","flexCentered","preventMaliciousTarget","target","undefined","classnames_default","rmd-link--flex-centered","assign","propTypes","prop_types","defaultProps","__webpack_require__","d","__webpack_exports__","Anchor","_super","_this","apply","arguments","keyboardClicked","copyLinkToClipboard","area","document","createElement","value","window","location","origin","pathname","id","body","appendChild","select","execCommand","removeChild","handleClick","event","currentTarget","blur","handleKeyDown","tslib__WEBPACK_IMPORTED_MODULE_0__","render","after","title","react__WEBPACK_IMPORTED_MODULE_1__","components_Link__WEBPACK_IMPORTED_MODULE_3__","to","classnames__WEBPACK_IMPORTED_MODULE_2___default","anchor--before","anchor--after","onKeyDown","onClick","anchorTargetClassName","TextAnchor","propId","linkClassName","lodash__WEBPACK_IMPORTED_MODULE_4__","_react_md_typography__WEBPACK_IMPORTED_MODULE_3__","_Anchor__WEBPACK_IMPORTED_MODULE_5__","_TextAnchor__WEBPACK_IMPORTED_MODULE_1__","Banner","source","sourceLine","_react_md_typography__WEBPACK_IMPORTED_MODULE_2__","_BannerSource__WEBPACK_IMPORTED_MODULE_3__","type","SOURCE_PREFIX","NODE_ENV","PUBLIC_URL","GITHUB_URL","BannerSource","fullSource","content","matchMedia","matches","react__WEBPACK_IMPORTED_MODULE_0__","_react_md_icon__WEBPACK_IMPORTED_MODULE_1__","iconClassName","DocumentationPage","classnames__WEBPACK_IMPORTED_MODULE_1___default","SectionTitle","components_Anchor__WEBPACK_IMPORTED_MODULE_3__","_DocumentationPage__WEBPACK_IMPORTED_MODULE_0__","_Banner__WEBPACK_IMPORTED_MODULE_1__","_SectionTitle__WEBPACK_IMPORTED_MODULE_2__","Link","_react_md_link__WEBPACK_IMPORTED_MODULE_3__","react_router_dom__WEBPACK_IMPORTED_MODULE_2__","Markdown","updateLinks","history","container","current","link","test","onclick","preventDefault","push","replace","_i","links_1","Array","from","querySelectorAll","state","html","__html","utils_markdown__WEBPACK_IMPORTED_MODULE_4__","markdown","prevMarkdown","getDerivedStateFromProps","nextProps","prevState","componentDidMount","componentDidUpdate","prevProps","style","ref","dangerouslySetInnerHTML","react_router__WEBPACK_IMPORTED_MODULE_3__","MarkdownPage","_Markdown__WEBPACK_IMPORTED_MODULE_3__","_Markdown__WEBPACK_IMPORTED_MODULE_0__","TypescriptDefinitions","components_Loadable__WEBPACK_IMPORTED_MODULE_4__","Promise","all","then","bind","Exports","match","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","exact","path","react_router_dom__WEBPACK_IMPORTED_MODULE_3__","_Text__WEBPACK_IMPORTED_MODULE_6__","components_NotFound__WEBPACK_IMPORTED_MODULE_5__","Header","Cell","Row","DB","getRecommendedExternalProps","references","find","keys_1","attributes","HTMLAttributes","filter","name","includes","console","log","getTypeReferenceValue","typeReference","file","startsWith","tsType","getPrettyType","attribute","typeReferences","reduce","returnValue","multiline","PropTable","recommendedExternal","allExternal","typeParameters","thing","recommendedExternals","n","map","required","defaultValue","description","key","prop-table__code--multiline","components_Markdown__WEBPACK_IMPORTED_MODULE_3__","Props","componentReferences","lodash__WEBPACK_IMPORTED_MODULE_1__","mainProps","components_DocumentationPage__WEBPACK_IMPORTED_MODULE_2__","_PropTable__WEBPACK_IMPORTED_MODULE_3__","TextDocumentation","keys","components_DocumentationPage__WEBPACK_IMPORTED_MODULE_3__","components_Markdown__WEBPACK_IMPORTED_MODULE_2__","_Props__WEBPACK_IMPORTED_MODULE_6__","_dummyData__WEBPACK_IMPORTED_MODULE_5__","db","typography","components","Text","links","TextContainer","textFile","TextTypes","DefaultTextProps","TextRenderFunction","ITextProps","extends","typeParameterReferences","ITextDefaultProps","textContainerFile","TextContainerSize","DefaultTextContainerProps","TYPOGRAPHY_PACKAGE","_Exports__WEBPACK_IMPORTED_MODULE_0__","getLanguage","marked__WEBPACK_IMPORTED_MODULE_0__","renderer","highlight","code","lang","prismjs__WEBPACK_IMPORTED_MODULE_1__","gfm","tables","breaks","pedantic","sanitize","smartLists","smartypants","headerIds","preTransforms","postTransforms","_","s1","s2","transform","transforms","options","markdownToHTML"],"mappings":"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","file":"js/8.ad6802b0.chunk.min.js","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n};\r\nimport * as React from \"react\";\r\nimport * as PropTypes from \"prop-types\";\r\nimport cn from \"classnames\";\r\n/**\r\n * The `Link` component is used to render links within your app with a basic styles applied and\r\n * some additional \"security\" built-in if using the `rel=\"_blank\"`. This can be used with a browser\r\n * routing library like `react-router` or `reach-router` by providing the `Link` as the `linkComponent`\r\n * prop.\r\n */\r\nexport default class Link extends React.Component {\r\n    render() {\r\n        const _a = this.props, { className: propClassName, component, href: propHref, children, rel: propRel, flexCentered, preventMaliciousTarget } = _a, props = __rest(_a, [\"className\", \"component\", \"href\", \"children\", \"rel\", \"flexCentered\", \"preventMaliciousTarget\"]);\r\n        const { target } = props;\r\n        const href = propHref === \"\" ? undefined : propHref;\r\n        const className = cn(\"rmd-link\", {\r\n            \"rmd-link--flex-centered\": flexCentered,\r\n        }, propClassName);\r\n        let rel = propRel;\r\n        if (typeof rel !== \"string\" && target === \"_blank\") {\r\n            rel = \"noopener noreferrer\";\r\n        }\r\n        if (component) {\r\n            return React.createElement(component, Object.assign({}, props, { rel, href, className }), children);\r\n        }\r\n        return (React.createElement(\"a\", Object.assign({ className: className }, props, { href: href, rel: rel }), children));\r\n    }\r\n}\r\nLink.propTypes = {\r\n    className: PropTypes.string,\r\n    href: PropTypes.string,\r\n    component: PropTypes.func,\r\n    target: PropTypes.string,\r\n    rel: PropTypes.string,\r\n    preventMaliciousTarget: PropTypes.bool,\r\n    flexCentered: PropTypes.bool,\r\n};\r\nLink.defaultProps = {\r\n    preventMaliciousTarget: true,\r\n    flexCentered: false,\r\n};\r\n//# sourceMappingURL=Link.js.map","export { default as Link } from \"./Link\";\r\nexport * from \"./Link\";\r\n//# sourceMappingURL=index.js.map","import * as React from \"react\";\r\nimport cn from \"classnames\";\r\n\r\nimport Link from \"components/Link\";\r\n\r\nimport \"./anchor.scss\";\r\n\r\nexport interface IAnchorProps {\r\n  id: string;\r\n  title?: string;\r\n  className?: string;\r\n  after?: boolean;\r\n}\r\n\r\nexport interface IAnchorDefaultProps {\r\n  after: boolean;\r\n}\r\n\r\nexport type AnchorWithDefaultProps = IAnchorProps & IAnchorDefaultProps;\r\n\r\nexport default class Anchor extends React.Component<IAnchorProps> {\r\n  public static readonly anchorTargetClassName = \"anchor-target\";\r\n  public static defaultProps: IAnchorDefaultProps = {\r\n    after: false,\r\n  };\r\n\r\n  private keyboardClicked: boolean = false;\r\n\r\n  public render() {\r\n    const { id, className, after } = this.props as AnchorWithDefaultProps;\r\n    let { title } = this.props;\r\n    if (title) {\r\n      title = `Quick shareable link to ${title}`;\r\n    }\r\n\r\n    return (\r\n      <Link\r\n        to={`#${id}`}\r\n        title={title}\r\n        className={cn(\"anchor\", { \"anchor--before\": !after, \"anchor--after\": after }, className)}\r\n        onKeyDown={this.handleKeyDown}\r\n        onClick={this.handleClick}\r\n      >\r\n        #\r\n      </Link>\r\n    );\r\n  }\r\n\r\n  private copyLinkToClipboard = () => {\r\n    const area = document.createElement(\"textarea\") as HTMLTextAreaElement;\r\n    area.value = `${window.location.origin}${window.location.pathname}#${this.props.id}`;\r\n    document.body.appendChild(area);\r\n    area.select();\r\n\r\n    try {\r\n      document.execCommand(\"copy\");\r\n    } catch (e) {\r\n      //\r\n    } finally {\r\n      document.body.removeChild(area);\r\n    }\r\n  };\r\n\r\n  private handleClick = (event: React.MouseEvent<HTMLAnchorElement>) => {\r\n    this.copyLinkToClipboard();\r\n\r\n    if (this.keyboardClicked) {\r\n      this.keyboardClicked = false;\r\n      return;\r\n    }\r\n\r\n    event.currentTarget.blur();\r\n  };\r\n\r\n  private handleKeyDown = () => {\r\n    this.keyboardClicked = true;\r\n  };\r\n}\r\n","import * as React from \"react\";\r\nimport cn from \"classnames\";\r\nimport { Text, ITextProps } from \"@react-md/typography\";\r\nimport { kebabCase } from \"lodash\";\r\n\r\nimport { IAnchorProps, default as Anchor } from \"./Anchor\";\r\n\r\nexport interface ITextAnchorProps extends ITextProps, IAnchorProps {\r\n  linkClassName?: string;\r\n}\r\n\r\nconst TextAnchor: React.SFC<ITextAnchorProps> = ({\r\n  id: propId,\r\n  title,\r\n  className,\r\n  linkClassName,\r\n  after,\r\n  children,\r\n  ...props\r\n}) => {\r\n  const id = kebabCase(propId);\r\n\r\n  return (\r\n    <Text id={id} {...props} className={cn(Anchor.anchorTargetClassName, className)}>\r\n      {children}\r\n      <Anchor id={id} title={title} className={linkClassName} after={after} />\r\n    </Text>\r\n  );\r\n};\r\n\r\nTextAnchor.defaultProps = {\r\n  after: true,\r\n};\r\n\r\nexport default TextAnchor;\r\n","export { default as Anchor } from \"./Anchor\";\r\nexport * from \"./Anchor\";\r\n\r\nexport { default as TextAnchor } from \"./TextAnchor\";\r\nexport * from \"./TextAnchor\";\r\n","import * as React from \"react\";\r\nimport { Text, ITextProps } from \"@react-md/typography\";\r\n\r\nimport BannerSource from \"./BannerSource\";\r\n\r\nexport interface IBannerProps extends ITextProps {\r\n  source?: string;\r\n  sourceLine?: number;\r\n}\r\n\r\ninterface IBannerWithSource extends IBannerProps {\r\n  source: string;\r\n  sourceLine: number;\r\n}\r\n\r\nconst Banner: React.SFC<IBannerProps> = ({ children, className, source, sourceLine, ...props }) => (\r\n  <Text {...props} className=\"documentation-page__banner\">\r\n    {children}\r\n    {source && sourceLine && <BannerSource source={source} sourceLine={sourceLine} />}\r\n  </Text>\r\n);\r\n\r\nBanner.defaultProps = {\r\n  type: \"headline-2\",\r\n};\r\n\r\nexport default Banner;\r\n","import * as React from \"react\";\r\nimport { FontIcon } from \"@react-md/icon\";\r\n\r\nconst SOURCE_PREFIX = process.env.GITHUB_URL || \"https://github.com/mlaursen/react-md/tree/next/\";\r\n\r\nexport interface IBannerSourceProps {\r\n  source: string;\r\n  sourceLine: number;\r\n}\r\n\r\nconst BannerSource: React.SFC<IBannerSourceProps> = ({ source, sourceLine }) => {\r\n  const fullSource = `${SOURCE_PREFIX}${source}#L${sourceLine}`;\r\n  let content: React.ReactNode = fullSource;\r\n  if (window.matchMedia(\"max-width: 600px\").matches) {\r\n    content = <FontIcon iconClassName=\"fa fa-github\" />;\r\n  }\r\n  return (\r\n    <a href={fullSource} className=\"documentation-page__banner-source\">\r\n      {content}\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default BannerSource;\r\n","import * as React from \"react\";\r\nimport cn from \"classnames\";\r\n\r\nimport \"./documentation-page.scss\";\r\n\r\nexport interface IDocumentationPageProps {\r\n  className?: string;\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst DocumentationPage: React.SFC<IDocumentationPageProps> = ({ className, children }) => (\r\n  <div className={cn(\"documentation-page\", className)}>{children}</div>\r\n);\r\n\r\nexport default DocumentationPage;\r\n","import * as React from \"react\";\r\nimport cn from \"classnames\";\r\nimport { TextAnchor, ITextAnchorProps } from \"components/Anchor\";\r\n\r\nconst SectionTitle: React.SFC<ITextAnchorProps> = ({ className, children, ...props }) => (\r\n  <TextAnchor {...props} className={cn(\"documentation-page__section-title\", className)}>\r\n    {children}\r\n  </TextAnchor>\r\n);\r\n\r\nSectionTitle.defaultProps = {\r\n  type: \"headline-3\",\r\n};\r\n\r\nexport default SectionTitle;\r\n","export { default as DocumentationPage } from \"./DocumentationPage\";\r\nexport * from \"./DocumentationPage\";\r\n\r\nexport { default as Banner } from \"./Banner\";\r\nexport * from \"./Banner\";\r\n\r\nexport { default as SectionTitle } from \"./SectionTitle\";\r\nexport * from \"./SectionTitle\";\r\n","import * as React from \"react\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport { Link as ReactMDLink, ILinkProps } from \"@react-md/link\";\r\n\r\nconst Link: React.SFC<ILinkProps> = props => <ReactMDLink {...props} component={RouterLink} />;\r\nexport default Link;\r\n","import * as React from \"react\";\r\nimport cn from \"classnames\";\r\nimport { withRouter, RouteComponentProps } from \"react-router\";\r\n\r\nimport { markdownToHTML } from \"utils/markdown\";\r\n\r\nimport \"./markdown.scss\";\r\n\r\nexport interface IMarkdownProps extends RouteComponentProps<any> {\r\n  style?: React.CSSProperties;\r\n  className?: string;\r\n  markdown: string;\r\n}\r\n\r\ninterface IInnerHTML {\r\n  __html: string;\r\n}\r\n\r\nexport interface IMarkdownState {\r\n  html: IInnerHTML;\r\n  prevMarkdown: string;\r\n}\r\n\r\nclass Markdown extends React.Component<IMarkdownProps, IMarkdownState> {\r\n  public static getDerivedStateFromProps(nextProps: IMarkdownProps, prevState: IMarkdownState) {\r\n    const { markdown } = nextProps;\r\n    if (prevState.prevMarkdown !== markdown) {\r\n      return {\r\n        html: { __html: markdownToHTML(nextProps.markdown) },\r\n        prevMarkdown: markdown,\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private container: React.RefObject<HTMLDivElement>;\r\n  constructor(props: IMarkdownProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      html: { __html: markdownToHTML(props.markdown) },\r\n      prevMarkdown: props.markdown,\r\n    };\r\n\r\n    this.container = React.createRef();\r\n  }\r\n\r\n  public componentDidMount() {\r\n    this.updateLinks();\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: IMarkdownProps, prevState: IMarkdownState) {\r\n    if (this.state.html !== prevState.html) {\r\n      this.updateLinks();\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    const { style, className, markdown } = this.props;\r\n    const { html } = this.state;\r\n    if (!html.__html || !markdown) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        ref={this.container}\r\n        style={style}\r\n        className={cn(\"markdown-container\", className)}\r\n        dangerouslySetInnerHTML={html}\r\n      />\r\n    );\r\n  }\r\n\r\n  private updateLinks = () => {\r\n    const { history } = this.props;\r\n    if (!this.container.current) {\r\n      return;\r\n    }\r\n\r\n    const links = Array.from(this.container.current.querySelectorAll(\".rmd-link\") as NodeListOf<\r\n      HTMLAnchorElement\r\n    >);\r\n    for (const link of links) {\r\n      if (/^https?:\\/\\/(localhost|react-md|mlaursen\\.github\\.io\\/react-md\\/)/.test(link.href)) {\r\n        // update internal links to use browser history instead of native behavior\r\n        link.onclick = function handleClick(event: MouseEvent) {\r\n          event.preventDefault();\r\n          history.push(link.href.replace(window.location.origin, \"\"));\r\n        };\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default withRouter(Markdown);\r\n","import * as React from \"react\";\r\nimport cn from \"classnames\";\r\n\r\nimport Markdown from \"./Markdown\";\r\n\r\nexport interface IMarkdownPageProps {\r\n  style?: React.CSSProperties;\r\n  className?: string;\r\n  markdown: string;\r\n}\r\n\r\nconst MarkdownPage: React.SFC<IMarkdownPageProps> = ({ className, ...props }) => (\r\n  <Markdown {...props} className={cn(\"markdown-page rmd-text-container\", className)} />\r\n);\r\n\r\nexport default MarkdownPage;\r\n","import Markdown from \"./Markdown\";\r\n\r\nexport default Markdown;\r\nexport { Markdown };\r\n\r\nexport { default as MarkdownPage } from \"./MarkdownPage\";\r\n","import * as React from \"react\";\r\nimport * as Router from \"react-router\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\n\r\nimport Loadable from \"components/Loadable\";\r\nimport NotFound from \"components/NotFound\";\r\nimport Text from \"./Text\";\r\n\r\nconst TypescriptDefinitions = Loadable(() => import(\"components/Exports/DerivedDefinitionsPage\"));\r\n\r\nconst Exports: React.SFC<Router.RouteComponentProps<void>> = ({ match }) => (\r\n  <Switch>\r\n    <Redirect exact={true} from={match.path} to={`${match.path}/text`} />\r\n    <Route path={`${match.path}/typescript-definitions`} component={TypescriptDefinitions} />\r\n    <Route path={`${match.path}/text`} component={Text} />\r\n    <Route component={NotFound} />\r\n  </Switch>\r\n);\r\n\r\nexport default Exports;\r\n","import * as React from \"react\";\r\nimport cn from \"classnames\";\r\nimport { Text } from \"@react-md/typography\";\r\n\r\nimport {\r\n  IDocumentedInterfaceAttribute,\r\n  IDocumentedFile,\r\n  ITypeParameter,\r\n} from \"components/Exports/types.d\";\r\nimport { Markdown } from \"components/Markdown\";\r\n\r\ntype TablePart = React.SFC<{ className?: string; children: React.ReactNode }>;\r\n\r\nconst Header: TablePart = ({ children }) => (\r\n  <th className=\"prop-table__cell prop-table__cell--header\">{children}</th>\r\n);\r\n\r\nconst Cell: TablePart = ({ children, className }) => (\r\n  <td className={cn(\"prop-table__cell\", className)}>{children}</td>\r\n);\r\n\r\nconst Row: TablePart = ({ children, className }) => (\r\n  <tr className={cn(\"prop-table__row\", className)}>{children}</tr>\r\n);\r\n\r\ninterface IHTMLAttribute {\r\n  name: string;\r\n  attributes: IHTMLAttributeAttribute[];\r\n}\r\n\r\ninterface IHTMLAttributeAttribute {\r\n  name: string;\r\n  comment: string;\r\n  value: string;\r\n}\r\n\r\ninterface IHTMLAttributeLookup {\r\n  [key: string]: IHTMLAttribute;\r\n}\r\n\r\nconst DB = require(\"./libraryTypedoc.json\");\r\n\r\nexport interface IPropTableProps {\r\n  attributes: IDocumentedInterfaceAttribute[];\r\n  file: IDocumentedFile;\r\n  references: string[];\r\n  typeParameters: ITypeParameter[];\r\n}\r\n\r\nexport interface IPropTableState {\r\n  recommendedExternal: boolean;\r\n  allExternal: boolean;\r\n}\r\n\r\nfunction getRecommendedExternalProps(references: string[]): IDocumentedInterfaceAttribute[] {\r\n  if (references.find(ref => /HTMLDivElement/.test(ref))) {\r\n    const keys = [\"style\", \"class\", \"onClick\"];\r\n    const attributes = (DB.HTMLAttributes.attributes as IDocumentedInterfaceAttribute[]).filter(\r\n      ({ name }) => keys.includes(name)\r\n    );\r\n    console.log(\"attributes:\", attributes);\r\n    return attributes;\r\n  }\r\n  return [];\r\n}\r\n\r\nfunction getTypeReferenceValue(typeReference: string, file: IDocumentedFile) {\r\n  if (typeReference.startsWith(\"React\")) {\r\n    return typeReference;\r\n  }\r\n\r\n  const type = DB[typeReference] || file[typeReference];\r\n  if (!type || type.type !== \"type\") {\r\n    console.log(\"type:\", type);\r\n    return typeReference;\r\n  } else if (/^(union|function reflection)$/.test(type.tsType)) {\r\n    return type.value;\r\n  }\r\n  console.log(\"IUNN\");\r\n  console.log(\"type:\", type);\r\n\r\n  return typeReference;\r\n}\r\n\r\nfunction getPrettyType(\r\n  attribute: IDocumentedInterfaceAttribute,\r\n  file: IDocumentedFile\r\n): { children: React.ReactNode; multiline: boolean } {\r\n  return attribute.typeReferences.reduce(\r\n    (returnValue, ref) => {\r\n      const value = getTypeReferenceValue(ref, file);\r\n      if (/\\r?\\n/.test(value)) {\r\n        returnValue.multiline = true;\r\n      }\r\n      returnValue.children = returnValue.children.replace(ref, value);\r\n      return returnValue;\r\n    },\r\n    { children: attribute.type, multiline: false }\r\n  );\r\n}\r\n\r\nexport default class PropTable extends React.Component<IPropTableProps, IPropTableState> {\r\n  constructor(props: IPropTableProps) {\r\n    super(props);\r\n\r\n    this.state = { recommendedExternal: true, allExternal: false };\r\n  }\r\n\r\n  public render() {\r\n    const { attributes, file, typeParameters, references } = this.props;\r\n    const thing = file[references[0]];\r\n    let recommendedExternals: React.ReactNode = null;\r\n    if (thing && thing.typeReferences.find(n => n === \"HTMLAttributes\")) {\r\n      recommendedExternals = getRecommendedExternalProps(\r\n        thing.typeReferences.filter(name => name !== \"HTMLAttributes\")\r\n      ).map(attribute => {\r\n        console.log(\"attribute:\", attribute);\r\n        return null;\r\n        // const { name, required, defaultValue, description } = attribute;\r\n        // const type = getPrettyType(attribute, file);\r\n        // return (\r\n        //   <Row key={name}>\r\n        //     <Cell>\r\n        //       {`${name}${required ? ` *` : \"\"}`}\r\n        //       <Text>External</Text>\r\n        //     </Cell>\r\n        //     <Cell>\r\n        //       <code\r\n        //         className={cn(\"prop-table__code\", {\r\n        //           \"prop-table__code--multiline\": type.multiline,\r\n        //         })}\r\n        //       >\r\n        //         {type.children}\r\n        //       </code>\r\n        //     </Cell>\r\n        //     <Cell>{defaultValue && <code className=\"prop-table__code\">{defaultValue}</code>}</Cell>\r\n        //     <Cell className=\"prop-table__description\">\r\n        //       <Markdown markdown={description} />\r\n        //     </Cell>\r\n        //   </Row>\r\n        // );\r\n      });\r\n    }\r\n    // console.log(\"thing:\", thing);\r\n    // console.log(\"DB:\", DB);\r\n    return (\r\n      <div className=\"scroll-wrapper\">\r\n        <table className=\"prop-table\">\r\n          <thead>\r\n            <Row>\r\n              <Header>Name</Header>\r\n              <Header>Type</Header>\r\n              <Header>Default Value</Header>\r\n              <Header>Description</Header>\r\n            </Row>\r\n          </thead>\r\n          <tbody>\r\n            {attributes.map(attribute => {\r\n              const { name, required, defaultValue, description } = attribute;\r\n              const type = getPrettyType(attribute, file);\r\n              return (\r\n                <Row key={name}>\r\n                  <Cell>{`${name}${required ? ` *` : \"\"}`}</Cell>\r\n                  <Cell>\r\n                    <code\r\n                      className={cn(\"prop-table__code\", {\r\n                        \"prop-table__code--multiline\": type.multiline,\r\n                      })}\r\n                    >\r\n                      {type.children}\r\n                    </code>\r\n                  </Cell>\r\n                  <Cell>\r\n                    {defaultValue && <code className=\"prop-table__code\">{defaultValue}</code>}\r\n                  </Cell>\r\n                  <Cell className=\"prop-table__description\">\r\n                    <Markdown markdown={description} />\r\n                  </Cell>\r\n                </Row>\r\n              );\r\n            })}\r\n            {recommendedExternals}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { uniq, flatten } from \"lodash\";\r\nimport { SectionTitle } from \"components/DocumentationPage\";\r\n\r\nimport {\r\n  IDocumentedFile,\r\n  IDocumentedComponent,\r\n  IDocumentedInterface,\r\n} from \"components/Exports/types.d\";\r\n\r\nimport PropTable from \"./PropTable\";\r\n\r\nexport interface IPropsProps {\r\n  file: IDocumentedFile;\r\n  component: IDocumentedComponent;\r\n}\r\n\r\nconst Props: React.SFC<IPropsProps> = ({ file, component }) => {\r\n  const componentReferences = uniq(\r\n    flatten(component.typeParameters.map(({ typeReferences }) => typeReferences))\r\n  );\r\n\r\n  const mainProps = file[component.props] as IDocumentedInterface;\r\n  if (!mainProps || mainProps.type !== \"interface\") {\r\n    return null;\r\n  }\r\n\r\n  const external = {};\r\n\r\n  // if (componentReferences.length && mainProps.typeParameters.length) {\r\n  // }\r\n  // const mainProps: IDocumentedInterface | undefined = file[propReference]\r\n  return (\r\n    <React.Fragment>\r\n      <SectionTitle id=\"props\">Props</SectionTitle>\r\n      <PropTable\r\n        attributes={mainProps.attributes}\r\n        file={file}\r\n        typeParameters={mainProps.typeParameters}\r\n        references={componentReferences}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Props;\r\n","import * as React from \"react\";\r\nimport { Text, TextContainer } from \"@react-md/typography\";\r\nimport { uniq } from \"lodash\";\r\n\r\nimport { Markdown } from \"components/Markdown\";\r\nimport { DocumentationPage, Banner } from \"components/DocumentationPage\";\r\nimport { IDocumentedFile, IDocumentedComponent } from \"components/Exports/types.d\";\r\n\r\nimport \"./text.scss\";\r\nimport { textFile } from \"./dummyData\";\r\nimport Props from \"./Props\";\r\n\r\nexport interface ITextProps {\r\n  file?: IDocumentedFile;\r\n}\r\n\r\nexport interface ITextDefaultProps {\r\n  file: IDocumentedFile;\r\n}\r\n\r\nexport type TextWithDefaultProps = ITextProps & ITextDefaultProps;\r\n\r\nexport default class TextDocumentation extends React.Component<ITextProps> {\r\n  public static defaultProps: ITextDefaultProps = {\r\n    file: textFile,\r\n  };\r\n\r\n  public render() {\r\n    const { file } = this.props as TextWithDefaultProps;\r\n    const exports = Object.keys(file).map(key => file[key]);\r\n    const component = exports.find(({ type }) => type === \"component\") as IDocumentedComponent;\r\n    const { name, description, source, sourceLine } = component;\r\n    return (\r\n      <DocumentationPage>\r\n        <Banner source={source} sourceLine={sourceLine}>\r\n          {name}\r\n        </Banner>\r\n        <Markdown markdown={description} className=\"elevated\" />\r\n        <Props component={component} file={file} />\r\n      </DocumentationPage>\r\n    );\r\n  }\r\n}\r\n","/* tslint:disable:max-line-length */\r\nimport { IDocumentedFile, IDocumentedPackage } from \"components/Exports/types.d\";\r\n\r\nexport const db: any = {\r\n  typography: {\r\n    components: {\r\n      Text: {\r\n        name: \"Text\",\r\n        type: \"component\",\r\n        source: \"packages/typography/src/Text.tsx\",\r\n        sourceLine: 133,\r\n        description: `The \\`Text\\` component is used to render text with te material design typography styles applied. By\r\ndefault, everything will be rendered in a \\`<p>\\` tag with the normal paragraphy styles.\r\n\r\nWhen the \\`type\\` prop is changed to another typography style, this component will determine the \"best\"\r\nelement to render the text in *unless* the \\`component\\` prop is provided. The default mapping is:\r\n- \\`\"headline-1\" -> <h1>\\`\r\n- \\`\"headline-2\" -> <h2>\\`\r\n- \\`\"headline-3\" -> <h3>\\`\r\n- \\`\"headline-4\" -> <h4>\\`\r\n- \\`\"headline-5\" -> <h5>\\`\r\n- \\`\"headline-6\" -> <h6>\\`\r\n- \\`\"subtitle-1\" -> <h5>\\`\r\n- \\`\"subtitle-2\" -> <h6>\\`\r\n- \\`\"body-1\"     -> <p>\\`\r\n- \\`\"body-2\"     -> <p>\\`\r\n- \\`\"caption\"    -> <caption>\\`\r\n- \\`\"overline\"   -> <span>\\`\r\n- \\`\"button\"     -> <button>\\`\r\nNOTE: if the \\`component\\` prop is not \\`null\\`, this logic will be ignored and the provided \\`component\\`\r\nwill be used instead.`,\r\n        typeParameters: [\r\n          {\r\n            name: \"P\",\r\n            description: `Any additional props that are valid when using the \\`component\\` prop or the built-in\r\n\"auto-component\" logic. By default, this will just allow any HTMLElement props for each the default\r\nelements in the \"auto-component\" logic.`,\r\n            defaultValue: \"DefaultTextProps\",\r\n            type: \"object\",\r\n            typeReferences: [\"DefaultTextProps\"],\r\n          },\r\n        ],\r\n        typeReferences: [],\r\n        props: \"ITextProps\",\r\n        links: [],\r\n      },\r\n      TextContainer: {\r\n        name: \"TextContainer\",\r\n        type: \"component\",\r\n        source: \"packages/typography/src/TextContainer.tsx\",\r\n        sourceLine: 74,\r\n        description:\r\n          \"The `TextContainer` component is a simple wrapper around a `<div>`, `<section>`, `<article>`, or `<aside>` element that applies the text container styles.\",\r\n        typeParameters: [\r\n          {\r\n            name: \"P\",\r\n            description: `Any additional props that are valid when using the \\`component\\` prop or the built-in\r\n            \"auto-component\" logic. By default, this will just allow any HTMLElement props for each the default\r\nelements in the \"auto-component\" logic.`,\r\n            defaultValue: \"DefaultTextProps\",\r\n            type: \"object\",\r\n            typeReferences: [\"DefaultTextProps\"],\r\n          },\r\n        ],\r\n        typeReferences: [],\r\n        props: \"ITextContainerProps\",\r\n        links: [],\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const textFile: IDocumentedFile = {\r\n  TextTypes: {\r\n    name: \"TextTypes\",\r\n    type: \"type\",\r\n    tsType: \"union\",\r\n    source: \"packages/typography/src/Text.tsx\",\r\n    sourceLine: 10,\r\n    description:\r\n      \"A union of all the material design provided typography styles. When used with the Text component, this will generate the correct typography className to apply and determine what component to be rendered as if none was provided.\",\r\n    value: `\"headline-1\"\r\n | \"headline-2\"\r\n | \"headline-3\"\r\n | \"headline-4\"\r\n | \"headline-5\"\r\n | \"headline-6\"\r\n | \"subtitle-1\"\r\n | \"subtitle-2\"\r\n | \"body-1\"\r\n | \"body-2\"\r\n | \"caption\"\r\n | \"overline\"\r\n | \"button\"`,\r\n    typeParameters: [],\r\n    typeReferences: [],\r\n    links: [],\r\n  },\r\n  DefaultTextProps: {\r\n    name: \"DefaultTextProps\",\r\n    type: \"type\",\r\n    tsType: \"union\",\r\n    source: \"packages/typography/src/Text.tsx\",\r\n    sourceLine: 29,\r\n    description:\r\n      'The default additional props that can be applied to the Text component. This mostly just covers all the elements that can be rendered \"natively\".',\r\n    value:\r\n      \"HTMLAttributes<HTMLHeadingElement | HTMLParagraphElement | HTMLSpanElement | HTMLDivElement | HTMLButtonElement | HTMLTableCaptionElement | HTMLAnchorElement | HTMLBodyElement | HTMLHtmlElement>\",\r\n    typeParameters: [],\r\n    typeReferences: [\r\n      \"HTMLAttributes\",\r\n      \"HTMLHeadingElement\",\r\n      \"HTMLParagraphElement\",\r\n      \"HTMLSpanElement\",\r\n      \"HTMLDivElement\",\r\n      \"HTMLButtonElement\",\r\n      \"HTMLTableCaptionElement\",\r\n      \"HTMLAnchorElement\",\r\n      \"HTMLBodyElement\",\r\n      \"HTMLHtmlElement\",\r\n    ],\r\n    links: [],\r\n  },\r\n  TextRenderFunction: {\r\n    name: \"TextRenderFunction\",\r\n    type: \"type\",\r\n    tsType: \"function reflection\",\r\n    source: \"packages/typography/src/Text.tsx\",\r\n    sourceLine: 45,\r\n    description:\r\n      \"A type describing the text component's children render function. It provides an object containing the correct (and merged) className and exects a renderable element to be returned.\",\r\n    value: \"(props: { className: string }) => ReactNode\",\r\n    typeParameters: [],\r\n    typeReferences: [\"ReactNode\"],\r\n    links: [],\r\n  },\r\n  ITextProps: {\r\n    name: \"ITextProps\",\r\n    type: \"interface\",\r\n    source: \"packages/typography/src/Text.tsx\",\r\n    sourceLine: 52,\r\n    description: \"The base props for rendering the text component.\",\r\n    extends: [\"DefaultTextProps\"],\r\n    attributes: [\r\n      {\r\n        name: \"className\",\r\n        description: \"An optiona className to merge into typography styles.\",\r\n        defaultValue: \"\",\r\n        required: false,\r\n        type: \"string\",\r\n        typeReferences: [],\r\n        typeParameterReferences: [],\r\n      },\r\n      {\r\n        name: \"component\",\r\n        description: `The component to render as when the children are not a render function. If this prop is omitted, the component will be determined by the \\`type\\` prop where:\r\n- \\`\"headline-1\" -> <h1>\\`\r\n- \\`\"headline-2\" -> <h2>\\`\r\n- \\`\"headline-3\" -> <h3>\\`\r\n- \\`\"headline-4\" -> <h4>\\`\r\n- \\`\"headline-5\" -> <h5>\\`\r\n- \\`\"headline-6\" -> <h6>\\`\r\n- \\`\"subtitle-1\" -> <h5>\\`\r\n- \\`\"subtitle-2\" -> <h6>\\`\r\n- \\`\"body-1\"     -> <p>\\`\r\n- \\`\"body-2\"     -> <p>\\`\r\n- \\`\"caption\"    -> <caption>\\`\r\n- \\`\"overline\"   -> <span>\\`\r\n- \\`\"button\"     -> <button>\\`\r\n`,\r\n        defaultValue: \"null\",\r\n        required: false,\r\n        type: \"ReactType<P> | null\",\r\n        typeReferences: [\"ReactType\"],\r\n        typeParameterReferences: [\"P\"],\r\n      },\r\n      {\r\n        name: \"type\",\r\n        description:\r\n          \"One of the material design typography text styles. This is used to generate a className that can be applied to any element and have the correct typography.\",\r\n        defaultValue: '\"body-1\"',\r\n        required: false,\r\n        type: \"TextTypes\",\r\n        typeReferences: [\"TextTypes\"],\r\n        typeParameterReferences: [\"P\"],\r\n      },\r\n      {\r\n        name: \"children\",\r\n        description:\r\n          \"Either a child render function or a react node. If this is not the child render function, a different wrapper component can be provided using the `component` prop.\",\r\n        required: false,\r\n        defaultValue: \"\",\r\n        type: \"ReactNode | TextRenderFunction\",\r\n        typeReferences: [\"ReactNode\", \"TextRenderFunction\"],\r\n        typeParameterReferences: [],\r\n      },\r\n    ],\r\n    typeParameters: [\r\n      {\r\n        name: \"P\",\r\n        type: \"any\",\r\n        description: \"Any additional props that are available based on the component prop.\",\r\n        defaultValue: \"DefaultTextProps\",\r\n        typeReferences: [\"DefaultTextProps\"],\r\n      },\r\n    ],\r\n    typeReferences: [],\r\n    links: [],\r\n  },\r\n  ITextDefaultProps: {\r\n    name: \"ITextDefaultProps\",\r\n    type: \"default-props\",\r\n    extends: [],\r\n    source: \"packages/typography/src/Text.tsx\",\r\n    sourceLine: 94,\r\n    description: `The default defined props for the text component.`,\r\n    attributes: [\r\n      {\r\n        name: \"type\",\r\n        type: \"TextTypes\",\r\n        typeReferences: [\"TextTypes\"],\r\n        typeParameterReferences: [],\r\n      },\r\n    ],\r\n    typeParameters: [],\r\n    typeReferences: [],\r\n    links: [],\r\n  },\r\n  Text: {\r\n    name: \"Text\",\r\n    type: \"component\",\r\n    source: \"packages/typography/src/Text.tsx\",\r\n    sourceLine: 133,\r\n    description: `The \\`Text\\` component is used to render text with te material design typography styles applied. By\r\ndefault, everything will be rendered in a \\`<p>\\` tag with the normal paragraphy styles. When the \\`type\\` prop is\r\nchanged to another typography style, this component will determine the \"best\" element to render the text in *unless*\r\nthe \\`component\\` prop is provided. The default mapping is:\r\n- \\`\"headline-1\" -> <h1>\\`\r\n- \\`\"headline-2\" -> <h2>\\`\r\n- \\`\"headline-3\" -> <h3>\\`\r\n- \\`\"headline-4\" -> <h4>\\`\r\n- \\`\"headline-5\" -> <h5>\\`\r\n- \\`\"headline-6\" -> <h6>\\`\r\n- \\`\"subtitle-1\" -> <h5>\\`\r\n- \\`\"subtitle-2\" -> <h6>\\`\r\n- \\`\"body-1\"     -> <p>\\`\r\n- \\`\"body-2\"     -> <p>\\`\r\n- \\`\"caption\"    -> <caption>\\`\r\n- \\`\"overline\"   -> <span>\\`\r\n- \\`\"button\"     -> <button>\\`\r\n\r\n> NOTE: if the \\`component\\` prop is not \\`null\\`, this logic will be ignored and the provided \\`component\\`\r\nwill be used instead.`,\r\n    typeParameters: [\r\n      {\r\n        name: \"P\",\r\n        description: `Any additional props that are valid when using the \\`component\\` prop or the built-in\r\n\"auto-component\" logic. By default, this will just allow any HTMLElement props for each the default\r\nelements in the \"auto-component\" logic.`,\r\n        defaultValue: \"DefaultTextProps\",\r\n        type: \"object\",\r\n        typeReferences: [\"DefaultTextProps\"],\r\n      },\r\n    ],\r\n    typeReferences: [],\r\n    props: \"ITextProps\",\r\n    links: [],\r\n  },\r\n};\r\n\r\nexport const textContainerFile: IDocumentedFile = {\r\n  TextContainerSize: {\r\n    name: \"TextContainerSize\",\r\n    type: \"type\",\r\n    tsType: \"union\",\r\n    source: \"packages/typography/src/TextContainer.tsx\",\r\n    sourceLine: 9,\r\n    description:\r\n      \"A union of the available text container sizes. One of these values must be chosen to help set the max width for text.\",\r\n    value: '\"auto\" | \"mobile\" | \"desktop\"',\r\n    typeParameters: [],\r\n    typeReferences: [],\r\n    links: [],\r\n  },\r\n  DefaultTextContainerProps: {\r\n    name: \"DefaultTextContainerProps\",\r\n    type: \"type\",\r\n    tsType: \"union\",\r\n    source: \"packages/typography/src/TextContainer.tsx\",\r\n    sourceLine: 15,\r\n    description:\r\n      \"The default additional props that can be provided to the `TextContainer`. By default, it is just all the div element attributes.\",\r\n    value: '\"auto\" | \"mobile\" | \"desktop\"',\r\n    typeParameters: [],\r\n    typeReferences: [],\r\n    links: [],\r\n  },\r\n};\r\n\r\nexport const TYPOGRAPHY_PACKAGE: IDocumentedPackage = {\r\n  Text: textFile,\r\n  TextContainer: textContainerFile,\r\n};\r\n","import Exports from \"./Exports\";\r\n\r\nexport default Exports;\r\n","import * as marked from \"marked\";\r\nimport * as Prism from \"prismjs\";\r\n\r\nimport \"prismjs/components/prism-bash\";\r\nimport \"prismjs/components/prism-css-extras\";\r\nimport \"prismjs/components/prism-scss\";\r\nimport \"prismjs/components/prism-jsx\";\r\nimport \"prismjs/components/prism-typescript\";\r\nimport \"prismjs/components/prism-git\";\r\n\r\nexport function getLanguage(s: string) {\r\n  if (!s) {\r\n    return \"markup\";\r\n  } else if (s === \"tsx\") {\r\n    return \"typescript\";\r\n  } else if (s === \"sh\") {\r\n    return \"bash\";\r\n  } else if (s === \"diff\") {\r\n    return \"git\";\r\n  }\r\n\r\n  return s;\r\n}\r\n\r\nmarked.setOptions({\r\n  renderer: new marked.Renderer(),\r\n  highlight: (code, lang) => Prism.highlight(code, Prism.languages[getLanguage(lang)]),\r\n  gfm: true,\r\n  tables: true,\r\n  breaks: false,\r\n  pedantic: false,\r\n  sanitize: false,\r\n  smartLists: true,\r\n  smartypants: false,\r\n  headerIds: true,\r\n});\r\n\r\nexport interface IMarkdownOptions {\r\n  showToolbar?: boolean;\r\n  showLineNumbers?: boolean;\r\n}\r\n\r\nexport type MarkdownTransformation = (markdown: string, options?: IMarkdownOptions) => string;\r\nexport type MarkdownTransformationList = MarkdownTransformation[];\r\n\r\nconst preTransforms: MarkdownTransformationList = [];\r\nconst postTransforms: MarkdownTransformationList = [\r\n  markdown => markdown.replace(/<a href/g, '<a class=\"rmd-link\" href'),\r\n  markdown =>\r\n    markdown.replace(\r\n      /(<h2 id=\"table-of-contents\")(>Table of Contents<\\/h2>\\r?\\n<ul)/,\r\n      (_, s1, s2) => `${s1} class=\"markdown-toc\"${s2} class=\"markdown-toc__list\"`\r\n    ),\r\n  markdown =>\r\n    markdown.replace(\r\n      /yarn add/g,\r\n      '<span class=\"token function\">yarn</span> <span class=\"token function\">add</span>'\r\n    ),\r\n];\r\n\r\nexport function transform(\r\n  markdown: string,\r\n  transforms: MarkdownTransformation[],\r\n  options?: IMarkdownOptions\r\n) {\r\n  return transforms.reduce((s, t) => t(s, options), markdown);\r\n}\r\n\r\nexport function markdownToHTML(markdown: string, options?: IMarkdownOptions) {\r\n  return transform(\r\n    marked.parse(transform(markdown, preTransforms, options)),\r\n    postTransforms,\r\n    options\r\n  );\r\n}\r\n"],"sourceRoot":""}