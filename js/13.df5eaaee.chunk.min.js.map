{"version":3,"sources":["components/ExamplesPage/Example.tsx","components/ExamplesPage/ExampleTitle.tsx","components/ExamplesPage/ExamplesPage.tsx","components/ExamplesPage/index.ts","components/Markdown/Markdown.tsx","components/Markdown/MarkdownPage.tsx","components/Markdown/index.ts","components/packages/TreeView/Examples/Examples.tsx","components/packages/TreeView/Examples/MultiSelectionTreeExample.tsx","components/packages/TreeView/Examples/SingleSelectionTreeExample.tsx","components/packages/TreeView/Examples/index.ts","components/packages/TreeView/Examples/simpleData.ts","utils/markdown/index.ts"],"names":["Example","_a","title","children","className","contentClassName","description","exampleGroup","react__WEBPACK_IMPORTED_MODULE_0__","classnames__WEBPACK_IMPORTED_MODULE_1___default","_react_md_typography__WEBPACK_IMPORTED_MODULE_2__","type","components_Markdown__WEBPACK_IMPORTED_MODULE_3__","markdown","example-group","defaultProps","__webpack_exports__","ExampleTitle","_react_md_typography__WEBPACK_IMPORTED_MODULE_1__","ExamplesPage","examples","react__WEBPACK_IMPORTED_MODULE_1__","map","example","key","_Example__WEBPACK_IMPORTED_MODULE_5__","tslib__WEBPACK_IMPORTED_MODULE_0__","_ExamplesPage__WEBPACK_IMPORTED_MODULE_0__","Markdown","_super","props","_this","call","this","updateLinks","history","container","current","link","test","href","onclick","event","preventDefault","push","replace","window","location","origin","_i","links_1","Array","from","querySelectorAll","length","state","html","__html","Object","utils_markdown__WEBPACK_IMPORTED_MODULE_4__","prevMarkdown","getDerivedStateFromProps","nextProps","prevState","prototype","componentDidMount","componentDidUpdate","prevProps","render","style","ref","classnames__WEBPACK_IMPORTED_MODULE_2___default","dangerouslySetInnerHTML","react_router__WEBPACK_IMPORTED_MODULE_3__","MarkdownPage","_Markdown__WEBPACK_IMPORTED_MODULE_3__","_Markdown__WEBPACK_IMPORTED_MODULE_0__","_SingleSelectionTreeExample__WEBPACK_IMPORTED_MODULE_2__","_MultiSelectionTreeExample__WEBPACK_IMPORTED_MODULE_3__","Examples","components_ExamplesPage__WEBPACK_IMPORTED_MODULE_1__","MultiSelectionTreeExample","_react_md_tree_view__WEBPACK_IMPORTED_MODULE_2__","id","aria-label","data","_simpleData__WEBPACK_IMPORTED_MODULE_3__","multiSelect","SingleSelectionTreeExample","_Examples__WEBPACK_IMPORTED_MODULE_0__","itemId","childItems","getLanguage","s","marked__WEBPACK_IMPORTED_MODULE_0__","renderer","highlight","code","lang","prismjs__WEBPACK_IMPORTED_MODULE_1__","gfm","tables","breaks","pedantic","sanitize","smartLists","smartypants","headerIds","preTransforms","postTransforms","_","s1","s2","transform","transforms","options","reduce","t","markdownToHTML"],"mappings":"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","file":"js/13.df5eaaee.chunk.min.js","sourcesContent":["import * as React from \"react\";\r\nimport cn from \"classnames\";\r\nimport { Text } from \"@react-md/typography\";\r\n\r\nimport Markdown from \"components/Markdown\";\r\n\r\nexport interface IExampleProps {\r\n  exampleGroup?: boolean;\r\n  title: string;\r\n  children?: React.ReactNode;\r\n  className?: string;\r\n  description?: string;\r\n  contentClassName?: string;\r\n}\r\n\r\nconst Example: React.SFC<IExampleProps> = ({\r\n  title,\r\n  children,\r\n  className,\r\n  contentClassName,\r\n  description,\r\n  exampleGroup,\r\n}) => (\r\n  <section className={cn(\"examples-page__example\", className)}>\r\n    <Text type=\"headline-4\" className=\"examples-page__example-title\">\r\n      {title}\r\n    </Text>\r\n    {description && <Markdown markdown={description} />}\r\n    <div\r\n      className={cn(\r\n        \"examples-page__example-content\",\r\n        { \"example-group\": exampleGroup },\r\n        contentClassName\r\n      )}\r\n    >\r\n      {children}\r\n    </div>\r\n  </section>\r\n);\r\n\r\nExample.defaultProps = {\r\n  exampleGroup: true,\r\n};\r\n\r\nexport default Example;\r\n","import * as React from \"react\";\r\nimport { Text } from \"@react-md/typography\";\r\n\r\nexport interface IExampleTitleProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst ExampleTitle: React.SFC<IExampleTitleProps> = ({ children }) => (\r\n  <Text type=\"headline-6\">{children}</Text>\r\n);\r\n\r\nexport default ExampleTitle;\r\n","import * as React from \"react\";\r\nimport { Text } from \"@react-md/typography\";\r\n\r\nimport Markdown from \"components/Markdown\";\r\n\r\nimport \"./examples-page.scss\";\r\nimport { default as Example, IExampleProps } from \"./Example\";\r\n\r\nexport type ExampleList = IExampleProps[];\r\n\r\nexport interface IExamplesPageProps {\r\n  title: string;\r\n  description?: string;\r\n  examples: ExampleList;\r\n}\r\n\r\nconst ExamplesPage: React.SFC<IExamplesPageProps> = ({ title, description, examples }) => (\r\n  <section className=\"examples-page\">\r\n    <header className=\"rmd-text-container\">\r\n      <Text type=\"headline-2\" className=\"examples-page__title\">\r\n        {title}\r\n      </Text>\r\n    </header>\r\n    {description && <Markdown markdown={description} className=\"rmd-text-container\" />}\r\n    {examples.map((example, key) => (\r\n      <Example key={key} {...example} />\r\n    ))}\r\n  </section>\r\n);\r\n\r\nexport default ExamplesPage;\r\n","import ExamplesPage from \"./ExamplesPage\";\r\n\r\nexport default ExamplesPage;\r\n\r\nexport { default as ExamplesPage } from \"./ExamplesPage\";\r\nexport * from \"./ExamplesPage\";\r\nexport { default as ExampleTitle } from \"./ExampleTitle\";\r\n","import * as React from \"react\";\r\nimport cn from \"classnames\";\r\nimport { withRouter, RouteComponentProps } from \"react-router\";\r\n\r\nimport { markdownToHTML } from \"utils/markdown\";\r\n\r\nimport \"./markdown.scss\";\r\n\r\nexport interface IMarkdownProps extends RouteComponentProps<any> {\r\n  style?: React.CSSProperties;\r\n  className?: string;\r\n  markdown: string;\r\n}\r\n\r\ninterface IInnerHTML {\r\n  __html: string;\r\n}\r\n\r\nexport interface IMarkdownState {\r\n  html: IInnerHTML;\r\n  prevMarkdown: string;\r\n}\r\n\r\nclass Markdown extends React.Component<IMarkdownProps, IMarkdownState> {\r\n  public static getDerivedStateFromProps(nextProps: IMarkdownProps, prevState: IMarkdownState) {\r\n    const { markdown } = nextProps;\r\n    if (prevState.prevMarkdown !== markdown) {\r\n      return {\r\n        html: { __html: markdownToHTML(nextProps.markdown) },\r\n        prevMarkdown: markdown,\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private container: React.RefObject<HTMLDivElement>;\r\n  constructor(props: IMarkdownProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      html: { __html: markdownToHTML(props.markdown) },\r\n      prevMarkdown: props.markdown,\r\n    };\r\n\r\n    this.container = React.createRef();\r\n  }\r\n\r\n  public componentDidMount() {\r\n    this.updateLinks();\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: IMarkdownProps, prevState: IMarkdownState) {\r\n    if (this.state.html !== prevState.html) {\r\n      this.updateLinks();\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    const { style, className, markdown } = this.props;\r\n    const { html } = this.state;\r\n    if (!html.__html || !markdown) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        ref={this.container}\r\n        style={style}\r\n        className={cn(\"markdown-container\", className)}\r\n        dangerouslySetInnerHTML={html}\r\n      />\r\n    );\r\n  }\r\n\r\n  private updateLinks = () => {\r\n    const { history } = this.props;\r\n    if (!this.container.current) {\r\n      return;\r\n    }\r\n\r\n    const links = Array.from(this.container.current.querySelectorAll(\".rmd-link\") as NodeListOf<\r\n      HTMLAnchorElement\r\n    >);\r\n    for (const link of links) {\r\n      if (/^https?:\\/\\/(localhost|react-md|mlaursen\\.github\\.io\\/react-md\\/)/.test(link.href)) {\r\n        // update internal links to use browser history instead of native behavior\r\n        link.onclick = function handleClick(event: MouseEvent) {\r\n          event.preventDefault();\r\n          history.push(link.href.replace(window.location.origin, \"\"));\r\n        };\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default withRouter(Markdown);\r\n","import * as React from \"react\";\r\nimport cn from \"classnames\";\r\n\r\nimport Markdown from \"./Markdown\";\r\n\r\nexport interface IMarkdownPageProps {\r\n  style?: React.CSSProperties;\r\n  className?: string;\r\n  markdown: string;\r\n}\r\n\r\nconst MarkdownPage: React.SFC<IMarkdownPageProps> = ({ className, ...props }) => (\r\n  <Markdown {...props} className={cn(\"markdown-page rmd-text-container\", className)} />\r\n);\r\n\r\nexport default MarkdownPage;\r\n","import Markdown from \"./Markdown\";\r\n\r\nexport default Markdown;\r\nexport { Markdown };\r\n\r\nexport { default as MarkdownPage } from \"./MarkdownPage\";\r\n","import * as React from \"react\";\r\n\r\nimport { default as ExamplesPage, ExampleList } from \"components/ExamplesPage\";\r\n\r\nimport SingleSelectionTreeExample from \"./SingleSelectionTreeExample\";\r\nimport MultiSelectionTreeExample from \"./MultiSelectionTreeExample\";\r\n\r\nconst examples: ExampleList = [\r\n  {\r\n    title: \"Single Selection Tree Example\",\r\n    children: <SingleSelectionTreeExample />,\r\n  },\r\n  {\r\n    title: \"Multi-Selection Tree Example\",\r\n    children: <MultiSelectionTreeExample />,\r\n  },\r\n];\r\n\r\nconst description = `\r\nThis package is used to create the accessible [tree view widget](https://www.w3.org/TR/wai-aria-practices/#TreeView)\r\nfrom [www.w3.org](https://www.w3.org/) with the styles of react-md, some decent default rendering logic, and\r\nkeyboard/mouse events to select and open nodes. If you are unfamiliar with the specifications for tree views,\r\nyou can read below for the single selection and multi-selection trees below that will also include keyboard behavior.\r\n\r\n### Single Selection Trees\r\nA single selection tree will only allow 1 item within the tree to be selected at once. By default, the selected item\r\nwill gain a darkened background color to help show it is selected.\r\n\r\n#### Keyboard Navigation\r\nWhen the user is navigating through the page with keyboard only, the selected tree item will be the only item that is\r\nfocusable with the \\`TAB\\` key. The user can navigate through the tree by using the \\`UP\\` and \\`DOWN\\` arrow keys to\r\nmove the \"focus state\" up an item or down an item. If the user presses the \\`UP\\` arrow key on the first item in the\r\ntree, the \"focus state\" will wrap around and focus the last visible item in the tree. This same logic applies for the\r\n\\`DOWN\\` arrow key so that pressing the \\`DOWN\\` arrow key on the last visible item in the tree will move the\r\n\"focus state\" to the first item in the tree. In addition, the user can hit the \\`HOME\\` and \\`END\\` keys to quickly\r\nmove the \"focus state\" to the first or last visible item in the tree respectively.\r\n\r\nThe tree also has type-ahead built in so that the user can type letters to find the next item that starts with the\r\ntyped letters. The tree will keep searches alive for \\`500ms\\` by default so that if a user quickly types letters in\r\nsuccession, they will be joined together in the search to find items easily. However, if the user types the same letter\r\nis succession, the search will be reset each time and the next item starting with that letter will gain the\r\n\"focus state\" instead.\r\n\r\n#### Keyboard Selection\r\nIn a single selection tree, an item can only be selected  \\`ENTER\\` key.\r\n\r\n#### Keyboard Item Expansion\r\nItems can be expanded and collapsed by pressing the \\`RIGHT\\` arrow key or \\`LEFT\\` arrow key respectively on an item\r\nthat has child items. An item's expansion can be toggled by pressing the \\`ENTER\\` key. In addition, the user can press\r\nthe \\`ASTERISK\\` (\\`*\\`) key to open all items at the same level as the item that currently has the \"focus state\".\r\n\r\n### Multi-Selection Trees\r\nA multi-selection tree will allow zero to many items within the tree to be selected at once. Just like the single\r\nselection trees, each focused item will gain a darkened background color by dfault to help show it is selected.\r\n\r\n#### Keyboard Navigation\r\nWhen the user is navigating through the page with keyboard only, each selected item will be focusable by using the\r\n\\`TAB\\` key. If there are currently no selected items, only the first item in the tree will be tab focusable.\r\n\r\nThe remaining keyboard navigation behavior is the same as the single selection tree except that it gains a few more\r\nselection shortcuts so read the next section for more information.\r\n\r\n#### Keyboard Selection\r\nJust like in a single selection tree, pressing the \\`ENTER\\` key will will select an item and **never** deselect an\r\nitem. The item's selection can be toggled by using the \\`SPACE\\` key instead.\r\n\r\nIf the user presses \\`SHIFT\\` + the \\`UP\\` arrow key, the focus will be moved to the item above the current item and\r\ntoggle the selection state of that item. If the user presses \\`SHIFT\\` + the \\`DOWN\\` arrow key, the focus will be moved\r\nto the item below the current item and toggle the selection state of that item. Just like normal \\`UP\\` and \\`DOWN\\`\r\n\"focus state\" navigation, \\`SHIFT+UP\\` and \\`SHIFT+DOWN\\` logic will wrap.\r\n\r\nIf the user presses \\`CTRL+SHIFT+HOME\\`, the current item and all visible items up to the first item in the tree will be\r\nselected while pressing \\`CTRL+SHIFT+END\\` will select the current item and all visible items down tot he last item\r\nin the tree.\r\n\r\nFinally, the user can quickly select all items (even the non-expanded child items) by pressing \\`CTRL+A\\`. If the user\r\npresses \\`CTRL+A\\` while all the items were selected, all items will be deselected instead.\r\n`;\r\n\r\nconst Examples = () => (\r\n  <ExamplesPage title=\"TreeView\" examples={examples} description={description} />\r\n);\r\n\r\nexport default Examples;\r\n","import * as React from \"react\";\r\nimport { TreeView, TreeViewControls } from \"@react-md/tree-view\";\r\n\r\nimport simpleData from \"./simpleData\";\r\n\r\nconst MultiSelectionTreeExample = () => (\r\n  <TreeViewControls\r\n    id=\"navigation-example\"\r\n    aria-label=\"MultiSelectionTree Example\"\r\n    data={simpleData}\r\n    multiSelect={true}\r\n  >\r\n    {props => <TreeView {...props} />}\r\n  </TreeViewControls>\r\n);\r\n\r\nexport default MultiSelectionTreeExample;\r\n","import * as React from \"react\";\r\nimport { TreeView, TreeViewControls } from \"@react-md/tree-view\";\r\n\r\nimport simpleData, { ISimpleData } from \"./simpleData\";\r\n\r\nconst SingleSelectionTreeExample = () => (\r\n  <TreeViewControls<ISimpleData>\r\n    id=\"single-selection-tree-example\"\r\n    aria-label=\"Single Selection Tree Example\"\r\n    data={simpleData}\r\n  >\r\n    {props => <TreeView {...props} />}\r\n  </TreeViewControls>\r\n);\r\n\r\nexport default SingleSelectionTreeExample;\r\n","import Examples from \"./Examples\";\r\n\r\nexport default Examples;\r\n","import { TreeViewDataList, TreeViewData } from \"@react-md/tree-view\";\r\n\r\nexport interface ISimpleData {\r\n  children: string;\r\n}\r\n\r\nexport type SimpleTreeViewData = TreeViewData<ISimpleData>;\r\n\r\nconst data: TreeViewDataList<ISimpleData> = [\r\n  {\r\n    itemId: \"item-1\",\r\n    children: \"Item 1\",\r\n    childItems: [\r\n      {\r\n        itemId: \"item-1-1\",\r\n        children: \"Item 1-1\",\r\n      },\r\n      {\r\n        itemId: \"item-1-2\",\r\n        children: \"Item 1-2\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    itemId: \"item-2\",\r\n    children: \"Item 2\",\r\n  },\r\n  {\r\n    itemId: \"item-3\",\r\n    children: \"Item 3\",\r\n    childItems: [\r\n      {\r\n        itemId: \"item-3-1\",\r\n        children: \"Item 3-1\",\r\n        childItems: [\r\n          {\r\n            itemId: \"item-3-1-1\",\r\n            children: \"Item 3-1-1\",\r\n          },\r\n          {\r\n            itemId: \"item-3-1-2\",\r\n            children: \"Item 3-1-2\",\r\n          },\r\n          {\r\n            itemId: \"item-3-1-3\",\r\n            children: \"Item 3-1-3\",\r\n          },\r\n          {\r\n            itemId: \"item-3-1-4\",\r\n            children: \"Item 3-1-4\",\r\n          },\r\n          {\r\n            itemId: \"item-3-1-5\",\r\n            children: \"Item 3-1-5\",\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        itemId: \"item-3-2\",\r\n        children: \"Item 3-2\",\r\n      },\r\n      {\r\n        itemId: \"item-3-3\",\r\n        children: \"Item 3-3\",\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nexport default data;\r\n","import * as marked from \"marked\";\r\nimport * as Prism from \"prismjs\";\r\n\r\nimport \"prismjs/components/prism-bash\";\r\nimport \"prismjs/components/prism-css-extras\";\r\nimport \"prismjs/components/prism-scss\";\r\nimport \"prismjs/components/prism-jsx\";\r\nimport \"prismjs/components/prism-typescript\";\r\nimport \"prismjs/components/prism-git\";\r\n\r\nexport function getLanguage(s: string) {\r\n  if (!s) {\r\n    return \"markup\";\r\n  } else if (s === \"tsx\") {\r\n    return \"typescript\";\r\n  } else if (s === \"sh\") {\r\n    return \"bash\";\r\n  } else if (s === \"diff\") {\r\n    return \"git\";\r\n  }\r\n\r\n  return s;\r\n}\r\n\r\nmarked.setOptions({\r\n  renderer: new marked.Renderer(),\r\n  highlight: (code, lang) => Prism.highlight(code, Prism.languages[getLanguage(lang)]),\r\n  gfm: true,\r\n  tables: true,\r\n  breaks: false,\r\n  pedantic: false,\r\n  sanitize: false,\r\n  smartLists: true,\r\n  smartypants: false,\r\n  headerIds: true,\r\n});\r\n\r\nexport interface IMarkdownOptions {\r\n  showToolbar?: boolean;\r\n  showLineNumbers?: boolean;\r\n}\r\n\r\nexport type MarkdownTransformation = (markdown: string, options?: IMarkdownOptions) => string;\r\nexport type MarkdownTransformationList = MarkdownTransformation[];\r\n\r\nconst preTransforms: MarkdownTransformationList = [];\r\nconst postTransforms: MarkdownTransformationList = [\r\n  markdown => markdown.replace(/<a href/g, '<a class=\"rmd-link\" href'),\r\n  markdown =>\r\n    markdown.replace(\r\n      /(<h2 id=\"table-of-contents\")(>Table of Contents<\\/h2>\\r?\\n<ul)/,\r\n      (_, s1, s2) => `${s1} class=\"markdown-toc\"${s2} class=\"markdown-toc__list\"`\r\n    ),\r\n  markdown =>\r\n    markdown.replace(\r\n      /yarn add/g,\r\n      '<span class=\"token function\">yarn</span> <span class=\"token function\">add</span>'\r\n    ),\r\n];\r\n\r\nexport function transform(\r\n  markdown: string,\r\n  transforms: MarkdownTransformation[],\r\n  options?: IMarkdownOptions\r\n) {\r\n  return transforms.reduce((s, t) => t(s, options), markdown);\r\n}\r\n\r\nexport function markdownToHTML(markdown: string, options?: IMarkdownOptions) {\r\n  return transform(\r\n    marked.parse(transform(markdown, preTransforms, options)),\r\n    postTransforms,\r\n    options\r\n  );\r\n}\r\n"],"sourceRoot":""}