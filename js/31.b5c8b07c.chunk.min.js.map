{"version":3,"sources":["components/ExamplesPage/Example.tsx","components/ExamplesPage/ExampleTitle.tsx","components/ExamplesPage/ExamplesPage.tsx","components/ExamplesPage/index.ts","components/Markdown/Markdown.tsx","components/Markdown/MarkdownPage.tsx","components/Markdown/index.ts","components/packages/Portal/Examples/Examples.tsx","components/packages/Portal/Examples/OverflowPortalExample/Cell.tsx","components/packages/Portal/Examples/OverflowPortalExample/CellTooltip.tsx","components/packages/Portal/Examples/OverflowPortalExample/OverflowPortalExample.tsx","components/packages/Portal/Examples/OverflowPortalExample/index.ts","components/packages/Portal/Examples/index.ts","utils/markdown/index.ts"],"names":["Example","_a","title","children","className","contentClassName","description","exampleGroup","react__WEBPACK_IMPORTED_MODULE_0__","classnames__WEBPACK_IMPORTED_MODULE_1___default","_react_md_typography__WEBPACK_IMPORTED_MODULE_2__","type","components_Markdown__WEBPACK_IMPORTED_MODULE_3__","markdown","example-group","defaultProps","__webpack_exports__","ExampleTitle","_react_md_typography__WEBPACK_IMPORTED_MODULE_1__","ExamplesPage","examples","react__WEBPACK_IMPORTED_MODULE_1__","map","example","key","_Example__WEBPACK_IMPORTED_MODULE_5__","tslib__WEBPACK_IMPORTED_MODULE_0__","_ExamplesPage__WEBPACK_IMPORTED_MODULE_0__","Markdown","_super","props","_this","call","this","updateLinks","history","container","current","link","test","href","onclick","event","preventDefault","push","replace","window","location","origin","_i","links_1","Array","from","querySelectorAll","length","state","html","__html","Object","utils_markdown__WEBPACK_IMPORTED_MODULE_4__","prevMarkdown","getDerivedStateFromProps","nextProps","prevState","prototype","componentDidMount","componentDidUpdate","prevProps","render","style","ref","classnames__WEBPACK_IMPORTED_MODULE_2___default","dangerouslySetInnerHTML","react_router__WEBPACK_IMPORTED_MODULE_3__","MarkdownPage","_Markdown__WEBPACK_IMPORTED_MODULE_3__","_Markdown__WEBPACK_IMPORTED_MODULE_0__","_OverflowPortalExample__WEBPACK_IMPORTED_MODULE_2__","Examples","components_ExamplesPage__WEBPACK_IMPORTED_MODULE_1__","Cell","showTooltip","visible","tooltip","document","getElementById","getAttribute","setState","tooltipStyle","_react_md_utils__WEBPACK_IMPORTED_MODULE_4__","verticalPosition","BOTTOM","verticalSpacing","isPortalFixed","portal","hideTooltip","_b","columnIndex","rowIndex","active","id","tooltipId","role","aria-colcount","aria-rowcount","aria-colindex","aria-rowindex","overflow-portal-example__cell--active","onMouseEnter","onMouseLeave","_react_md_typography__WEBPACK_IMPORTED_MODULE_3__","aria-describedby","tagName","_CellTooltip__WEBPACK_IMPORTED_MODULE_5__","CellTooltip","_react_md_portal__WEBPACK_IMPORTED_MODULE_1__","intoId","_react_md_tooltip__WEBPACK_IMPORTED_MODULE_2__","OverflowPortalExample","selectCell","scrollToRow","scrollToColumn","togglePortals","grid","forceUpdate","react_virtualized__WEBPACK_IMPORTED_MODULE_4__","columnCount","rowCount","mode","onScrollToChange","onSectionRendered","disableHeight","width","height","rowHeight","columnWidth","cellRenderer","_Cell__WEBPACK_IMPORTED_MODULE_6__","_react_md_button__WEBPACK_IMPORTED_MODULE_2__","onClick","themeType","_OverflowPortalExample__WEBPACK_IMPORTED_MODULE_0__","_Examples__WEBPACK_IMPORTED_MODULE_0__","getLanguage","s","marked__WEBPACK_IMPORTED_MODULE_0__","renderer","highlight","code","lang","prismjs__WEBPACK_IMPORTED_MODULE_1__","gfm","tables","breaks","pedantic","sanitize","smartLists","smartypants","preTransforms","postTransforms","_","s1","s2","transform","transforms","options","reduce","t","markdownToHTML"],"mappings":"6XAeA,IAAMA,EAAoC,SAACC,OACzCC,EAAAD,EAAAC,MACAC,EAAAF,EAAAE,SACAC,EAAAH,EAAAG,UACAC,EAAAJ,EAAAI,iBACAC,EAAAL,EAAAK,YACAC,EAAAN,EAAAM,aACI,OACJC,EAAA,yBAASJ,UAAWK,IAAG,yBAA0BL,IAC/CI,EAAA,cAACE,EAAA,GAAKC,KAAK,aAAaP,UAAU,gCAC/BF,GAEFI,GAAeE,EAAA,cAACI,EAAA,GAASC,SAAUP,IACpCE,EAAA,qBAAKJ,UAAWK,IAAG,kCAAoCK,gBAAiBP,GAAgBF,IACrFF,KAKPH,EAAQe,cACNR,cAAc,WAGDP,UAAfgB,EAAA,uIAvBMhB,2hBCRN,IAAMiB,EAA8C,SAAChB,OAAEE,EAAAF,EAAAE,SAAe,OAAAK,EAAA,cAACU,EAAA,GAAKP,KAAK,cAAcR,YAEhFc,UAAfD,EAAA,uIAFMC,suBCSN,IAAME,EAA8C,SAAClB,OAAEC,EAAAD,EAAAC,MAAOI,EAAAL,EAAAK,YAAac,EAAAnB,EAAAmB,SAAe,OACxFC,EAAA,yBAASjB,UAAU,iBACjBiB,EAAA,wBAAQjB,UAAU,sBAChBiB,EAAA,cAACX,EAAA,GAAKC,KAAK,aAAaP,UAAU,wBAC/BF,IAGJI,GAAee,EAAA,cAACT,EAAA,GAASC,SAAUP,EAAaF,UAAU,uBAC1DgB,EAASE,IAAI,SAACC,EAASC,GAAQ,OAC9BH,EAAA,cAACI,EAAA,EAAOC,EAAA,GAACF,IAAKA,GADgBD,gBAMrBJ,UAAfH,EAAA,uIAdMG,urBCdSQ,EAAA,UAAfX,EAAA,iuBCqBA,IAAAY,EAAA,SAAAC,GAcE,SAAAD,EAAYE,GAAZ,IAAAC,EACEF,EAAAG,KAAAC,KAAMH,IAAMG,YAqCNF,EAAAG,YAAc,WACZ,IAAAC,EAAAJ,EAAAD,MAAAK,QACR,GAAKJ,EAAKK,UAAUC,QAKpB,IADA,eACWC,GACL,sEAAsEC,KAAKD,EAAKE,QAElFF,EAAKG,QAAU,SAAqBC,GAClCA,EAAMC,iBACNR,EAAQS,KAAKN,EAAKE,KAAKK,QAAQC,OAAOC,SAASC,OAAQ,QAL1CC,EAAA,EAAAC,EADLC,MAAMC,KAAKrB,EAAKK,UAAUC,QAAQgB,iBAAiB,cAC9CJ,EAAAC,EAAAI,OAAAL,IAAK,GAATC,EAAAD,MA1CflB,EAAKwB,OACHC,MAAQC,OAAQC,OAAAC,EAAA,EAAAD,CAAe5B,EAAMjB,WACrC+C,aAAc9B,EAAMjB,UAGtBkB,EAAKK,UAAYf,EAAA,cA+CrB,OArEuBK,EAAA,EAAAE,EAAAC,GACPD,EAAAiC,yBAAd,SAAuCC,EAA2BC,GACxD,IAAAlD,EAAAiD,EAAAjD,SACR,OAAIkD,EAAUH,eAAiB/C,GAE3B2C,MAAQC,OAAQC,OAAAC,EAAA,EAAAD,CAAeI,EAAUjD,WACzC+C,aAAc/C,GAIX,MAeFe,EAAAoC,UAAAC,kBAAP,WACEhC,KAAKC,eAGAN,EAAAoC,UAAAE,mBAAP,SAA0BC,EAA2BJ,GAC/C9B,KAAKsB,MAAMC,OAASO,EAAUP,MAChCvB,KAAKC,eAIFN,EAAAoC,UAAAI,OAAP,WACQ,IAAAnE,EAAAgC,KAAAH,MAAEuC,EAAApE,EAAAoE,MAAOjE,EAAAH,EAAAG,UAAWS,EAAAZ,EAAAY,SAClB2C,EAAAvB,KAAAsB,MAAAC,KACR,OAAKA,EAAKC,QAAW5C,EAKnBQ,EAAA,qBACEiD,IAAKrC,KAAKG,UACViC,MAAOA,EACPjE,UAAWmE,IAAG,qBAAsBnE,GACpCoE,wBAAyBhB,IARpB,MA8Bb5B,EArEA,CAAuBP,EAAA,mBAuERqC,OAAAe,EAAA,EAAAf,CAAW9B,WAA1BZ,EAAA,uIAvEAY,2nBCZA,IAAM8C,EAA8C,SAACzE,GAAE,IAAAG,EAAAH,EAAAG,UAAW0B,EAAAJ,EAAA,EAAAzB,GAAA,cAAe,OAC/EoB,EAAA,cAACsD,EAAA,EAAQjD,EAAA,KAAKI,GAAO1B,UAAWmE,IAAG,mCAAoCnE,eAG1DsE,UAAf1D,EAAA,uIAJM0D,goBCTSE,EAAA,itBCIf,IAAMxD,IAEFlB,MAAO,0BACPC,SAAUK,EAAA,cAACqE,EAAA,EAAqB,MAChCxE,iBAAkB,mCAIhByE,EAAW,WAAM,OAAAtE,EAAA,cAACuE,EAAA,GAAa7E,MAAM,SAASkB,SAA7BA,aAER0D,UAAf9D,EAAA,uIAVMI,qIAQA0D,+xBCKN,IAAAE,EAAA,SAAAnD,GAEE,SAAAmD,EAAYlD,GAAZ,IAAAC,EACEF,EAAAG,KAAAC,KAAMH,IAAMG,YAmCNF,EAAAkD,YAAc,WACpB,IAAM7C,EAAYL,EAAKK,UAAUC,QACjC,GAAKD,IAAaL,EAAKwB,MAAM2B,QAA7B,CAIA,IAAMC,EAAUC,SAASC,eAAejD,EAAUkD,aAAa,qBAC/DvD,EAAKwD,UACHC,aAAc9B,OAAA+B,EAAA,EAAA/B,CAAmBtB,EAAW+C,GAC1CO,iBAAkBD,EAAA,EAAiBE,OACnCC,gBAAiB,SACjBC,cAAe9D,EAAKD,MAAMgE,SAE5BZ,SAAS,MAILnD,EAAAgE,YAAc,WAChBhE,EAAKwB,MAAM2B,SACbnD,EAAKwD,UAAWL,SAAS,KApD3BnD,EAAKwB,OAAU2B,SAAS,GACxBnD,EAAKK,UAAYf,EAAA,cAsDrB,OA5DkCK,EAAA,EAAAsD,EAAAnD,GASzBmD,EAAAhB,UAAAI,OAAP,WACQ,IAAAnE,EAAAgC,KAAAsB,MAAEiC,EAAAvF,EAAAuF,aAAcN,EAAAjF,EAAAiF,QAChBc,EAAA/D,KAAAH,MAAEuC,EAAA2B,EAAA3B,MAAO4B,EAAAD,EAAAC,YAAaC,EAAAF,EAAAE,SAAUJ,EAAAE,EAAAF,OAAQK,EAAAH,EAAAG,OACxCC,EAAK,QAAQF,EAAQ,IAAID,EACzBI,EAAY,gBAAgBH,EAAQ,IAAID,EAC9C,OACE5E,EAAA,qBACE+E,GAAIA,EACJ9B,IAAKrC,KAAKG,UACViC,MAAOA,EACPiC,KAAK,WAAUC,gBACA,IAAGC,gBACH,IAAGC,gBACHR,EAAc,EAACS,gBACfR,EAAW,EAC1B9F,UAAWmE,IAAG,iCACZoC,wCAAyCR,IAE3CS,aAAc3E,KAAKgD,YACnB4B,aAAc5E,KAAK8D,aAEnB1E,EAAA,cAACyF,EAAA,GAAKnG,KAAK,SAAQoG,mBAAmBV,EAAWW,QAAQ,OACtD,QAAQd,EAAQ,IAAID,EACrB5E,EAAA,cAAC4F,EAAA,GAAY5C,MAAOmB,EAAcY,GAAIC,EAAWP,OAAQA,EAAQZ,QAASA,OA4BpFF,EA5DA,CAAkC3D,EAAA,sKAAlC2D,ipBCRA,IAAMkC,EAA4C,SAACjH,OAAEmG,EAAAnG,EAAAmG,GAAI/B,EAAApE,EAAAoE,MAAOyB,EAAA7F,EAAA6F,OAAQZ,EAAAjF,EAAAiF,QACtE,OAAIY,EAEAtF,EAAA,cAAC2G,EAAA,GAAOC,OAAO,4CAA4ClC,QAASA,GAClE1E,EAAA,cAAC6G,EAAA,GAAQjB,GAAIA,EAAI/B,MAAOA,EAAOa,QAASA,EAAS9E,UAAU,0CAAwC,aAOlGI,EAAA,cAAC6G,EAAA,GAAgBjB,GAAIA,GAAE,qBAGjBc,UAAflG,EAAA,uIAdMkG,y8BCMN,IAGAI,EAAA,SAAAzF,GAKE,SAAAyF,EAAYxF,GAAZ,IAAAC,EACEF,EAAAG,KAAAC,KAAMH,IAAMG,YA0ENF,EAAAwF,WAAa,SAACtH,OAAEuH,EAAAvH,EAAAuH,YAAaC,EAAAxH,EAAAwH,eACnC1F,EAAKwD,UAAWiC,YAAWA,EAAEC,eAAcA,KAGrC1F,EAAA2F,cAAgB,WACtB3F,EAAKwD,SACH,SAAAxB,GAAa,OAAG+B,QAAS/B,EAAZ+B,SACb,WACM/D,EAAK4F,KAAKtF,SACZN,EAAK4F,KAAKtF,QAAQuF,iBAjFxB7F,EAAKwB,OAAUuC,QAAQ,EAAO0B,YAAa,EAAGC,eAAgB,GAC9D1F,EAAK4F,KAAOtG,EAAA,cAqFhB,OA9FmDK,EAAA,EAAA4F,EAAAzF,GAY1CyF,EAAAtD,UAAAI,OAAP,eAAArC,EAAAE,KACE,OACEZ,EAAA,cAACA,EAAA,SAAc,KACbA,EAAA,cAACyF,EAAA,GAAKnG,KAAK,6JAE2BU,EAAA,2CAAuBA,EAAA,6CAAyBA,EAAA,qEAC5DA,EAAA,yKACsCA,EAAA,6CAGzD,qMACPA,EAAA,cAACyF,EAAA,GAAKnG,KAAK,8XAImCU,EAAA,0CAEvC,kGACPA,EAAA,cAACyF,EAAA,GAAKnG,KAAK,UAAUqG,QAAQ,cAAY,6GAGzC3F,EAAA,qBAAKjB,UAAU,2BACbiB,EAAA,cAACwG,EAAA,GACCC,YArCS,IAsCTC,SAvCM,IAwCNC,KAAK,QACLC,iBAAkBhG,KAAKsF,WACvBC,YAAavF,KAAKsB,MAAMiE,YACxBC,eAAgBxF,KAAKsB,MAAMkE,gBAE1B,SAACxH,OAAEiI,EAAAjI,EAAAiI,kBAAmBT,EAAAxH,EAAAwH,eAAgBD,EAAAvH,EAAAuH,YAAkB,OACvDnG,EAAA,cAACwG,EAAA,GAAUM,eAAa,GACrB,SAAClI,OAAEmI,EAAAnI,EAAAmI,MAAY,OACd/G,EAAA,cAACwG,EAAA,GACCvD,IAAKvC,EAAK4F,KACVU,OAAQ,IACRD,MAAOA,EACPE,UAAW,GACXP,SArDF,IAsDED,YArDC,IAsDDS,YAAa,IACbf,YAAaA,EACbC,eAAgBA,EAChBe,aAAc,SAAC1G,GACL,IAAAmE,EAAAnE,EAAAmE,YAAaC,EAAApE,EAAAoE,SACrB,OACE7E,EAAA,cAACoH,EAAA,EAAI/G,EAAA,KACCI,GACJqE,OAAQF,IAAgBwB,GAAkBvB,IAAasB,EACvD1B,OAAQ/D,EAAKwB,MAAMuC,WAIzBoC,kBAAmBA,SAO/B7G,EAAA,sBAAM+E,GAAG,8CACT/E,EAAA,cAACqH,EAAA,GAAOtC,GAAG,kCAAkCuC,QAAS1G,KAAKyF,cAAekB,UAAU,WAAS,4BAqBrGtB,EA9FA,CAAmDjG,EAAA,sKAHjC,2KACG,8KAErBiG,ssBClBeuB,EAAA,UAAf7H,EAAA,qsBCAe8H,EAAA,UAAf9H,EAAA,w1BCQM,SAAU+H,EAAYC,GAC1B,OAAKA,EAEY,QAANA,EACF,aACQ,OAANA,EACF,OACQ,SAANA,EACF,MAGFA,EATE,6EAYXC,EAAA,YACEC,SAAU,IAAID,EAAA,SACdE,UAAW,SAACC,EAAMC,GAAS,OAAAC,EAAA,UAAgBF,EAAME,EAAA,UAAgBP,EAAtCM,MAC3BE,KAAK,EACLC,QAAQ,EACRC,QAAQ,EACRC,UAAU,EACVC,UAAU,EACVC,YAAY,EACZC,aAAa,IAWf,QAAMC,KACAC,GACJ,SAAAlJ,GAAY,OAAAA,EAASgC,QAAQ,WAAjB,6BACZ,SAAAhC,GACE,OAAAA,EAASgC,QACP,iEACA,SAACmH,EAAGC,EAAIC,GAAO,OAAGD,EAAE,wBAAwBC,EAA7B,iCAEnB,SAAArJ,GACE,OAAAA,EAASgC,QAAQ,YAAa,sFAG5B,SAAUsH,EAAUtJ,EAAkBuJ,EAAsCC,GAChF,OAAOD,EAAWE,OAAO,SAACtB,EAAGuB,GAAM,OAAAA,EAAEvB,EAAFqB,IAAexJ,GAG9C,SAAU2J,EAAe3J,EAAkBwJ,GAC/C,OAAOF,EAAUlB,EAAA,MAAakB,EAAUtJ,EAAUiJ,EAAeO,IAAWN,EAAgBM,sIAnD9EtB,+GAkCVe,iHACAC,kHAWUI,6GAIAK","file":"js/31.b5c8b07c.chunk.min.js","sourcesContent":["import * as React from \"react\";\nimport cn from \"classnames\";\nimport { Text } from \"@react-md/typography\";\n\nimport Markdown from \"components/Markdown\";\n\nexport interface IExampleProps {\n  exampleGroup?: boolean;\n  title: string;\n  children?: React.ReactNode;\n  className?: string;\n  description?: string;\n  contentClassName?: string;\n}\n\nconst Example: React.SFC<IExampleProps> = ({\n  title,\n  children,\n  className,\n  contentClassName,\n  description,\n  exampleGroup,\n}) => (\n  <section className={cn(\"examples-page__example\", className)}>\n    <Text type=\"headline-4\" className=\"examples-page__example-title\">\n      {title}\n    </Text>\n    {description && <Markdown markdown={description} />}\n    <div className={cn(\"examples-page__example-content\", { \"example-group\": exampleGroup }, contentClassName)}>\n      {children}\n    </div>\n  </section>\n);\n\nExample.defaultProps = {\n  exampleGroup: true,\n};\n\nexport default Example;\n","import * as React from \"react\";\nimport { Text } from \"@react-md/typography\";\n\nexport interface IExampleTitleProps {\n  children: React.ReactNode;\n}\n\nconst ExampleTitle: React.SFC<IExampleTitleProps> = ({ children }) => <Text type=\"headline-6\">{children}</Text>;\n\nexport default ExampleTitle;\n","import * as React from \"react\";\nimport { Text } from \"@react-md/typography\";\n\nimport Markdown from \"components/Markdown\";\n\nimport \"./examples-page.scss\";\nimport { default as Example, IExampleProps } from \"./Example\";\n\nexport type ExampleList = IExampleProps[];\n\nexport interface IExamplesPageProps {\n  title: string;\n  description?: string;\n  examples: ExampleList;\n}\n\nconst ExamplesPage: React.SFC<IExamplesPageProps> = ({ title, description, examples }) => (\n  <section className=\"examples-page\">\n    <header className=\"rmd-text-container\">\n      <Text type=\"headline-2\" className=\"examples-page__title\">\n        {title}\n      </Text>\n    </header>\n    {description && <Markdown markdown={description} className=\"rmd-text-container\" />}\n    {examples.map((example, key) => (\n      <Example key={key} {...example} />\n    ))}\n  </section>\n);\n\nexport default ExamplesPage;\n","import ExamplesPage from \"./ExamplesPage\";\n\nexport default ExamplesPage;\n\nexport { default as ExamplesPage } from \"./ExamplesPage\"\nexport * from \"./ExamplesPage\"\nexport { default as ExampleTitle } from \"./ExampleTitle\";\n","import * as React from \"react\";\nimport cn from \"classnames\";\nimport { withRouter, RouteComponentProps } from \"react-router\";\n\nimport { markdownToHTML } from \"utils/markdown\";\n\nimport \"./markdown.scss\";\n\nexport interface IMarkdownProps extends RouteComponentProps<any> {\n  style?: React.CSSProperties;\n  className?: string;\n  markdown: string;\n}\n\ninterface IInnerHTML {\n  __html: string;\n}\n\nexport interface IMarkdownState {\n  html: IInnerHTML;\n  prevMarkdown: string;\n}\n\nclass Markdown extends React.Component<IMarkdownProps, IMarkdownState> {\n  public static getDerivedStateFromProps(nextProps: IMarkdownProps, prevState: IMarkdownState) {\n    const { markdown } = nextProps;\n    if (prevState.prevMarkdown !== markdown) {\n      return {\n        html: { __html: markdownToHTML(nextProps.markdown) },\n        prevMarkdown: markdown,\n      };\n    }\n\n    return null;\n  }\n\n  private container: React.RefObject<HTMLDivElement>;\n  constructor(props: IMarkdownProps) {\n    super(props);\n\n    this.state = {\n      html: { __html: markdownToHTML(props.markdown) },\n      prevMarkdown: props.markdown,\n    };\n\n    this.container = React.createRef();\n  }\n\n  public componentDidMount() {\n    this.updateLinks();\n  }\n\n  public componentDidUpdate(prevProps: IMarkdownProps, prevState: IMarkdownState) {\n    if (this.state.html !== prevState.html) {\n      this.updateLinks();\n    }\n  }\n\n  public render() {\n    const { style, className, markdown } = this.props;\n    const { html } = this.state;\n    if (!html.__html || !markdown) {\n      return null;\n    }\n\n    return (\n      <div\n        ref={this.container}\n        style={style}\n        className={cn(\"markdown-container\", className)}\n        dangerouslySetInnerHTML={html}\n      />\n    );\n  }\n\n  private updateLinks = () => {\n    const { history } = this.props;\n    if (!this.container.current) {\n      return;\n    }\n\n    const links = Array.from(this.container.current.querySelectorAll(\".rmd-link\") as NodeListOf<HTMLAnchorElement>);\n    for (const link of links) {\n      if (/^https?:\\/\\/(localhost|react-md|mlaursen\\.github\\.io\\/react-\\/md\\/)/.test(link.href)) {\n        // update internal links to use browser history instead of native behavior\n        link.onclick = function handleClick(event: MouseEvent) {\n          event.preventDefault();\n          history.push(link.href.replace(window.location.origin, \"\"));\n        };\n      }\n    }\n  };\n}\n\nexport default withRouter(Markdown);\n","import * as React from \"react\";\nimport cn from \"classnames\";\n\nimport Markdown from \"./Markdown\";\n\nexport interface IMarkdownPageProps {\n  style?: React.CSSProperties;\n  className?: string;\n  markdown: string;\n}\n\nconst MarkdownPage: React.SFC<IMarkdownPageProps> = ({ className, ...props }) => (\n  <Markdown {...props} className={cn(\"markdown-page rmd-text-container\", className)} />\n);\n\nexport default MarkdownPage;\n","import Markdown from \"./Markdown\";\n\nexport default Markdown;\nexport { Markdown };\n\nexport { default as MarkdownPage } from \"./MarkdownPage\";\n","import * as React from \"react\";\n\nimport { default as ExamplesPage, ExampleList } from \"components/ExamplesPage\";\n\nimport OverflowPortalExample from \"./OverflowPortalExample\";\n\nconst examples: ExampleList = [\n  {\n    title: \"Overflow Portal Example\",\n    children: <OverflowPortalExample />,\n    contentClassName: \"examples-page__overflow-portal\",\n  },\n];\n\nconst Examples = () => <ExamplesPage title=\"Portal\" examples={examples} />;\n\nexport default Examples;\n","import * as React from \"react\";\nimport cn from \"classnames\";\nimport { GridCellProps } from \"react-virtualized\";\nimport { Text } from \"@react-md/typography\";\nimport { TooltipPosition } from \"@react-md/tooltip\";\nimport { positionRelativeTo, HorizontalPosition, VerticalPosition } from \"@react-md/utils\";\n\nimport CellTooltip from \"./CellTooltip\";\n\nexport interface ICellProps extends GridCellProps {\n  active: boolean;\n  portal: boolean;\n}\n\nexport interface ICellState {\n  tooltipStyle?: React.CSSProperties;\n  visible: boolean;\n}\n\nexport default class Cell extends React.Component<ICellProps, ICellState> {\n  private container: React.RefObject<HTMLDivElement>;\n  constructor(props: ICellProps) {\n    super(props);\n\n    this.state = { visible: false };\n    this.container = React.createRef();\n  }\n\n  public render() {\n    const { tooltipStyle, visible } = this.state;\n    const { style, columnIndex, rowIndex, portal, active } = this.props;\n    const id = `cell-${rowIndex}-${columnIndex}`;\n    const tooltipId = `cell-tooltip-${rowIndex}-${columnIndex}`;\n    return (\n      <div\n        id={id}\n        ref={this.container}\n        style={style}\n        role=\"gridcell\"\n        aria-colcount={100}\n        aria-rowcount={100}\n        aria-colindex={columnIndex + 1}\n        aria-rowindex={rowIndex + 1}\n        className={cn(\"overflow-portal-example__cell\", {\n          \"overflow-portal-example__cell--active\": active,\n        })}\n        onMouseEnter={this.showTooltip}\n        onMouseLeave={this.hideTooltip}\n      >\n        <Text type=\"body-2\" aria-describedby={tooltipId} tagName=\"div\">\n          {`Cell ${rowIndex}-${columnIndex}`}\n          <CellTooltip style={tooltipStyle} id={tooltipId} portal={portal} visible={visible} />\n        </Text>\n      </div>\n    );\n  }\n\n  private showTooltip = () => {\n    const container = this.container.current;\n    if (!container || this.state.visible) {\n      return;\n    }\n\n    const tooltip = document.getElementById(container.getAttribute(\"aria-describedby\") as string);\n    this.setState({\n      tooltipStyle: positionRelativeTo(container, tooltip, {\n        verticalPosition: VerticalPosition.BOTTOM,\n        verticalSpacing: \"1.5rem\",\n        isPortalFixed: this.props.portal,\n      }),\n      visible: true,\n    });\n  };\n\n  private hideTooltip = () => {\n    if (this.state.visible) {\n      this.setState({ visible: false });\n    }\n  };\n}\n","import * as React from \"react\";\nimport { Portal } from \"@react-md/portal\";\nimport { RelativeTooltip, Tooltip } from \"@react-md/tooltip\";\n\nexport interface ICellTooltipProps {\n  style?: React.CSSProperties;\n  portal: boolean;\n  visible: boolean;\n  id: string;\n}\n\nconst CellTooltip: React.SFC<ICellTooltipProps> = ({ id, style, portal, visible }) => {\n  if (portal) {\n    return (\n      <Portal intoId=\"overflow-portal-example-tooltip-container\" visible={visible}>\n        <Tooltip id={id} style={style} visible={visible} className=\"rmd-tooltip--magic rmd-tooltip--active\">\n          Tooltip!\n        </Tooltip>\n      </Portal>\n    );\n  }\n\n  return <RelativeTooltip id={id}>Tooltip!</RelativeTooltip>;\n};\n\nexport default CellTooltip;\n","import * as React from \"react\";\nimport { Button } from \"@react-md/button\";\nimport { Text } from \"@react-md/typography\";\nimport { Grid, GridCellProps, AutoSizer, ArrowKeyStepper, ScrollIndices } from \"react-virtualized\";\nimport { Tooltip } from \"@react-md/tooltip\";\n\nimport \"./overflow-portal-example.scss\";\nimport Cell from \"./Cell\";\n\nexport interface IOverflowPortalExampleProps {}\n\nexport interface IOverflowPortalExampleState {\n  portal: boolean;\n  scrollToRow: number;\n  scrollToColumn: number;\n}\n\nconst ROW_COUNT = 100;\nconst COLUMN_COUNT = 100;\n\nexport default class OverflowPortalExample extends React.Component<\n  IOverflowPortalExampleProps,\n  IOverflowPortalExampleState\n> {\n  private grid: React.RefObject<Grid>;\n  constructor(props: IOverflowPortalExampleProps) {\n    super(props);\n\n    this.state = { portal: false, scrollToRow: 0, scrollToColumn: 0 };\n    this.grid = React.createRef();\n  }\n\n  public render() {\n    return (\n      <React.Fragment>\n        <Text type=\"body-2\">\n          This example will show a very basic example of how you can use portals to fix overflow rendering issues. If\n          you set any of the overflow values (<code>overflow</code>, <code>overflow-x</code>, <code>overflow-y</code>)\n          to any value other than <code>visible</code>, elements that are positioned absolute or fixed will no longer be\n          visible. This can be seen below with the default usage of the <code>RelativeTooltip</code> component. The\n          tooltips will display correctly until you attempt to view a tooltip in the last 60px of the scroll area. It\n          can be visible if you manually scroll a bit, but that isn't great UX.\n        </Text>\n        <Text type=\"body-2\">\n          To get around this issue, you can use portals to render these \"temporary\" elements outside of the scroll area\n          and apply some positioning logic to render the \"temporary\" element near the desired element. If you enable the\n          portal view by clicking the toggle button below, the portals will be enabled with some extremely simple\n          positioning logic. This is actually how the <code>MagicTooltip</code> component works behind the scenes but\n          with a bit more positioning logic and animations added.\n        </Text>\n        <Text type=\"caption\" tagName=\"blockquote\">\n          NOTE: The example below only has mouse interactions enabled to keep things simple with react-virtualized.\n        </Text>\n        <div className=\"overflow-portal-example\">\n          <ArrowKeyStepper\n            columnCount={COLUMN_COUNT}\n            rowCount={ROW_COUNT}\n            mode=\"cells\"\n            onScrollToChange={this.selectCell}\n            scrollToRow={this.state.scrollToRow}\n            scrollToColumn={this.state.scrollToColumn}\n          >\n            {({ onSectionRendered, scrollToColumn, scrollToRow }) => (\n              <AutoSizer disableHeight>\n                {({ width }) => (\n                  <Grid\n                    ref={this.grid}\n                    height={300}\n                    width={width}\n                    rowHeight={48}\n                    rowCount={ROW_COUNT}\n                    columnCount={COLUMN_COUNT}\n                    columnWidth={100}\n                    scrollToRow={scrollToRow}\n                    scrollToColumn={scrollToColumn}\n                    cellRenderer={(props: GridCellProps) => {\n                      const { columnIndex, rowIndex } = props;\n                      return (\n                        <Cell\n                          {...props}\n                          active={columnIndex === scrollToColumn && rowIndex === scrollToRow}\n                          portal={this.state.portal}\n                        />\n                      );\n                    }}\n                    onSectionRendered={onSectionRendered}\n                  />\n                )}\n              </AutoSizer>\n            )}\n          </ArrowKeyStepper>\n        </div>\n        <span id=\"overflow-portal-example-tooltip-container\" />\n        <Button id=\"toggle-overflow-tooltip-portals\" onClick={this.togglePortals} themeType=\"outline\">\n          Toggle Tooltip Portals\n        </Button>\n      </React.Fragment>\n    );\n  }\n\n  private selectCell = ({ scrollToRow, scrollToColumn }: ScrollIndices) => {\n    this.setState({ scrollToRow, scrollToColumn });\n  };\n\n  private togglePortals = () => {\n    this.setState(\n      prevState => ({ portal: !prevState.portal }),\n      () => {\n        if (this.grid.current) {\n          this.grid.current.forceUpdate();\n        }\n      }\n    );\n  };\n}\n","import OverflowPortalExample from \"./OverflowPortalExample\";\n\nexport default OverflowPortalExample;\n","import Examples from \"./Examples\";\n\nexport default Examples;\n","import * as marked from \"marked\";\nimport * as Prism from \"prismjs\";\n\nimport \"prismjs/components/prism-bash\";\nimport \"prismjs/components/prism-css-extras\";\nimport \"prismjs/components/prism-scss\";\nimport \"prismjs/components/prism-jsx\";\nimport \"prismjs/components/prism-typescript\";\nimport \"prismjs/components/prism-git\";\n\nexport function getLanguage(s: string) {\n  if (!s) {\n    return \"markup\";\n  } else if (s === \"tsx\") {\n    return \"typescript\";\n  } else if (s === \"sh\") {\n    return \"bash\";\n  } else if (s === \"diff\") {\n    return \"git\";\n  }\n\n  return s;\n}\n\nmarked.setOptions({\n  renderer: new marked.Renderer(),\n  highlight: (code, lang) => Prism.highlight(code, Prism.languages[getLanguage(lang)]),\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: false,\n  smartLists: true,\n  smartypants: false,\n});\n\nexport interface IMarkdownOptions {\n  showToolbar?: boolean;\n  showLineNumbers?: boolean;\n}\n\nexport type MarkdownTransformation = (markdown: string, options?: IMarkdownOptions) => string;\nexport type MarkdownTransformationList = MarkdownTransformation[];\n\nconst preTransforms: MarkdownTransformationList = [];\nconst postTransforms: MarkdownTransformationList = [\n  markdown => markdown.replace(/<a href/g, '<a class=\"rmd-link\" href'),\n  markdown =>\n    markdown.replace(\n      /(<h2 id=\"table-of-contents\")(>Table of Contents<\\/h2>\\r?\\n<ul)/,\n      (_, s1, s2) => `${s1} class=\"markdown-toc\"${s2} class=\"markdown-toc__list\"`\n    ),\n  markdown =>\n    markdown.replace(/yarn add/g, '<span class=\"token function\">yarn</span> <span class=\"token function\">add</span>'),\n];\n\nexport function transform(markdown: string, transforms: MarkdownTransformation[], options?: IMarkdownOptions) {\n  return transforms.reduce((s, t) => t(s, options), markdown);\n}\n\nexport function markdownToHTML(markdown: string, options?: IMarkdownOptions) {\n  return transform(marked.parse(transform(markdown, preTransforms, options)), postTransforms, options);\n}\n"],"sourceRoot":""}