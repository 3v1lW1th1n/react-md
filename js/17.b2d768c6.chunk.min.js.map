{"version":3,"sources":["components/ExamplesPage/Example.tsx","components/ExamplesPage/ExampleTitle.tsx","components/ExamplesPage/ExamplesPage.tsx","components/ExamplesPage/index.ts","components/Markdown/Markdown.tsx","components/Markdown/MarkdownPage.tsx","components/Markdown/index.ts","components/packages/MaterialIcons/Examples/AllIcons.tsx","components/packages/MaterialIcons/Examples/Examples.tsx","components/packages/MaterialIcons/Examples/index.ts","utils/markdown/index.ts"],"names":["Example","_a","title","children","className","contentClassName","description","exampleGroup","react__WEBPACK_IMPORTED_MODULE_0__","classnames__WEBPACK_IMPORTED_MODULE_1___default","_react_md_typography__WEBPACK_IMPORTED_MODULE_2__","type","components_Markdown__WEBPACK_IMPORTED_MODULE_3__","markdown","example-group","defaultProps","__webpack_exports__","ExampleTitle","_react_md_typography__WEBPACK_IMPORTED_MODULE_1__","ExamplesPage","examples","react__WEBPACK_IMPORTED_MODULE_1__","map","example","key","_Example__WEBPACK_IMPORTED_MODULE_5__","tslib__WEBPACK_IMPORTED_MODULE_0__","_ExamplesPage__WEBPACK_IMPORTED_MODULE_0__","Markdown","_super","props","_this","call","this","updateLinks","history","container","current","link","test","href","onclick","event","preventDefault","push","replace","window","location","origin","_i","links_1","Array","from","querySelectorAll","length","state","html","__html","Object","utils_markdown__WEBPACK_IMPORTED_MODULE_4__","prevMarkdown","getDerivedStateFromProps","nextProps","prevState","prototype","componentDidMount","componentDidUpdate","prevProps","render","style","ref","classnames__WEBPACK_IMPORTED_MODULE_2___default","dangerouslySetInnerHTML","react_router__WEBPACK_IMPORTED_MODULE_3__","MarkdownPage","_Markdown__WEBPACK_IMPORTED_MODULE_3__","_Markdown__WEBPACK_IMPORTED_MODULE_0__","keys","_react_md_material_icons__WEBPACK_IMPORTED_MODULE_4__","reduce","icons","font","svg","AllIcons","components_ExamplesPage__WEBPACK_IMPORTED_MODULE_2__","i","icon","name","tooltipId","material-icons__example--last","aria-describedby","_react_md_tooltip__WEBPACK_IMPORTED_MODULE_3__","id","_AllIcons__WEBPACK_IMPORTED_MODULE_2__","Examples","components_ExamplesPage__WEBPACK_IMPORTED_MODULE_1__","_Examples__WEBPACK_IMPORTED_MODULE_0__","getLanguage","s","marked__WEBPACK_IMPORTED_MODULE_0__","renderer","highlight","code","lang","prismjs__WEBPACK_IMPORTED_MODULE_1__","gfm","tables","breaks","pedantic","sanitize","smartLists","smartypants","headerIds","preTransforms","postTransforms","_","s1","s2","transform","transforms","options","t","markdownToHTML"],"mappings":"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","file":"js/17.b2d768c6.chunk.min.js","sourcesContent":["import * as React from \"react\";\r\nimport cn from \"classnames\";\r\nimport { Text } from \"@react-md/typography\";\r\n\r\nimport Markdown from \"components/Markdown\";\r\n\r\nexport interface IExampleProps {\r\n  exampleGroup?: boolean;\r\n  title: string;\r\n  children?: React.ReactNode;\r\n  className?: string;\r\n  description?: string;\r\n  contentClassName?: string;\r\n}\r\n\r\nconst Example: React.SFC<IExampleProps> = ({\r\n  title,\r\n  children,\r\n  className,\r\n  contentClassName,\r\n  description,\r\n  exampleGroup,\r\n}) => (\r\n  <section className={cn(\"examples-page__example\", className)}>\r\n    <Text type=\"headline-4\" className=\"examples-page__example-title\">\r\n      {title}\r\n    </Text>\r\n    {description && <Markdown markdown={description} />}\r\n    <div\r\n      className={cn(\r\n        \"examples-page__example-content\",\r\n        { \"example-group\": exampleGroup },\r\n        contentClassName\r\n      )}\r\n    >\r\n      {children}\r\n    </div>\r\n  </section>\r\n);\r\n\r\nExample.defaultProps = {\r\n  exampleGroup: true,\r\n};\r\n\r\nexport default Example;\r\n","import * as React from \"react\";\r\nimport { Text } from \"@react-md/typography\";\r\n\r\nexport interface IExampleTitleProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst ExampleTitle: React.SFC<IExampleTitleProps> = ({ children }) => (\r\n  <Text type=\"headline-6\">{children}</Text>\r\n);\r\n\r\nexport default ExampleTitle;\r\n","import * as React from \"react\";\r\nimport { Text } from \"@react-md/typography\";\r\n\r\nimport Markdown from \"components/Markdown\";\r\n\r\nimport \"./examples-page.scss\";\r\nimport { default as Example, IExampleProps } from \"./Example\";\r\n\r\nexport type ExampleList = IExampleProps[];\r\n\r\nexport interface IExamplesPageProps {\r\n  title: string;\r\n  description?: string;\r\n  examples: ExampleList;\r\n}\r\n\r\nconst ExamplesPage: React.SFC<IExamplesPageProps> = ({ title, description, examples }) => (\r\n  <section className=\"examples-page\">\r\n    <header className=\"rmd-text-container\">\r\n      <Text type=\"headline-2\" className=\"examples-page__title\">\r\n        {title}\r\n      </Text>\r\n    </header>\r\n    {description && <Markdown markdown={description} className=\"rmd-text-container\" />}\r\n    {examples.map((example, key) => (\r\n      <Example key={key} {...example} />\r\n    ))}\r\n  </section>\r\n);\r\n\r\nexport default ExamplesPage;\r\n","import ExamplesPage from \"./ExamplesPage\";\r\n\r\nexport default ExamplesPage;\r\n\r\nexport { default as ExamplesPage } from \"./ExamplesPage\";\r\nexport * from \"./ExamplesPage\";\r\nexport { default as ExampleTitle } from \"./ExampleTitle\";\r\n","import * as React from \"react\";\r\nimport cn from \"classnames\";\r\nimport { withRouter, RouteComponentProps } from \"react-router\";\r\n\r\nimport { markdownToHTML } from \"utils/markdown\";\r\n\r\nimport \"./markdown.scss\";\r\n\r\nexport interface IMarkdownProps extends RouteComponentProps<any> {\r\n  style?: React.CSSProperties;\r\n  className?: string;\r\n  markdown: string;\r\n}\r\n\r\ninterface IInnerHTML {\r\n  __html: string;\r\n}\r\n\r\nexport interface IMarkdownState {\r\n  html: IInnerHTML;\r\n  prevMarkdown: string;\r\n}\r\n\r\nclass Markdown extends React.Component<IMarkdownProps, IMarkdownState> {\r\n  public static getDerivedStateFromProps(nextProps: IMarkdownProps, prevState: IMarkdownState) {\r\n    const { markdown } = nextProps;\r\n    if (prevState.prevMarkdown !== markdown) {\r\n      return {\r\n        html: { __html: markdownToHTML(nextProps.markdown) },\r\n        prevMarkdown: markdown,\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private container: React.RefObject<HTMLDivElement>;\r\n  constructor(props: IMarkdownProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      html: { __html: markdownToHTML(props.markdown) },\r\n      prevMarkdown: props.markdown,\r\n    };\r\n\r\n    this.container = React.createRef();\r\n  }\r\n\r\n  public componentDidMount() {\r\n    this.updateLinks();\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: IMarkdownProps, prevState: IMarkdownState) {\r\n    if (this.state.html !== prevState.html) {\r\n      this.updateLinks();\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    const { style, className, markdown } = this.props;\r\n    const { html } = this.state;\r\n    if (!html.__html || !markdown) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        ref={this.container}\r\n        style={style}\r\n        className={cn(\"markdown-container\", className)}\r\n        dangerouslySetInnerHTML={html}\r\n      />\r\n    );\r\n  }\r\n\r\n  private updateLinks = () => {\r\n    const { history } = this.props;\r\n    if (!this.container.current) {\r\n      return;\r\n    }\r\n\r\n    const links = Array.from(this.container.current.querySelectorAll(\".rmd-link\") as NodeListOf<\r\n      HTMLAnchorElement\r\n    >);\r\n    for (const link of links) {\r\n      if (/^https?:\\/\\/(localhost|react-md|mlaursen\\.github\\.io\\/react-md\\/)/.test(link.href)) {\r\n        // update internal links to use browser history instead of native behavior\r\n        link.onclick = function handleClick(event: MouseEvent) {\r\n          event.preventDefault();\r\n          history.push(link.href.replace(window.location.origin, \"\"));\r\n        };\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default withRouter(Markdown);\r\n","import * as React from \"react\";\r\nimport cn from \"classnames\";\r\n\r\nimport Markdown from \"./Markdown\";\r\n\r\nexport interface IMarkdownPageProps {\r\n  style?: React.CSSProperties;\r\n  className?: string;\r\n  markdown: string;\r\n}\r\n\r\nconst MarkdownPage: React.SFC<IMarkdownPageProps> = ({ className, ...props }) => (\r\n  <Markdown {...props} className={cn(\"markdown-page rmd-text-container\", className)} />\r\n);\r\n\r\nexport default MarkdownPage;\r\n","import Markdown from \"./Markdown\";\r\n\r\nexport default Markdown;\r\nexport { Markdown };\r\n\r\nexport { default as MarkdownPage } from \"./MarkdownPage\";\r\n","import * as React from \"react\";\r\nimport cn from \"classnames\";\r\nimport { ExampleTitle } from \"components/ExamplesPage\";\r\nimport { IFontIconProps } from \"@react-md/icon\";\r\nimport { Tooltip } from \"@react-md/tooltip\";\r\nimport * as MaterialIcons from \"@react-md/material-icons\";\r\n\r\ninterface IIcon {\r\n  name: string;\r\n  icon: React.ComponentType<IFontIconProps>;\r\n}\r\n\r\nimport \"./all-icons.scss\";\r\n\r\nconst { font, svg } = Object.keys(MaterialIcons).reduce(\r\n  (icons, key) => {\r\n    const icon = (MaterialIcons as { [key: string]: React.StatelessComponent })[key];\r\n    if (key.endsWith(\"FontIcon\")) {\r\n      icons.font.push({ icon, name: key });\r\n    } else {\r\n      icons.svg.push({ icon, name: key });\r\n    }\r\n\r\n    return icons;\r\n  },\r\n  { font: [] as IIcon[], svg: [] as IIcon[] }\r\n);\r\n\r\nconst AllIcons = () => (\r\n  <React.Fragment>\r\n    <ExampleTitle>Font Icons</ExampleTitle>\r\n    {font.map(({ icon, name }, i) => {\r\n      const tooltipId = `font-icon-tooltip-${i}`;\r\n\r\n      return (\r\n        <div\r\n          key={name}\r\n          className={cn(\"material-icons__example\", {\r\n            \"material-icons__example--last\": i === font.length - 1,\r\n          })}\r\n          aria-describedby={tooltipId}\r\n        >\r\n          {React.createElement(icon)}\r\n          <div className=\"material-icons__label\">{name}</div>\r\n          <Tooltip id={tooltipId}>{name}</Tooltip>\r\n        </div>\r\n      );\r\n    })}\r\n    <ExampleTitle>SVG Icons</ExampleTitle>\r\n    {svg.map(({ icon, name }, i) => {\r\n      const tooltipId = `svg-icon-tooltip-${i}`;\r\n\r\n      return (\r\n        <div\r\n          key={name}\r\n          className={cn(\"material-icons__example\", {\r\n            \"material-icons__example--last\": i === font.length - 1,\r\n          })}\r\n          aria-describedby={tooltipId}\r\n        >\r\n          {React.createElement(icon)}\r\n          <div className=\"material-icons__label\">{name}</div>\r\n          <Tooltip id={tooltipId}>{name}</Tooltip>\r\n        </div>\r\n      );\r\n    })}\r\n  </React.Fragment>\r\n);\r\n\r\nexport default AllIcons;\r\n","import * as React from \"react\";\r\n\r\nimport { default as ExamplesPage, ExampleList } from \"components/ExamplesPage\";\r\n\r\nimport AllIcons from \"./AllIcons\";\r\n\r\nconst examples: ExampleList = [\r\n  {\r\n    title: \"All Icons\",\r\n    children: <AllIcons />,\r\n    contentClassName: \"material-icons__list\",\r\n  },\r\n];\r\n\r\nconst Examples = () => <ExamplesPage title=\"MaterialIcons\" examples={examples} />;\r\n\r\nexport default Examples;\r\n","import Examples from \"./Examples\";\r\n\r\nexport default Examples;\r\n","import * as marked from \"marked\";\r\nimport * as Prism from \"prismjs\";\r\n\r\nimport \"prismjs/components/prism-bash\";\r\nimport \"prismjs/components/prism-css-extras\";\r\nimport \"prismjs/components/prism-scss\";\r\nimport \"prismjs/components/prism-jsx\";\r\nimport \"prismjs/components/prism-typescript\";\r\nimport \"prismjs/components/prism-git\";\r\n\r\nexport function getLanguage(s: string) {\r\n  if (!s) {\r\n    return \"markup\";\r\n  } else if (s === \"tsx\") {\r\n    return \"typescript\";\r\n  } else if (s === \"sh\") {\r\n    return \"bash\";\r\n  } else if (s === \"diff\") {\r\n    return \"git\";\r\n  }\r\n\r\n  return s;\r\n}\r\n\r\nmarked.setOptions({\r\n  renderer: new marked.Renderer(),\r\n  highlight: (code, lang) => Prism.highlight(code, Prism.languages[getLanguage(lang)]),\r\n  gfm: true,\r\n  tables: true,\r\n  breaks: false,\r\n  pedantic: false,\r\n  sanitize: false,\r\n  smartLists: true,\r\n  smartypants: false,\r\n  headerIds: true,\r\n});\r\n\r\nexport interface IMarkdownOptions {\r\n  showToolbar?: boolean;\r\n  showLineNumbers?: boolean;\r\n}\r\n\r\nexport type MarkdownTransformation = (markdown: string, options?: IMarkdownOptions) => string;\r\nexport type MarkdownTransformationList = MarkdownTransformation[];\r\n\r\nconst preTransforms: MarkdownTransformationList = [];\r\nconst postTransforms: MarkdownTransformationList = [\r\n  markdown => markdown.replace(/<a href/g, '<a class=\"rmd-link\" href'),\r\n  markdown =>\r\n    markdown.replace(\r\n      /(<h2 id=\"table-of-contents\")(>Table of Contents<\\/h2>\\r?\\n<ul)/,\r\n      (_, s1, s2) => `${s1} class=\"markdown-toc\"${s2} class=\"markdown-toc__list\"`\r\n    ),\r\n  markdown =>\r\n    markdown.replace(\r\n      /yarn add/g,\r\n      '<span class=\"token function\">yarn</span> <span class=\"token function\">add</span>'\r\n    ),\r\n];\r\n\r\nexport function transform(\r\n  markdown: string,\r\n  transforms: MarkdownTransformation[],\r\n  options?: IMarkdownOptions\r\n) {\r\n  return transforms.reduce((s, t) => t(s, options), markdown);\r\n}\r\n\r\nexport function markdownToHTML(markdown: string, options?: IMarkdownOptions) {\r\n  return transform(\r\n    marked.parse(transform(markdown, preTransforms, options)),\r\n    postTransforms,\r\n    options\r\n  );\r\n}\r\n"],"sourceRoot":""}