{"version":3,"sources":["components/ExamplesPage/Example.tsx","components/ExamplesPage/ExampleTitle.tsx","components/ExamplesPage/ExamplesPage.tsx","components/ExamplesPage/index.ts","components/Markdown/Markdown.tsx","components/Markdown/MarkdownPage.tsx","components/Markdown/index.ts","components/packages/MaterialIcons/Examples/AllIcons.tsx","components/packages/MaterialIcons/Examples/Examples.tsx","components/packages/MaterialIcons/Examples/index.ts","utils/markdown/index.ts"],"names":["Example","_a","title","children","className","contentClassName","description","exampleGroup","react__WEBPACK_IMPORTED_MODULE_0__","classnames__WEBPACK_IMPORTED_MODULE_1___default","_react_md_typography__WEBPACK_IMPORTED_MODULE_2__","type","components_Markdown__WEBPACK_IMPORTED_MODULE_3__","markdown","example-group","defaultProps","__webpack_exports__","ExampleTitle","_react_md_typography__WEBPACK_IMPORTED_MODULE_1__","ExamplesPage","examples","react__WEBPACK_IMPORTED_MODULE_1__","map","example","key","_Example__WEBPACK_IMPORTED_MODULE_5__","tslib__WEBPACK_IMPORTED_MODULE_0__","_ExamplesPage__WEBPACK_IMPORTED_MODULE_0__","Markdown","_super","props","_this","call","this","updateInnerHTML","html","Object","utils_markdown__WEBPACK_IMPORTED_MODULE_3__","state","__html","setState","prevMarkdown","getDerivedStateFromProps","nextProps","prevState","prototype","render","style","classnames__WEBPACK_IMPORTED_MODULE_2___default","dangerouslySetInnerHTML","MarkdownPage","_Markdown__WEBPACK_IMPORTED_MODULE_3__","_Markdown__WEBPACK_IMPORTED_MODULE_0__","keys","_react_md_material_icons__WEBPACK_IMPORTED_MODULE_4__","reduce","icons","font","svg","AllIcons","components_ExamplesPage__WEBPACK_IMPORTED_MODULE_2__","i","icon","name","tooltipId","material-icons__example--last","length","aria-describedby","_react_md_tooltip__WEBPACK_IMPORTED_MODULE_3__","id","_AllIcons__WEBPACK_IMPORTED_MODULE_2__","Examples","components_ExamplesPage__WEBPACK_IMPORTED_MODULE_1__","_Examples__WEBPACK_IMPORTED_MODULE_0__","getLanguage","s","marked__WEBPACK_IMPORTED_MODULE_0__","renderer","highlight","code","lang","prismjs__WEBPACK_IMPORTED_MODULE_1__","gfm","tables","breaks","pedantic","sanitize","smartLists","smartypants","preTransforms","postTransforms","replace","_","s1","s2","transform","transforms","options","t","markdownToHTML"],"mappings":"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","file":"js/25.cc227a6e.chunk.min.js","sourcesContent":["import * as React from \"react\";\nimport cn from \"classnames\";\nimport { Text } from \"@react-md/typography\";\n\nimport Markdown from \"components/Markdown\";\n\nexport interface IExampleProps {\n  exampleGroup?: boolean;\n  title: string;\n  children?: React.ReactNode;\n  className?: string;\n  description?: string;\n  contentClassName?: string;\n}\n\nconst Example: React.SFC<IExampleProps> = ({\n  title,\n  children,\n  className,\n  contentClassName,\n  description,\n  exampleGroup,\n}) => (\n  <section className={cn(\"examples-page__example\", className)}>\n    <Text type=\"headline-4\" className=\"examples-page__example-title\">\n      {title}\n    </Text>\n    {description && <Markdown markdown={description} />}\n    <div className={cn(\"examples-page__example-content\", { \"example-group\": exampleGroup }, contentClassName)}>\n      {children}\n    </div>\n  </section>\n);\n\nExample.defaultProps = {\n  exampleGroup: true,\n};\n\nexport default Example;\n","import * as React from \"react\";\nimport { Text } from \"@react-md/typography\";\n\nexport interface IExampleTitleProps {\n  children: React.ReactNode;\n}\n\nconst ExampleTitle: React.SFC<IExampleTitleProps> = ({ children }) => <Text type=\"headline-6\">{children}</Text>;\n\nexport default ExampleTitle;\n","import * as React from \"react\";\nimport { Text } from \"@react-md/typography\";\n\nimport Markdown from \"components/Markdown\";\n\nimport \"./examples-page.scss\";\nimport { default as Example, IExampleProps } from \"./Example\";\n\nexport type ExampleList = IExampleProps[];\n\nexport interface IExamplesPageProps {\n  title: string;\n  description?: string;\n  examples: ExampleList;\n}\n\nconst ExamplesPage: React.SFC<IExamplesPageProps> = ({ title, description, examples }) => (\n  <section className=\"examples-page\">\n    <header className=\"rmd-text-container\">\n      <Text type=\"headline-2\" className=\"examples-page__title\">\n        {title}\n      </Text>\n      {description && <Markdown className=\"rmd-text-container\" markdown={description} />}\n    </header>\n    {examples.map((example, key) => <Example key={key} {...example} />)}\n  </section>\n);\n\nexport default ExamplesPage;\n","import ExamplesPage from \"./ExamplesPage\";\n\nexport default ExamplesPage;\n\nexport { default as ExamplesPage } from \"./ExamplesPage\"\nexport * from \"./ExamplesPage\"\nexport { default as ExampleTitle } from \"./ExampleTitle\";\n","import * as React from \"react\";\nimport cn from \"classnames\";\n\nimport { markdownToHTML } from \"utils/markdown\";\n\nimport \"./markdown.scss\";\n\nexport interface IMarkdownProps {\n  style?: React.CSSProperties;\n  className?: string;\n  markdown: string;\n}\n\ninterface IInnerHTML {\n  __html: string;\n}\n\nexport interface IMarkdownState {\n  html: IInnerHTML;\n  prevMarkdown: string;\n}\n\nexport default class Markdown extends React.Component<IMarkdownProps, IMarkdownState> {\n  public static getDerivedStateFromProps(nextProps: IMarkdownProps, prevState: IMarkdownState) {\n    const { markdown } = nextProps;\n    if (prevState.prevMarkdown !== markdown) {\n      return {\n        html: { __html: markdownToHTML(nextProps.markdown) },\n        prevMarkdown: markdown,\n      }\n    }\n\n    return null;\n  };\n\n  constructor(props: IMarkdownProps) {\n    super(props);\n\n    this.state = {\n      html: { __html: markdownToHTML(props.markdown) },\n      prevMarkdown: props.markdown,\n    };\n  }\n\n  public render() {\n    const { style, className, markdown } = this.props;\n    const { html } = this.state;\n    if (!html.__html || !markdown) {\n      return null;\n    }\n\n    return <div style={style} className={cn(\"markdown-container\", className)} dangerouslySetInnerHTML={html} />;\n  }\n\n  private updateInnerHTML = () => {\n    const { markdown } = this.props;\n    if (!markdown) {\n      return;\n    }\n\n    const html = markdownToHTML(markdown);\n    if (this.state.html.__html !== html) {\n      this.setState({ html: { __html: html } });\n    }\n  };\n}\n","import * as React from \"react\";\nimport cn from \"classnames\";\n\nimport Markdown from \"./Markdown\";\n\nexport interface IMarkdownPageProps {\n  style?: React.CSSProperties;\n  className?: string;\n  markdown: string;\n}\n\nconst MarkdownPage: React.SFC<IMarkdownPageProps> = ({ className, ...props }) => (\n  <Markdown {...props} className={cn(\"markdown-page rmd-text-container\", className)} />\n);\n\nexport default MarkdownPage;\n","import Markdown from \"./Markdown\";\n\nexport default Markdown;\nexport { Markdown };\n\nexport { default as MarkdownPage } from \"./MarkdownPage\";\n","import * as React from \"react\";\nimport cn from \"classnames\";\nimport { ExampleTitle } from \"components/ExamplesPage\";\nimport { IFontIconProps } from \"@react-md/icon\";\nimport { MagicTooltip } from \"@react-md/tooltip\";\nimport * as MaterialIcons from \"@react-md/material-icons\";\n\ninterface IIcon {\n  name: string;\n  icon: React.ComponentType<IFontIconProps>;\n}\n\nimport \"./all-icons.scss\";\n\nconst { font, svg } = Object.keys(MaterialIcons).reduce(\n  (icons, key) => {\n    const icon = (MaterialIcons as { [key: string]: React.StatelessComponent })[key];\n    if (key.endsWith(\"FontIcon\")) {\n      icons.font.push({ icon, name: key });\n    } else {\n      icons.svg.push({ icon, name: key });\n    }\n\n    return icons;\n  },\n  { font: [] as IIcon[], svg: [] as IIcon[] }\n);\n\nconst AllIcons = () => (\n  <React.Fragment>\n    <ExampleTitle>Font Icons</ExampleTitle>\n    {font.map(({ icon, name }, i) => {\n      const tooltipId = `font-icon-tooltip-${i}`;\n\n      return (\n        <div\n          key={name}\n          className={cn(\"material-icons__example\", {\n            \"material-icons__example--last\": i === font.length - 1,\n          })}\n          aria-describedby={tooltipId}\n        >\n          {React.createElement(icon)}\n          <div className=\"material-icons__label\">{name}</div>\n          <MagicTooltip id={tooltipId}>{name}</MagicTooltip>\n        </div>\n      );\n    })}\n    <ExampleTitle>SVG Icons</ExampleTitle>\n    {svg.map(({ icon, name }, i) => {\n      const tooltipId = `svg-icon-tooltip-${i}`;\n\n      return (\n        <div\n          key={name}\n          className={cn(\"material-icons__example\", {\n            \"material-icons__example--last\": i === font.length - 1,\n          })}\n          aria-describedby={tooltipId}\n        >\n          {React.createElement(icon)}\n          <div className=\"material-icons__label\">{name}</div>\n          <MagicTooltip id={tooltipId}>{name}</MagicTooltip>\n        </div>\n      );\n    })}\n  </React.Fragment>\n);\n\nexport default AllIcons;\n","import * as React from \"react\";\n\nimport { default as ExamplesPage, ExampleList } from \"components/ExamplesPage\";\n\nimport AllIcons from \"./AllIcons\";\n\nconst examples: ExampleList = [{\n  title: \"All Icons\",\n  children: <AllIcons />,\n  contentClassName: \"material-icons__list\"\n}];\n\nconst Examples = () => <ExamplesPage title=\"MaterialIcons\" examples={examples} />;\n\nexport default Examples;\n","import Examples from \"./Examples\";\n\nexport default Examples;\n","import * as marked from \"marked\";\nimport * as Prism from \"prismjs\";\n\nimport \"prismjs/components/prism-bash\";\nimport \"prismjs/components/prism-css-extras\";\nimport \"prismjs/components/prism-scss\";\nimport \"prismjs/components/prism-jsx\";\nimport \"prismjs/components/prism-typescript\";\nimport \"prismjs/components/prism-git\";\n\nexport function getLanguage(s: string) {\n  if (!s) {\n    return \"markup\";\n  } else if (s === \"tsx\") {\n    return \"typescript\";\n  } else if (s === \"sh\") {\n    return \"bash\";\n  } else if (s === \"diff\") {\n    return \"git\";\n  }\n\n  return s;\n}\n\nmarked.setOptions({\n  renderer: new marked.Renderer(),\n  highlight: (code, lang) => Prism.highlight(code, Prism.languages[getLanguage(lang)]),\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: false,\n  smartLists: true,\n  smartypants: false,\n});\n\nexport interface IMarkdownOptions {\n  showToolbar?: boolean;\n  showLineNumbers?: boolean;\n}\n\nexport type MarkdownTransformation = (markdown: string, options?: IMarkdownOptions) => string;\nexport type MarkdownTransformationList = MarkdownTransformation[];\n\nconst preTransforms: MarkdownTransformationList = [];\nconst postTransforms: MarkdownTransformationList = [\n  markdown => markdown.replace(/<a href/g, '<a class=\"rmd-link\" href'),\n  markdown =>\n    markdown.replace(\n      /(<h2 id=\"table-of-contents\")(>Table of Contents<\\/h2>\\r?\\n<ul)/,\n      (_, s1, s2) => `${s1} class=\"markdown-toc\"${s2} class=\"markdown-toc__list\"`\n    ),\n  markdown =>\n    markdown.replace(/yarn add/g, '<span class=\"token function\">yarn</span> <span class=\"token function\">add</span>'),\n];\n\nexport function transform(markdown: string, transforms: MarkdownTransformation[], options?: IMarkdownOptions) {\n  return transforms.reduce((s, t) => t(s, options), markdown);\n}\n\nexport function markdownToHTML(markdown: string, options?: IMarkdownOptions) {\n  return transform(marked.parse(transform(markdown, preTransforms, options)), postTransforms, options);\n}\n"],"sourceRoot":""}