{"version":3,"sources":["components/Changelog.tsx","components/Markdown/Markdown.tsx","components/Markdown/MarkdownPage.tsx","components/Markdown/index.ts","components/packages/Elevation/Changelog/CHANGELOG.md","components/packages/Elevation/Changelog/Changelog.tsx","components/packages/Elevation/Changelog/index.ts","utils/markdown/index.ts"],"names":["Changelog","_a","changelog","markdown","split","length","react__WEBPACK_IMPORTED_MODULE_0__","components_Markdown__WEBPACK_IMPORTED_MODULE_1__","__webpack_exports__","Markdown","_super","props","_this","call","this","updateLinks","history","container","current","link","test","href","onclick","event","preventDefault","push","replace","window","location","origin","_i","links_1","Array","from","querySelectorAll","state","html","__html","Object","utils_markdown__WEBPACK_IMPORTED_MODULE_4__","prevMarkdown","react__WEBPACK_IMPORTED_MODULE_1__","tslib__WEBPACK_IMPORTED_MODULE_0__","getDerivedStateFromProps","nextProps","prevState","prototype","componentDidMount","componentDidUpdate","prevProps","render","style","className","ref","classnames__WEBPACK_IMPORTED_MODULE_2___default","dangerouslySetInnerHTML","react_router__WEBPACK_IMPORTED_MODULE_3__","MarkdownPage","_Markdown__WEBPACK_IMPORTED_MODULE_3__","_Markdown__WEBPACK_IMPORTED_MODULE_0__","module","exports","__webpack_require__","components_Changelog__WEBPACK_IMPORTED_MODULE_1__","_Changelog__WEBPACK_IMPORTED_MODULE_0__","getLanguage","s","marked__WEBPACK_IMPORTED_MODULE_0__","renderer","highlight","code","lang","prismjs__WEBPACK_IMPORTED_MODULE_1__","gfm","tables","breaks","pedantic","sanitize","smartLists","smartypants","headerIds","preTransforms","postTransforms","_","s1","s2","transform","transforms","options","reduce","t","markdownToHTML"],"mappings":"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","file":"js/30.6bd3fa92.chunk.min.js","sourcesContent":["import * as React from \"react\";\r\nimport { MarkdownPage } from \"components/Markdown\";\r\n\r\nexport interface IChangelogProps {\r\n  changelog: string;\r\n}\r\n\r\nconst Changelog: React.SFC<IChangelogProps> = ({ changelog }) => {\r\n  let markdown = \"# Changelog\";\r\n  if (changelog.split(/\\r?\\n/).length <= 3) {\r\n    markdown = `${markdown}\r\n\r\n#### This package is completely new starting with v2 and has not had any changes yet.\r\n`;\r\n  } else {\r\n    markdown = `${markdown}\r\n\r\n${changelog}`;\r\n  }\r\n\r\n  return <MarkdownPage markdown={markdown} />;\r\n};\r\n\r\nexport default Changelog;\r\n","import * as React from \"react\";\r\nimport cn from \"classnames\";\r\nimport { withRouter, RouteComponentProps } from \"react-router\";\r\n\r\nimport { markdownToHTML } from \"utils/markdown\";\r\n\r\nimport \"./markdown.scss\";\r\n\r\nexport interface IMarkdownProps extends RouteComponentProps<any> {\r\n  style?: React.CSSProperties;\r\n  className?: string;\r\n  markdown: string;\r\n}\r\n\r\ninterface IInnerHTML {\r\n  __html: string;\r\n}\r\n\r\nexport interface IMarkdownState {\r\n  html: IInnerHTML;\r\n  prevMarkdown: string;\r\n}\r\n\r\nclass Markdown extends React.Component<IMarkdownProps, IMarkdownState> {\r\n  public static getDerivedStateFromProps(nextProps: IMarkdownProps, prevState: IMarkdownState) {\r\n    const { markdown } = nextProps;\r\n    if (prevState.prevMarkdown !== markdown) {\r\n      return {\r\n        html: { __html: markdownToHTML(nextProps.markdown) },\r\n        prevMarkdown: markdown,\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private container: React.RefObject<HTMLDivElement>;\r\n  constructor(props: IMarkdownProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      html: { __html: markdownToHTML(props.markdown) },\r\n      prevMarkdown: props.markdown,\r\n    };\r\n\r\n    this.container = React.createRef();\r\n  }\r\n\r\n  public componentDidMount() {\r\n    this.updateLinks();\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: IMarkdownProps, prevState: IMarkdownState) {\r\n    if (this.state.html !== prevState.html) {\r\n      this.updateLinks();\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    const { style, className, markdown } = this.props;\r\n    const { html } = this.state;\r\n    if (!html.__html || !markdown) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        ref={this.container}\r\n        style={style}\r\n        className={cn(\"markdown-container\", className)}\r\n        dangerouslySetInnerHTML={html}\r\n      />\r\n    );\r\n  }\r\n\r\n  private updateLinks = () => {\r\n    const { history } = this.props;\r\n    if (!this.container.current) {\r\n      return;\r\n    }\r\n\r\n    const links = Array.from(this.container.current.querySelectorAll(\".rmd-link\") as NodeListOf<\r\n      HTMLAnchorElement\r\n    >);\r\n    for (const link of links) {\r\n      if (/^https?:\\/\\/(localhost|react-md|mlaursen\\.github\\.io\\/react-md\\/)/.test(link.href)) {\r\n        // update internal links to use browser history instead of native behavior\r\n        link.onclick = function handleClick(event: MouseEvent) {\r\n          event.preventDefault();\r\n          history.push(link.href.replace(window.location.origin, \"\"));\r\n        };\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default withRouter(Markdown);\r\n","import * as React from \"react\";\r\nimport cn from \"classnames\";\r\n\r\nimport Markdown from \"./Markdown\";\r\n\r\nexport interface IMarkdownPageProps {\r\n  style?: React.CSSProperties;\r\n  className?: string;\r\n  markdown: string;\r\n}\r\n\r\nconst MarkdownPage: React.SFC<IMarkdownPageProps> = ({ className, ...props }) => (\r\n  <Markdown {...props} className={cn(\"markdown-page rmd-text-container\", className)} />\r\n);\r\n\r\nexport default MarkdownPage;\r\n","import Markdown from \"./Markdown\";\r\n\r\nexport default Markdown;\r\nexport { Markdown };\r\n\r\nexport { default as MarkdownPage } from \"./MarkdownPage\";\r\n","module.exports = \"## Table of Contents\\r\\n\\r\\n\"","import * as React from \"react\";\r\n\r\nimport Changelog from \"components/Changelog\";\r\n\r\nconst changelog = require(\"./CHANGELOG.md\");\r\n\r\nexport default () => <Changelog changelog={changelog} />;\r\n","import Changelog from \"./Changelog\";\r\n\r\nexport default Changelog;\r\n","import * as marked from \"marked\";\r\nimport * as Prism from \"prismjs\";\r\n\r\nimport \"prismjs/components/prism-bash\";\r\nimport \"prismjs/components/prism-css-extras\";\r\nimport \"prismjs/components/prism-scss\";\r\nimport \"prismjs/components/prism-jsx\";\r\nimport \"prismjs/components/prism-typescript\";\r\nimport \"prismjs/components/prism-git\";\r\n\r\nexport function getLanguage(s: string) {\r\n  if (!s) {\r\n    return \"markup\";\r\n  } else if (s === \"tsx\") {\r\n    return \"typescript\";\r\n  } else if (s === \"sh\") {\r\n    return \"bash\";\r\n  } else if (s === \"diff\") {\r\n    return \"git\";\r\n  }\r\n\r\n  return s;\r\n}\r\n\r\nmarked.setOptions({\r\n  renderer: new marked.Renderer(),\r\n  highlight: (code, lang) => Prism.highlight(code, Prism.languages[getLanguage(lang)]),\r\n  gfm: true,\r\n  tables: true,\r\n  breaks: false,\r\n  pedantic: false,\r\n  sanitize: false,\r\n  smartLists: true,\r\n  smartypants: false,\r\n  headerIds: true,\r\n});\r\n\r\nexport interface IMarkdownOptions {\r\n  showToolbar?: boolean;\r\n  showLineNumbers?: boolean;\r\n}\r\n\r\nexport type MarkdownTransformation = (markdown: string, options?: IMarkdownOptions) => string;\r\nexport type MarkdownTransformationList = MarkdownTransformation[];\r\n\r\nconst preTransforms: MarkdownTransformationList = [];\r\nconst postTransforms: MarkdownTransformationList = [\r\n  markdown => markdown.replace(/<a href/g, '<a class=\"rmd-link\" href'),\r\n  markdown =>\r\n    markdown.replace(\r\n      /(<h2 id=\"table-of-contents\")(>Table of Contents<\\/h2>\\r?\\n<ul)/,\r\n      (_, s1, s2) => `${s1} class=\"markdown-toc\"${s2} class=\"markdown-toc__list\"`\r\n    ),\r\n  markdown =>\r\n    markdown.replace(\r\n      /yarn add/g,\r\n      '<span class=\"token function\">yarn</span> <span class=\"token function\">add</span>'\r\n    ),\r\n];\r\n\r\nexport function transform(\r\n  markdown: string,\r\n  transforms: MarkdownTransformation[],\r\n  options?: IMarkdownOptions\r\n) {\r\n  return transforms.reduce((s, t) => t(s, options), markdown);\r\n}\r\n\r\nexport function markdownToHTML(markdown: string, options?: IMarkdownOptions) {\r\n  return transform(\r\n    marked.parse(transform(markdown, preTransforms, options)),\r\n    postTransforms,\r\n    options\r\n  );\r\n}\r\n"],"sourceRoot":""}